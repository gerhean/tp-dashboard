[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**TrackPad**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* TrackPad is a desktop application developed for travelholics to track their past and future travel plans."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Site Map**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Contact Us"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org) "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Libraries used:"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 20,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    archiveName \u003d \u0027trackpad.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "run{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 2,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "### Yeh Yu Chun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cimg src\u003d\"images/peter-yeh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[[github](https://github.com/peter-yeh)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "### Lim Koon Kiat"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cimg src\u003d\"images/limkoonkiat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[[github](http://github.com/limkoonkiat)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### Lee York Tat"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cimg src\u003d\"images/leeyorktat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "[[github](http://github.com/leeyorktat)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Role:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### Robin Ho"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cimg src\u003d\"images/robinho98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "[[github](http://github.com/robinho98)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "[[portfolio](team/robinho98.md)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### Zhu Yuxuan"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cimg src\u003d\"images/yuxuanxc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "[[github](http://github.com/yuxuanxc)]"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 4,
      "yuxuanxc": 3,
      "peter-yeh": 3,
      "leeyorktat": 5,
      "-": 30,
      "limkoonkiat": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **1. Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "TrackPad is an app for users to create and store itineraries, to facilitate the planning of their dream vacation!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "This document includes the various design choices, architecture and implementation features of TrackPad. This document "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "is targeted towards developers who want to contribute to and extend our TrackPad app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **2. Setting up, getting started**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **3. Design**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cspan style\u003d\"display:block;align:center\"\u003e![Architecture Class Diagram](images/ArchitectureDiagram.png)\u003c/span\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv align\u003d\u0027center\u0027\u003e\u003csup\u003eFigure 2.1.1 Architecture Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Figure 2.1.1 explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[**`Commons`**](#26-common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`UI`**](#22-ui-component): The UI of the App."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Logic`**](#23-logic-component): The command executor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Model`**](#24-model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Storage`**](#25-storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.1.2 Class Diagram of the Logic Component\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "For example, the `Logic` component (seen from Figure 2.1.2 above) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "![Sequence Diagram of the Various Components](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.1.3 Sequence Diagram of the various components\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Figure 2.1.3 above shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.2 UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.2.1 Structure of the Ui Component, Ui Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `AttractionListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "This design is similar to the Architectural design of TrackPad, whereby different UiParts are encapsulated in the MainWindow java controller class. This allows the Logic to minimise interaction with the UI, since the MainWindow manages the changes to any UiPart classes that result from the execution in the Logic component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.3 Logic"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.3.1 Structure of the Logic Component, Logic Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. `Logic` in Figure 2.3.1 receives the user command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. It uses the `TrackPadParser` class to parse the command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding an attraction)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete-attraction 1\")` API call."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![Interactions Inside the Logic Component for the `delete-attraction 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.3.2 Interactions inside the Logic Component for the `delete-attraction 1` Command\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.4 Model"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.4.1 Structure of the Model Component, Model Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The `Model` component shown in Figure 2.4.1,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* stores an `AttractionList` object that is a list of all the attractions in TrackPad."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* stores an `ItineraryList` object that is a list of all the itineraries in TrackPad."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* exposes two unmodifiable `ObservableList\u003cAttraction\u003e` and `ObservableList\u003cItinerary\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to the lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `TrackPad`, which `Attraction` references. This allows `TrackPad` to only require one `Tag` object per unique `Tag`, instead of each `Attraction` needing their own `Tag` object.\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv\u003e![BetterModelClassDiagram](images/BetterModelClassDiagram.png)\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv align\u003d\u0027center\u0027\u003e\u003csup\u003eFigure 2.4.2 Structure of an alternative Model Component, Alternative Model Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.5 Storage"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv\u003e\u003csup\u003eFigure 2.5.1 Structure of the Storage Component, Storage Class Diagram\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The `Storage` component shown in Figure 2.5.1,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `UserPref` objects containing user preferences in json format and read it back."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `AttractionList` objects containing attraction data in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `ItineraryList` objects containing itinerary data in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.6 Common classes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **4. Implementation**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "*To be added*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.1 \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#### 3.1.1 Proposed Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedTrackPad`. It extends `TrackPad` with an undo/redo history, stored internally as an `trackPadStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#commit()` — Saves the current TrackPad state in its history."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#undo()` — Restores the previous TrackPad state from its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#redo()` — Restores a previously undone TrackPad state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTrackPad()`, `Model#undoTrackPad()` and `Model#redoTrackPad()` respectively."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTrackPad` will be initialized with the initial TrackPad state, and the `currentStatePointer` pointing to that single TrackPad state."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th attraction in the TrackPad. The `delete` command calls `Model#commitTrackPad()`, causing the modified state of the TrackPad after the `delete 5` command executes to be saved in the `trackPadStateList`, and the `currentStatePointer` is shifted to the newly inserted TrackPad state."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new attraction. The `add` command also calls `Model#commitTrackPad()`, causing another modified TrackPad state to be saved into the `trackPadStateList`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitTrackPad()`, so the TrackPad state will not be saved into the `trackPadStateList`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 4. The user now decides that adding the attraction was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTrackPad()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous TrackPad state, and restores the TrackPad to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial TrackPad state, then there are no previous TrackPad states to restore. The `undo` command uses `Model#canUndoTrackPad()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoTrackPad()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the TrackPad to that state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `trackPadStateList.size() - 1`, pointing to the latest TrackPad state, then there are no undone TrackPad states to restore. The `redo` command uses `Model#canRedoTrackPad()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the TrackPad, such as `list`, will usually not call `Model#commitTrackPad()`, `Model#undoTrackPad()` or `Model#redoTrackPad()`. Thus, the `trackPadStateList` remains unchanged."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTrackPad()`. Since the `currentStatePointer` is not pointing at the end of the `trackPadStateList`, all TrackPad states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#### 3.1.2 Design consideration"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "##### 3.1.2.1 Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire TrackPad."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the attraction being deleted)."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.2 \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **5. Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix A: Requirements**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix A: Product Scope**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* travelholics who love traveling and keeping track of their trips"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* travelled to many different places before"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* plans to travel to other countries in the future"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* has a need to manage a significant number of tourist attractions"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* manage information for trips and tourist attractions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* keeps track of different tourist attractions visited by the user"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* allows creating an itinerary to track future travels"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* customisable shortcuts that the user can set for frequently used commands"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix B: User Stories**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| Priority | As a …​                     | I want to …​                                                                    | So that I can…​                                              |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| -------- | ------------------------------ | ---------------------------------------------------------------------------------- | --------------------------------------------------------------- |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add tourist attractions\t                                                         | keep track of tourist attractions I want to visit"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| delete tourist attractions\t                                                     | remove tourist attractions that I might not want to visit"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| find tourist attractions from my list                                              | quickly search for a specific tourist attraction"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| see a list of all the tourist attractions\t                                         | get a look at all my tourist attractions at one go"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel  | clear all tourist attractions from my plan                                         | reset the list of attractions"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| edit the information in my tourist attractions\t                                 | update my attractions with new information"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| tag tourist attractions in different categories like food, sightseeing, activities | distinguish between the different kinds of tourist attractions"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add locations / addresses to my attractions                                        | know where the attraction is located and how to get there"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add descriptions to my attractions                                                 | know roughly what the attraction is about when viewing them"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add contact details such as email and phone number to my attractions               | know how to contact them if I need"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | new user\t                    | find the user guide easily\t                                                     | know what I can do with the app"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | create multiple itineraries for different trips\t                                 | plan for all my different travelling trips"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add descriptions to my itineraries such as trip details                            | ensure I have all the correct trip information in one place"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add dates to my itineraries                                                        | plan when the trip will take place"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add attractions to my itineraries                                                  | plan which attractions to visit"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | delete attractions from my itineraries                                             | remove attractions I do not want to visit anymore"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | edit attractions in my itineraries                                                 | update the attractions I am planning to visit in my itineraries"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | specify the times at which I visit an attraction within an itinerary               | plan when to visit the attractions"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | new user\t                    | see the app with sample data\t                                                     | see what kind of data the app can store"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add opening hours to my attractions                                                | know when to visit"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add the estimated price range to my attractions                                    | know which attractions to choose to match my budget"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add the estimated budget to my itineraries                                         | plan how much to spend on each trip"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person currently traveling\t    | mark tourist attractions as visited / not visited                                  | know which attractions I missed"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person who had already traveled | give ratings to my attractions                                                    | keep track of which tourist attractions were enjoyable"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "(For all use cases below, the **System** is the `TrackPad` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Add a tourist attraction**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to add a tourist attraction"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad adds the tourist attraction"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The given format for tourist attraction is invalid."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 2a1. TrackPad shows an error message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Delete a tourist attraction**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to list tourist attractions"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of tourist attractions"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "3.  User requests to delete a specific tourist attraction in the list"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "4.  TrackPad deletes the tourist attraction"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2b. The format is invalid. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error message."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Find a tourist attraction**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to find a tourist attraction"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of tourist attractions matching the keyword entered"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 3a. The given keyword is not found."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: List all tourist attractions**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to list all tourist attractions"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of all tourist attractions"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Clear all tourist attractions**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to delete all tourist attractions in the list"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad deletes all tourist attractions in the list"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 3a. Error deleting list from storage"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1.  The product should be able to hold up to 1000 tourist attractions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "3.  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "4.  The product is not required to recommend new tourist attractions which are not inputted by the user."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "5.  The product should be free to download and use."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "6.  The system should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "7.  The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "8.  The system should respond within five seconds."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "9.  The project is expected to be a brown-field project."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "10.  The progress of the project is expected to adhere to the schedule provided on the module website."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix F: Instructions for Manual Testing**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F1 Launch and shutdown"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F2 Deleting an attraction"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "1. Deleting an attraction while all attractions are being shown"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "   1. Prerequisites: List all attractions using the `list` command. Multiple attractions in the list."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      Expected: No attraction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F3 Saving data"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 68,
      "yuxuanxc": 20,
      "peter-yeh": 19,
      "leeyorktat": 4,
      "-": 265,
      "limkoonkiat": 103
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPad (TP) is a **desktop app for planning your trips and tracking tourist attractions, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Graphical User Interface (GUI). If you can type fast, TP can get your itinerary planned faster than traditional GUI apps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "This user guide will show you how to use the commands and features available in TP. TP is built for people who love to travel, "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "and want to collate and store all their itineraries in one single app. We welcome anyone who loves travelling to try out our app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 2. About This Document"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Welcome to the TrackPad User Guide!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "We at TrackPad believe that tracking tourist attractions and planning your trips should be both **easy and fuss-free**. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "We understand how **messy** it can be when it comes to keeping track of your travel itineraries, which can get frustrating."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "That\u0027s why here at TrackPad, we have come up with a simple yet useful guide to help you get started with using TrackPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Minimal prior technical knowledge is needed in order to use TrackPad and we hope to help you with your travel tracking and planning."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 3. Quick start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Here are the steps to download TrackPad and start using it immediately!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1. Download the latest `trackpad.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-3/tp/releases)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your TrackPad."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the following Figure 1 should appear in a few seconds. Here\u0027s how your app should look like!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    Note how the app contains some sample data. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "   \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 1. The Ui of TrackPad\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    Try out some of these commands!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`list-attraction`** : Lists all tourist attractions added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`add-attraction`**`n/Singapore Zoo l/Singapore, Singapore p/62693411 t/hot a/80 Mandai Lake Rd, 729826` : "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "   Adds an attraction named `Singapore Zoo` to TrackPad."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`delete-attraction`**`3` : Deletes the 3rd attraction shown in the current list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`edit-attraction`**`3 pr/HIGH` : Edits the 3rd attraction shown in the current list, changing its original"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    price range to HIGH."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`clear-attraction`** : Deletes all attractions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "1. Refer to [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.1 Command Format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  e.g. in `add-attraction n/ATTRACTION`, `ATTRACTION` is a parameter which can be used as `add-attraction n/USS`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  e.g `n/ATTRACTION [t/TAG]` can be used as `n/USS t/28 OCT` or as `n/USS`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Items with `…`​ after them can be used multiple times or not used at all.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (not used), `t/Singapore`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  e.g. if the command specifies `n/ATTRACTION p/PHONE_NUMBER`, `p/PHONE_NUMBER n/ATTRACTION` is also acceptable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.2 General Features"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "These basic features help TrackPad to run smoothly, as well as allow you to interact with TrackPad without the use of your mouse, perfect for fast typists!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.2.1 Viewing help : `help`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Shows a message with a link to this User Guide."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 2. The help window of TrackPad\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.2.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.2.3 Saving the data"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "TrackPad data will be saved in the storage automatically after any command that changes the data. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "There is no need for you to save manually."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.3 Attraction Features"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Attractions are the core building blocks of TrackPad and are required to populate your itineraries! "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "The following features are tailored for attractions in TrackPad. "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.1 Adding a tourist attraction: `add-attraction`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Adds a tourist attraction to the current list of attractions. Each attraction must contain a name and a location. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Additionally, use the optional fields (as listed below) to include more information for your attractions. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format (Minimal): `add-attraction n/ATTRACTION_NAME l/LOCATION`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format (All fields): `add-attraction n/ATTRACTION_NAME l/LOCATION [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Compulsory fields:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **ATTRACTION_NAME**: Name of the attraction. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **LOCATION**: Location of the attraction. While any value is possible, we recommend you use the format `CITY, COUNTRY` for a better in-app experience."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Optional fields:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **DESCRIPTION**: Description of the attraction, can take in any value. Use this to give a brief summary of the attraction."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **PHONE_NUMBER**: Phone number of the attraction, can only contain numbers and be at least 3 digits long, no spaces."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **EMAIL**: Email of the attraction in the format `local-part@domain`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **ADDRESS**: Postal address of the attraction, can take in any value. Use this if the location field is not enough for locating the attraction."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **OPENING_HOURS**: Opening hours of the attraction in the format `opening time - closing time` (both in 24h format)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **PRICE_RANGE**: Price range of the attraction. Use `LOW`, `MEDIUM` or `HIGH` to indicate the range."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **RATING**: Rating of the attraction. Use a number between `0.0` to `5.0` to indicate your experience of the attraction after visiting it."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **VISITED**: Marks whether you have visited the attraction before. Use `TRUE` if you want to mark it as visited, and `FALSE` otherwise. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **TAG**: Adds tags to further describe the attraction. Tag names should only contain letters and numbers."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "An attraction can have any number of tags."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* `add-attraction n/USS a/8 Sentosa Gateway, 098269 l/Singapore, Singapore`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* `add-attraction n/Singapore Zoo p/62693411 t/hot a/80 Mandai Lake Rd, 729826 l/Singapore, Singapore e/singaporezoo@gmail.com "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "op/1000-1800 pr/MEDIUM r/4.6 v/FALSE`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![add_attraction_result](images/addAttractionResult.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 3. The result of \u003ccode\u003eadd-attraction\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.2 Editing a tourist attraction: `edit-attraction`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Edits a tourist attraction in the current list of attractions."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `edit-attraction INDEX [n/ATTRACTION_NAME] [l/LOCATION] [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Edits the attraction at the specified `INDEX`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* The index refers to the index number shown in the displayed tourist attraction list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Field entries are the same as the `add-attraction` command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Any field can be changed by inputting its corresponding prefix in the command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    * Example: `add-attraction n/MBS l/Singapore, Singapore r/4.3` in an attraction list followed by "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    `edit-attraction 1 r/4.6` changes the rating of the 1st attraction in the list from `4.3` to `4.6`.\u003cbr\u003e\u003cbr\u003e        "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    ![result_of_editing_existing_fields](images/editAttractionResult1.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 4. The result of \u003ccode\u003eedit-attraction 1 r/4.6\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* New fields can be added to current attractions."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    * Example: `edit-attraction 1 pr/MEDIUM t/hotel` adds the price range of MBS as `MEDIUM` and adds an `hotel` tag.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    ![result_of_editing_new_fields](images/editAttractionResult2.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 5. The result of \u003ccode\u003eedit-attraction 1 pr/MEDIUM t/hotel\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Editing the tag of an attraction does not add on to its existing tags. Rather, it replaces all existing tags with the "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "new tags you’re specifying."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.3 Deleting a tourist attraction : `delete-attraction`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes a tourist attraction from the current list of attractions."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `delete-attraction INDEX`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Deletes the attraction at the specified `INDEX`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index refers to the index number shown in the displayed tourist attraction list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `list-attraction` followed by `delete-attraction 1` deletes the 1st attraction in the TrackPad.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![result for `delete-attraction`](images/deleteAttractionResult.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 6. The result of \u003ccode\u003edelete-attraction 1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `find-attraction animals` followed by `delete 2` deletes the 2nd tourist attraction in the results of the `find-attraction` command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.4 Marking a tourist attraction as visited: `markVisited-attraction`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Marks a tourist attraction in the current list of attractions as visited."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `markVisited-attraction INDEX`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Marks the attraction at the specified `INDEX` as visited."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* The index refers to the index number shown in the displayed tourist attraction list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Any attraction can be marked visited, even if the attraction was already visited."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `markVisited-attraction 2` marks the 2nd attraction in the TrackPad as visited."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result for \u0027markVisited-attraction\u0027](images/markVisitedAttraction.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 7. The result of \u003ccode\u003emarkVisited-attraction 2\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Typing `markVisited-attraction 2` again will show that the 2nd attraction in the TrackPad is visited."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.5 Finding a tourist attraction: `find-attraction`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Finds any tourist attraction which contains the keyword(s)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `find-attraction KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The search is case-insensitive. e.g `singapore zoo` will match `Singapore Zoo`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The order of the keywords does not matter. e.g. `Zoo Singapore` will match `Singapore Zoo`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only the attractions in the list of attractions will be searched."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Only full words will be matched e.g. `Sento` will not match `Sentosa`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `find-attraction jurong` returns `Jurong Bird Park` and `Snow City`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![result for \u0027find-attraction\u0027](images/findJurongResult.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 8. The result of \u003ccode\u003efind-attraction jurong\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.6 Listing all tourist attractions : `list-attraction`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Shows a list of all the tourist attractions. Use this command to reset the view of the Attractions panel, as "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "certain commands (`find-attraction`) can alter the view of the Attractions panel. "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `list-attraction`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.3.7 Clearing all attractions : `clear-attraction`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Clears all tourist attractions."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Format: `clear-attraction`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`clear-attraction` will remove all the attractions stored in TrackPad."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "This action is irreversible and should be used with caution."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.4 Itinerary Features"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Itineraries help track the details of your trip, as well as the attractions you plan on visiting."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.1 Adding a new itinerary: `add-itinerary`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Adds a new itinerary to the current list of itineraries."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `add-itinerary n/ITINERARY_NAME sd/START_DATE ed/END_DATE [d/DESCRIPTION] [b/BUDGET]`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Compulsory fields:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **ITINERARY_NAME**: Name of the itinerary."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **START_DATE**: Start date of the itinerary in the format `dd-mm-yyyy`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **END_DATE**: End date of the itinerary in the format `dd-mm-yyyy`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Optional fields:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **DESCRIPTION**: Description of the itinerary, can take in any value. Use this to give a brief summary of the itinerary or to note down important details."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **BUDGET**: Planned budget for the itinerary, can only contain a non-negative number up to two decimal places. Use this to plan how much to spend on your trip."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* `add-itinerary n/Europe Trip sd/01-12-2020 ed/20-12-2020`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `add-itinerary n/Japan holiday sd/15-01-2019 ed/30-01-2019 d/with friends b/4000 `"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.2 Editing an itinerary: `edit-itinerary`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Edits an itinerary from the current list of itineraries."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `edit-itinerary INDEX [n/NAME] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [b/BUDGET]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Edits the itinerary at the specified `INDEX`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The index refers to the index number shown in the displayed itinerary list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Field entries are the same as the `add-itinerary` command."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Any field can be changed by inputting its corresponding prefix in the command."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `add-itinerary n/Europe Trip sd/01-12-2020 ed/20-12-2020` in an itinerary list followed by `edit-itinerary 1 sd/06-12-2020` changes the start date of the 1st itinerary in the list from `01-12-2020` to `06-12-2020`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.3 Deleting an itinerary: `delete-itinerary`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes an itinerary from the current list of itineraries."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `delete-itinerary INDEX`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Deletes the itinerary at the specified `INDEX`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index refers to the index number shown in the displayed itinerary list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `list-itinerary` followed by `delete 2` deletes the 2nd itinerary from the list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.4 Finding an itinerary: `find-itinerary`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Finds itineraries from the current list of itineraries which contain the keyword(s)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Format: `find-itinerary KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The search is case-insensitive. e.g `japan` will match `Japan`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The order of the keywords does not matter. e.g. `Okinawa Japan` will match `Japan Okinawa`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only the name of the itinerary will be searched."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only full words will be matched e.g. `Jap` will not match `Japan`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* `find-itinerary Japan` returns `Japan Okinawa` and `Japan Tokyo`\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.5 Listing all itineraries: `list-itinerary`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Shows all itineraries."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `list-itinerary`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.6 Selecting an itinerary: `select-itinerary`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Selects an itinerary to be shown, from the current list of itineraries."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `select-itinerary INDEX`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Selects the itinerary at the specified `INDEX`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index refers to the index number shown in the displayed itinerary list."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `select-itinerary 3` selects the 3rd itinerary in the list of itineraries."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.4.7 Clearing all itineraries : `clear-itinerary`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Clears all itineraries."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `clear-itinerary`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "`clear-itinerary` will remove all the itineraries stored in TrackPad."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "This action is irreversible and should be used with caution."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.5 Itinerary Attraction Features"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Itinerary attractions are attractions added to an itinerary, but with additional start/end time fields."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "These commands deal with attractions that are found in an itinerary."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cspan style\u003d\"display:block;align:center\"\u003e![Diagram explaining Itinerary Attraction](images/ItineraryAttraction.png)\u003c/span\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv align\u003d\u0027center\u0027\u003e\u003ci\u003e\u003csup\u003eFigure 9. Diagram simulating the attractions found in an itinerary\u003c/sup\u003e\u003c/i\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "In Figure 9 above, Itinerary 1 has been selected with `select-itinerary 1` command, shown with a yellow border. "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Attraction 1A is an itinerary attraction. It has all the same fields as Attraction A, but with the additional start/end time field."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.5.1 Adding an attraction to the selected itinerary: `add-itinerary-attraction`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Adds an attraction to the selected itinerary."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `add-itinerary-attraction INDEX st/START_TIME et/END_TIME day/DAY_VISITING`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **INDEX**: Index of attraction in the current list of attractions."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **START_TIME**: Start time to visit the attraction in the 24H format `HHMM`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **END_TIME**: End time to visit the attraction in the 24H format `HHMM`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **DAY_VISITING**: Day on which you plan to visit the attraction in the itinerary."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The start time and end time cannot overlap with other attractions in the selected itinerary."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* None of the fields can be left blank."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `add-itinerary-attraction 2 st/1000 et/1600 day/3`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `add-itinerary-attraction 1 st/0900 et/1200 day/2`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "The attraction will be added into the selected itinerary."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.5.2 Editing an attraction from the selected itinerary : `edit-itinerary-attraction`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Edits an existing attraction in the selected itinerary."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `edit-itinerary-attraction INDEX day/DAY_VISITING [st/START_TIME] [et/END_TIME]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* Edits the attraction specified by the `INDEX` and `DAY_VISITING`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index refers to the index number shown in the selected itinerary."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* The day refers to the day in the selected itinerary that contains the attraction you want to edit."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* The index and day **must be positive integers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "*  `edit-itinerary-attraction 3 day/2 st/1500 et/1800` Edits the start time and the end time of the third attraction on day 2 of the selected itinerary to  be `1500` and `1800` respectively."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "#### 4.5.3 Deleting an attraction from the selected itinerary: `delete-itinerary-attraction`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes an attraction from the selected itinerary."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `delete-itinerary-attraction INDEX`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Deletes the attraction specified by the `INDEX`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index refers to the index number shown in the selected itinerary."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--how to comment in markdown--\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TrackPad home folder."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 5.1 General Commands"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 5.2 Attraction Commands"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Add attraction** | `add-attraction n/ATTRACTION_NAME l/LOCATION [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​` \u003cbr\u003e e.g. `add n/Singapore Zoo p/62693411 t/hot a/80 Mandai Lake Rd, 729826`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Edit attraction** | `edit-attraction INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g. `edit 2 n/Singapore Zoo e/zoo@example.com`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete attraction** | `delete-attraction INDEX`\u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Mark Visited attraction** | `markVisited-attraction INDEX`\u003cbr\u003e e.g. `markVisited-attraction 2`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Find attraction** | `find-attration KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g. `find Zoo`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**List attractions** | `list-attraction`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Clear all attractions** | `clear-attraction`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 5.3 Itinerary Commands"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Add itinerary** | `add-itinerary n/ITINERARY sd/START_DATE ed/END_DATE [d/DESCRIPTION] [b/BUDGET]` \u003cbr\u003e e.g. `add-itinerary n/Japan holiday sd/15-01-2019 ed/30-01-2019 d/with friends b/4000`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Edit itinerary** | `edit-itinerary INDEX [n/NAME] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [b/BUDGET]`\u003cbr\u003e e.g. `edit-itinerary 2 n/Singapore journey sd/05-06-2019`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete itinerary** | `delete-itinerary INDEX`\u003cbr\u003e e.g. `delete-itinerary 3`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Find itinerary** | `find-itinerary KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g. `find-itinerary Korea`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**List itineraries** | `list-itinerary`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Select itinerary** | `select-itinerary INDEX`\u003cbr\u003e e.g. `select-itinerary 3`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Clear all itineraries** | `clear-itinerary`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 5.4 Itinerary attraction Commands"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Add itinerary attraction** | `add-itinerary-attraction INDEX st/START_TIME et/END_TIME day/DAY_VISITING` \u003cbr\u003e e.g. `add-itinerary-attraction 1 st/1400 et/1500 day/5`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Edit itinerary attraction** | `edit-itinerary-attraction INDEX day/DAY_VISITING [st/START_TIME] [et/END_TIME]` \u003cbr\u003e e.g. `edit-itinerary-attraction 1 day/2 st/0900 et/1000`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete itinerary attraction** | `delete-itinerary-attraction INDEX`\u003cbr\u003e e.g. `delete-itinerary-attraction 1`"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 21,
      "Robinho98": 50,
      "peter-yeh": 103,
      "leeyorktat": 98,
      "-": 115,
      "limkoonkiat": 62
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "title: TrackPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T09-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T09-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**TrackPad is a desktop application for planning your trips and tracking tourist attractions.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* If you are interested in using TrackPad, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* If you are interested about developing TrackPad, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.AttractionListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.ItineraryListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonAttractionListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonItineraryListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TrackPad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListStorage(userPrefs.getAttractionListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListStorage(userPrefs.getItineraryListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s trackpad and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * The data from the sample trackpad will be used instead if {@code storage}\u0027s trackpad is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * or an empty trackpad will be used instead if errors occur when reading {@code storage}\u0027s trackpad."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cReadOnlyAttractionList\u003e attractionListOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList initialAttractionList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cReadOnlyItineraryList\u003e itineraryListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyItineraryList initialItineraryList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            // attraction list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            attractionListOptional \u003d storage.readAttractionList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (!attractionListOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AttractionList\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d attractionListOptional.orElseGet(SampleDataUtil::getSampleAttractionsList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            // itinerary list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryListOptional \u003d storage.readItineraryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (!itineraryListOptional.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ItineraryList\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d itineraryListOptional.orElseGet(SampleDataUtil::getSampleItineraryList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AttractionList\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" and empty ItineraryList\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AttractionList\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" and empty ItineraryList\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ModelManager(initialAttractionList, initialItineraryList, userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AttractionList\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" and empty ItineraryList\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"Starting TrackPad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TrackPad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 6,
      "-": 159,
      "limkoonkiat": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String LOG_FILE \u003d \"trackpad.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX \u003d \"The attraction index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_ATTRACTIONS_LISTED_OVERVIEW \u003d \"%1$d attractions listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX \u003d \"The itinerary index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_ITINERARY_LISTED_OVERVIEW \u003d \"%1$d itineraries listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "-": 10,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the AttractionList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see seedu.address.model.Model#getAttractionList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyAttractionList getAttractionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of attractions */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ObservableList\u003cAttraction\u003e getFilteredAttractionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 AttractionList file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the ItineraryList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see seedu.address.model.Model#getItineraryList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyItineraryList getItineraryList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of itineraries */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getFilteredItineraryList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 ItineraryList file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 3,
      "-": 45,
      "limkoonkiat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.TrackPadParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final TrackPadParser trackPadParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        trackPadParser \u003d new TrackPadParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Command command \u003d trackPadParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.saveAttractionList(model.getAttractionList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.saveItineraryList(model.getItineraryList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            System.out.println(model.getItineraryListFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getAttractionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getAttractionListFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getItineraryList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getItineraryListFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 7,
      "-": 75,
      "limkoonkiat": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Overrides equal method to properly compare between 2 command results"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param other command result to compare with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 5,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TrackPad as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/AddAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Adds an attraction to the attractions list in TrackPad."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-attraction\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an attraction to TrackPad. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_OPENING_HOURS + \"OPENING HOURS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_PRICE_RANGE + \"PRICE RANGE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_VISITED + \"VISITED] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_NAME + \"Singapore Zoo \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_LOCATION + \"Singapore, Singapore \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_PHONE + \"62693411 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_EMAIL + \"sgzoo@example.com \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_ADDRESS + \"80 Mandai Lake Rd, 729826 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Home to over 2,800 animals. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_OPENING_HOURS + \"0830-1800 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_PRICE_RANGE + \"MEDIUM \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_RATING + \"4.8 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + PREFIX_VISITED + \"TRUE \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_TAG + \"animal \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New attraction added: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in TrackPad\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Attraction toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates an AddAttractionCommand to add the specified {@code Attraction}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AddAttractionCommand(Attraction attraction) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        toAdd \u003d attraction;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (model.hasAttraction(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.addAttraction(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof AddAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAttractionCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 23,
      "Robinho98": 9,
      "peter-yeh": 1,
      "-": 39,
      "limkoonkiat": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/ClearAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Clears all the attractions in the attractions list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ClearAttractionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-attraction\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TrackPad\u0027s attractions has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setAttractionList(new AttractionList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "-": 16,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/DeleteAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deletes an attraction identified using it\u0027s displayed index from the attractions list in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-attraction\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \": Deletes the attraction identified by the index number used in the displayed attraction list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRACTION_SUCCESS \u003d \"Deleted attraction: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public DeleteAttractionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof DeleteAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAttractionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "Robinho98": 8,
      "-": 38,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/EditAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Edits the details of an existing attraction in the attractions list in TrackPad."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-attraction\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the attraction identified \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"by the index number used in the displayed attraction list. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_OPENING_HOURS + \"OPENING HOURS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_PRICE_RANGE + \"PRICE RANGE] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"[\" + PREFIX_VISITED + \"VISITED] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_PHONE + \"62693411 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_EMAIL + \"sgzoo@example.com\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRACTION_SUCCESS \u003d \"Edited Attraction: %1$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in TrackPad.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final EditAttractionDescriptor editAttractionDescriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param index of the attraction in the filtered attraction list to edit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param editAttractionDescriptor details to edit the attraction with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionCommand(Index index, EditAttractionDescriptor editAttractionDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(editAttractionDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.editAttractionDescriptor \u003d new EditAttractionDescriptor(editAttractionDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d createEditedAttraction(attractionToEdit, editAttractionDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!attractionToEdit.isSameAttraction(editedAttraction) \u0026\u0026 model.hasAttraction(editedAttraction)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.setAttraction(attractionToEdit, editedAttraction);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * edited with {@code editAttractionDescriptor}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private static Attraction createEditedAttraction(Attraction attractionToEdit,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                                                     EditAttractionDescriptor editAttractionDescriptor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assert attractionToEdit !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name updatedName \u003d editAttractionDescriptor.getName().orElse(attractionToEdit.getName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone updatedPhone \u003d editAttractionDescriptor.getPhone().orElse(attractionToEdit.getPhone());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email updatedEmail \u003d editAttractionDescriptor.getEmail().orElse(attractionToEdit.getEmail());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address updatedAddress \u003d editAttractionDescriptor.getAddress().orElse(attractionToEdit.getAddress());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description updatedDescription \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getDescription().orElse(attractionToEdit.getDescription());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location updatedLocation \u003d editAttractionDescriptor.getLocation().orElse(attractionToEdit.getLocation());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours updatedOpeningHours \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getOpeningHours().orElse(attractionToEdit.getOpeningHours());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange updatedPriceRange \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getPriceRange().orElse(attractionToEdit.getPriceRange());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating updatedRating \u003d editAttractionDescriptor.getRating().orElse(attractionToEdit.getRating());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d editAttractionDescriptor.getVisited().orElse(attractionToEdit.getVisited());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editAttractionDescriptor.getTags().orElse(attractionToEdit.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                updatedDescription, updatedLocation, updatedOpeningHours, updatedPriceRange,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                updatedRating, updatedVisited, updatedTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!(other instanceof EditAttractionCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand e \u003d (EditAttractionCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 editAttractionDescriptor.equals(e.editAttractionDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Stores the details to edit the attraction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * corresponding field value of the attraction."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static class EditAttractionDescriptor {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private OpeningHours openingHours;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private PriceRange priceRange;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        private Visited visited;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public EditAttractionDescriptor() {}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public EditAttractionDescriptor(EditAttractionDescriptor toCopy) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setOpeningHours(toCopy.openingHours);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setPriceRange(toCopy.priceRange);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            setVisited(toCopy.visited);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, description,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    location, openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setOpeningHours(OpeningHours openingHours) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cOpeningHours\u003e getOpeningHours() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(openingHours);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setPriceRange(PriceRange priceRange) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cPriceRange\u003e getPriceRange() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(priceRange);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void setVisited(Visited visited) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            this.visited \u003d visited;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public Optional\u003cVisited\u003e getVisited() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return Optional.ofNullable(visited);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (!(other instanceof EditAttractionDescriptor)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            EditAttractionDescriptor e \u003d (EditAttractionDescriptor) other;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getOpeningHours().equals(e.getOpeningHours())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getPriceRange().equals(e.getPriceRange())"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    \u0026\u0026 getVisited().equals(e.getVisited())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 73,
      "Robinho98": 55,
      "leeyorktat": 3,
      "-": 174,
      "limkoonkiat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/FindAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Finds and lists all attractions in the attractions list in TrackPad whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-attraction\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all attractions whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Zoo Orchard Gardens\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public FindAttractionCommand(AttractionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                String.format(Messages.MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, model.getFilteredAttractionList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof FindAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAttractionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "Robinho98": 2,
      "peter-yeh": 1,
      "leeyorktat": 1,
      "-": 29,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/ListAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Lists all attractions in the attractions list in TrackPad to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ListAttractionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-attraction\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all attractions\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "Robinho98": 2,
      "peter-yeh": 1,
      "-": 17,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/MarkVisitedAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Marks an existing attraction in the attractions list in TrackPad as visited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markVisited-attraction\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the attraction identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"by the index number used in the displayed attraction list as visited.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_MARKVISITED_ATTRACTION_SUCCESS \u003d \"Attraction marked as visited: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param index of the attraction in the filtered attraction list to mark as visited"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "//     * @param markVisitedAttractionDescriptor details to edit the attraction with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public MarkVisitedAttractionCommand(Index index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d createMarkVisitedAttraction(attractionToMarkVisited);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * edited with {@code editAttractionDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static Attraction createMarkVisitedAttraction(Attraction attractionToMarkVisited) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assert attractionToMarkVisited !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name unchangedName \u003d attractionToMarkVisited.getName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone unchangedPhone \u003d attractionToMarkVisited.getPhone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email unchangedEmail \u003d attractionToMarkVisited.getEmail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address unchangedAddress \u003d attractionToMarkVisited.getAddress();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Description unchangedDescription \u003d attractionToMarkVisited.getDescription();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Location unchangedLocation \u003d attractionToMarkVisited.getLocation();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        OpeningHours unchangedOpeningHours \u003d attractionToMarkVisited.getOpeningHours();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        PriceRange unchangedPriceRange \u003d attractionToMarkVisited.getPriceRange();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Rating unchangedRating \u003d attractionToMarkVisited.getRating();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d new Visited(\"TRUE\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e unchangedTags \u003d attractionToMarkVisited.getTags();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new Attraction(unchangedName, unchangedPhone, unchangedEmail, unchangedAddress,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedDescription, unchangedLocation, unchangedOpeningHours, unchangedPriceRange,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedRating, updatedVisited, unchangedTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof MarkVisitedAttractionCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand e \u003d (MarkVisitedAttractionCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/AddItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-itinerary\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an itinerary to TrackPad. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"BUDGET] \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New itinerary added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"This itinerary already exists in TrackPad\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Itinerary toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an AddItineraryCommand to add the specified {@code Itinerary}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AddItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        toAdd \u003d itinerary;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (model.hasItinerary(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.addItinerary(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AddItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddItineraryCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/ClearItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Clears all the itineraries in the itinerary list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ClearItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-itinerary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TrackPad\u0027s itineraries has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setItineraryList(new ItineraryList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/DeleteItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deletes an itinerary identified using it\u0027s displayed index from the itinerary list in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-itinerary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \": Deletes the itinerary identified by the index number used in the displayed itinerary list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DELETE_ITINERARY_SUCCESS \u003d \"Deleted itinerary: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DeleteItineraryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItinerary\u003e lastShownList \u003d model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITINERARY_SUCCESS, itineraryToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof DeleteItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteItineraryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/EditItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITINERARIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Edits the details of an existing itinerary in the itineraries list in TrackPad."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class EditItineraryCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-itinerary\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the itinerary identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"by the index number used in the displayed itinerary list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"[\" + PREFIX_END_DATE + \"END_DATE ] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"[\" + PREFIX_BUDGET + \"BUDGET ] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 2 n/Singapore journey sd/05-06-2019\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_EDIT_ITINERARY_SUCCESS \u003d \"Edited Itinerary: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"This itinerary already exists in TrackPad.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final EditItineraryDescriptor editItineraryDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @param index of the itinerary in the filtered itinerary list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @param editItineraryDescriptor details to edit the itinerary with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public EditItineraryCommand(Index index, EditItineraryDescriptor editItineraryDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(editItineraryDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.editItineraryDescriptor \u003d new EditItineraryDescriptor(editItineraryDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cItinerary\u003e lastShownList \u003d model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary itineraryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary editedItinerary \u003d createEditedItinerary(itineraryToEdit, editItineraryDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!itineraryToEdit.isSameItinerary(editedItinerary) \u0026\u0026 model.hasItinerary(editedItinerary)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.setItinerary(itineraryToEdit, editedItinerary);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Creates and returns a {@code Itinerary} with the details of {@code itineraryToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * edited with {@code editItineraryDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private static Itinerary createEditedItinerary(Itinerary itineraryToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                                                     EditItineraryDescriptor editItineraryDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assert itineraryToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Name updatedName \u003d editItineraryDescriptor.getName().orElse(itineraryToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Description updatedDescription \u003d editItineraryDescriptor.getDescription()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .orElse(itineraryToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ItineraryDate updatedStartDate \u003d editItineraryDescriptor.getStartDate().orElse(itineraryToEdit.getStartDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ItineraryDate updatedEndDate \u003d editItineraryDescriptor.getEndDate().orElse(itineraryToEdit.getEndDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Budget updatedBudget \u003d editItineraryDescriptor.getBudget().orElse(itineraryToEdit.getBudget());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new Itinerary(updatedName, updatedDescription, updatedStartDate, updatedEndDate, updatedBudget);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!(other instanceof EditItineraryCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        EditItineraryCommand e \u003d (EditItineraryCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u0026\u0026 editItineraryDescriptor.equals(e.editItineraryDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Stores the details to edit the itinerary with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * corresponding field value of the itinerary."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static class EditItineraryDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private ItineraryDate startDate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private ItineraryDate endDate;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Budget budget;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public EditItineraryDescriptor() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public EditItineraryDescriptor(EditItineraryDescriptor toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setBudget(toCopy.budget);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, startDate, endDate, budget);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setStartDate(ItineraryDate startDate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cItineraryDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setEndDate(ItineraryDate endDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cItineraryDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(budget);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            if (!(other instanceof EditItineraryDescriptor)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            EditItineraryDescriptor e \u003d (EditItineraryDescriptor) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 getBudget().equals(e.getBudget());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 216
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/FindItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Finds and lists all itineraries in the itineraries list in TrackPad whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class FindItineraryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-itinerary\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all itineraries whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" Korea\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ItineraryContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public FindItineraryCommand(ItineraryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            String.format(Messages.MESSAGE_ITINERARY_LISTED_OVERVIEW, model.getFilteredItineraryList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            || (other instanceof FindItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindItineraryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/ListItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITINERARIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Lists all the itineraries in the itinerary list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class ListItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-itinerary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all itineraries\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/AddItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Adds an attraction to the attractions list in TrackPad."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-itinerary-attraction\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_ADD_ATTRACTION_SUCCESS \u003d \"Added Attraction: %1$s to Itinerary: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in the itinerary.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_START_TIME \u003d \"The start time cannot be later than end time.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an attraction identified by the index number used\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \" in the displayed attraction list to the itinerary identified by the the index number used in the\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \" displayed itinerary list.\\n \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_START_TIME + \"START_TIME \" + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_DAY_VISITING + \"DAY_VISITING \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" INDEX \" + PREFIX_START_TIME + \"1000 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_END_TIME + \"1600 \" + PREFIX_DAY_VISITING + \"3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisited;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates an AddAttractionCommand to add the specified {@code Attraction}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public AddItineraryAttractionCommand(Index index, ItineraryTime startTime, ItineraryTime endTime,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                         Index dayVisited) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(dayVisited);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisited \u003d dayVisited;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction attractionToAdd \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttractionToAdd \u003d new ItineraryAttraction(attractionToAdd, startTime, endTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (model.getCurrentItinerary().getDay(dayVisited).contains(itineraryAttractionToAdd)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.getCurrentItinerary().addItineraryAttraction(itineraryAttractionToAdd, dayVisited);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_ATTRACTION_SUCCESS, itineraryAttractionToAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof AddItineraryAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 index.equals(((AddItineraryAttractionCommand) other).index)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 startTime.equals(((AddItineraryAttractionCommand) other).startTime)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 endTime.equals(((AddItineraryAttractionCommand) other).endTime)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 dayVisited.equals(((AddItineraryAttractionCommand) other).dayVisited));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 84,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/DeleteItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Deletes an attraction identified using it\u0027s displayed index from the attractions in current itinerary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-itinerary-attraction\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRACTION_SUCCESS \u003d \"Deleted attraction: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the attraction identified by the index of\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"attraction in the selected itinerary.\\nParameters: INDEX \" + PREFIX_DAY_VISITING + \"DAY VISITING \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + PREFIX_DAY_VISITING + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisiting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param index       of the attraction in the selected itinerary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param dayVisiting the attraction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public DeleteItineraryAttractionCommand(Index index, Index dayVisiting) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisiting \u003d dayVisiting;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Day day \u003d model.getCurrentItinerary().getDay(dayVisiting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractions \u003d day.getItineraryAttractions();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d itineraryAttractions.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttractionToDelete \u003d itineraryAttractions.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.getCurrentItinerary().deleteItineraryAttraction(index, dayVisiting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ATTRACTION_SUCCESS, itineraryAttractionToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof DeleteItineraryAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteItineraryAttractionCommand) other).index))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 dayVisiting.equals(((DeleteItineraryAttractionCommand) other).index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 66,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/EditItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Edits the details of an existing attraction in the itinerary."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-itinerary-attraction\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRACTION_SUCCESS \u003d \"Edited Attraction: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in Itinerary.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the itinerary attraction \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"identified by the name of the itinerary attraction displayed in the itinerary\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_DAY_VISITING + \"DAY VISITING \" + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END_TIME] \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DAY_VISITING + \"2 \" + PREFIX_START_TIME + \"10000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_DAY_VISITING + \"4\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisiting;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final EditItineraryAttractionDescriptor editIaDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param index            of the itinerary attraction to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param editIaDescriptor details to edit the itinerary attraction with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionCommand(Index index, Index dayVisiting,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                          EditItineraryAttractionDescriptor editIaDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(editIaDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisiting \u003d dayVisiting;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.editIaDescriptor \u003d new EditItineraryAttractionDescriptor(editIaDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d model.getCurrentItinerary();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Day day \u003d itinerary.getDay(dayVisiting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractionsThatDay \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                model.getCurrentItinerary().getDay(dayVisiting).getItineraryAttractions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d itineraryAttractionsThatDay.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttractionToEdit \u003d itineraryAttractionsThatDay.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction editedItineraryAttraction \u003d createEditedItineraryAttraction(itineraryAttractionToEdit,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                editIaDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!itineraryAttractionToEdit.isSameItineraryAttraction(editedItineraryAttraction)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 day.contains(editedItineraryAttraction)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itinerary.editItineraryAttraction(itineraryAttractionToEdit, editedItineraryAttraction, dayVisiting);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ATTRACTION_SUCCESS, editedItineraryAttraction));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * edited with {@code editItineraryAttractionDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static ItineraryAttraction createEditedItineraryAttraction(ItineraryAttraction itineraryAttractionToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                                                       EditItineraryAttractionDescriptor"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                                                               editItiAttrDesc) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assert itineraryAttractionToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d editItiAttrDesc.getStartTime().orElse(itineraryAttractionToEdit.getStartTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d editItiAttrDesc.getEndTime().orElse(itineraryAttractionToEdit.getEndTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryAttraction(itineraryAttractionToEdit.getAttraction(), startTime, endTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!(other instanceof EditItineraryAttractionCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand e \u003d (EditItineraryAttractionCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 editIaDescriptor.equals(e.editIaDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Stores the details to edit the attraction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * corresponding field value of the attraction."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static class EditItineraryAttractionDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private ItineraryTime startTime;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private ItineraryTime endTime;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public EditItineraryAttractionDescriptor() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public EditItineraryAttractionDescriptor(EditItineraryAttractionDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setStartTime(ItineraryTime startTime) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Optional\u003cItineraryTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setEndTime(ItineraryTime endTime) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Optional\u003cItineraryTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (!(other instanceof EditItineraryAttractionDescriptor)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            EditItineraryAttractionDescriptor e \u003d (EditItineraryAttractionDescriptor) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 179,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //Prefixes for shared fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for Attraction fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_OPENING_HOURS \u003d new Prefix(\"op/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_PRICE_RANGE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Prefix PREFIX_VISITED \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for Itinerary fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"/b\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for ItineraryAttraction fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_DAY_VISITING \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "Robinho98": 1,
      "peter-yeh": 5,
      "-": 15,
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for Attraction-----------------------------------------------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String openingHours} into an {@code OpeningHours}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code openingHours} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static OpeningHours parseOpeningHours(String openingHours) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(openingHours);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedOpeningHours \u003d openingHours.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!OpeningHours.isValidOpeningHours(trimmedOpeningHours)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new OpeningHours(trimmedOpeningHours);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String priceRange} into an {@code PriceRange}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code priceRange} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static PriceRange parsePriceRange(String priceRange) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(priceRange);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedPriceRange \u003d priceRange.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!PriceRange.isValidPriceRange(trimmedPriceRange)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new PriceRange(trimmedPriceRange);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String rating} into an {@code Rating}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Parses a {@code String visited} into an {@code Visited}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @throws ParseException if the given {@code visited} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static Visited parseVisited(String visited) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(visited);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String trimmedVisited \u003d visited.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Visited.isValidVisited(trimmedVisited)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new Visited(trimmedVisited);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for Itinerary------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code String date} into a {@code ItineraryDate}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ItineraryDate parseItineraryDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!ItineraryDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryDate(trimmedDate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code String budget} into a {@code Budget}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Budget parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedBudget \u003d budget.trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Budget.isValidBudget(trimmedBudget)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Budget(trimmedBudget);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for ItineraryAttraction--------------------------------------------------------------------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static ItineraryTime parseItineraryTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!ItineraryTime.isValidItineraryTime(trimmedTime)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryTime(trimmedTime);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 15,
      "yuxuanxc": 60,
      "peter-yeh": 26,
      "-": 112,
      "limkoonkiat": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add Singapore Zoo t/ animal\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrackPadParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ClearAttractionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ClearItineraryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ListItineraryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.AddAttractionCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.DeleteAttractionCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.EditAttractionCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.FindAttractionCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.attraction.MarkVisitedAttractionCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.itinerary.AddItineraryCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.itinerary.DeleteItineraryCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.itinerary.EditItineraryCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.itinerary.FindItineraryCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.AddItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.DeleteItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.EditItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class TrackPadParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // The first group, commandWord is words without / and numbers, but not working"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //     Pattern.compile(\"(?\u003ccommandWord\u003e^[^/||[^\\\\D]]*)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case AddAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new AddAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case EditAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new EditAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case DeleteAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new DeleteAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        case MarkVisitedAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return new MarkVisitedAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case ClearAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new ClearAttractionCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case FindAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new FindAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case ListAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new ListAttractionCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case AddItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new AddItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case EditItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new EditItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case DeleteItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new DeleteItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case ClearItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new ClearItineraryCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case FindItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new FindItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case ListItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new ListItineraryCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case AddItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new AddItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case EditItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new EditItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case DeleteItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new DeleteItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 22,
      "Robinho98": 6,
      "leeyorktat": 14,
      "peter-yeh": 17,
      "-": 53,
      "limkoonkiat": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/AddAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new AddAttractionCommand object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandParser implements Parser\u003cAddAttractionCommand\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAttractionCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns an AddAttractionCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AddAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_OPENING_HOURS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        PREFIX_PRICE_RANGE, PREFIX_RATING, PREFIX_VISITED, PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only check for name and location of the attraction, the rest are optional."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Phone is optional"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            phone \u003d new Phone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Email is optional"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Email email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            email \u003d new Email();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Address is optional"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            address \u003d new Address();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            description \u003d new Description();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Location is not optional"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Opening Hours is optional"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours openingHours;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            openingHours \u003d ParserUtil.parseOpeningHours(argMultimap.getValue(PREFIX_OPENING_HOURS).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            openingHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Price Range is optional"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange priceRange;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            priceRange \u003d ParserUtil.parsePriceRange(argMultimap.getValue(PREFIX_PRICE_RANGE).get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            priceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Rating is optional"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating rating;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            rating \u003d new Rating();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // Visited is optional"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited visited;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited \u003d ParserUtil.parseVisited(argMultimap.getValue(PREFIX_VISITED).get());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited \u003d new Visited();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction attraction \u003d new Attraction(name, phone, email, address, description,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                location, openingHours, priceRange, rating, visited, tagList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new AddAttractionCommand(attraction);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 55,
      "Robinho98": 15,
      "leeyorktat": 1,
      "peter-yeh": 26,
      "-": 40,
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/DeleteAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new DeleteAttractionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandParser implements Parser\u003cDeleteAttractionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAttractionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns a DeleteAttractionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public DeleteAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new DeleteAttractionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/EditAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new EditAttractionCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandParser implements Parser\u003cEditAttractionCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAttractionCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns an EditAttractionCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_OPENING_HOURS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        PREFIX_PRICE_RANGE, PREFIX_RATING, PREFIX_VISITED, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    EditAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor editAttractionDescriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            editAttractionDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setOpeningHours(ParserUtil.parseOpeningHours("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_OPENING_HOURS).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setPriceRange(ParserUtil.parsePriceRange("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_PRICE_RANGE).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setRating(ParserUtil.parseRating("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setVisited(ParserUtil.parseVisited("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    argMultimap.getValue(PREFIX_VISITED).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAttractionDescriptor::setTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!editAttractionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(EditAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new EditAttractionCommand(index, editAttractionDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 37,
      "Robinho98": 13,
      "-": 63,
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/FindAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new FindAttractionCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandParser implements Parser\u003cFindAttractionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAttractionCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns a FindAttractionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public FindAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new FindAttractionCommand(new AttractionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 10,
      "-": 23,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/MarkVisitedAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Parses input arguments and creates a new MarkVisitedAttractionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandParser implements Parser\u003cMarkVisitedAttractionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkVisitedAttractionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * and returns a MarkVisitedAttractionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public MarkVisitedAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return new MarkVisitedAttractionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkVisitedAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/AddItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Parses input arguments and creates a new AddItineraryCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommandParser implements Parser\u003cAddItineraryCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItineraryCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * and returns an AddItineraryCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AddItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            description \u003d new Description();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Start date is not optional"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate startDate \u003d ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // End date is not optional"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate endDate \u003d ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Budget is optional"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget budget;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            budget \u003d ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            budget \u003d new Budget();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(name, description, startDate, endDate, budget, new ArrayList\u003cDay\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new AddItineraryCommand(itinerary);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/DeleteItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Parses input arguments and creates a new DeleteItineraryCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandParser implements Parser\u003cDeleteItineraryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteItineraryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * and returns a DeleteItineraryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DeleteItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new DeleteItineraryCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/EditItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Parses input arguments and creates a new EditItineraryCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class EditItineraryCommandParser implements Parser\u003cEditItineraryCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditItineraryCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * and returns an EditItineraryCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public EditItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                PREFIX_END_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                EditItineraryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        EditItineraryDescriptor editItineraryDescriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setStartDate(ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setEndDate(ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setBudget(ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!editItineraryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException(EditItineraryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new EditItineraryCommand(index, editItineraryDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/FindItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Parses input arguments and creates a new FindItineraryCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class FindItineraryCommandParser implements Parser\u003cFindItineraryCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindItineraryCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * and returns a FindItineraryCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public FindItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new FindItineraryCommand(new ItineraryContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/AddItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommandParser implements Parser\u003cAddItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddiCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns an AddiCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * The command is: add itinerary attraction att/2 st/1300 et/2100 day/2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public AddItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    PREFIX_DAY_VISITING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DAY_VISITING)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        AddItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        AddItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            ItineraryTime startTime \u003d ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            ItineraryTime endTime \u003d ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (!startTime.isValidStartTime(endTime)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        AddItineraryAttractionCommand.MESSAGE_INVALID_START_TIME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            Index dayVisiting \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new AddItineraryAttractionCommand(index, startTime, endTime, dayVisiting);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/DeleteItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Parses input arguments and creates a new DeleteItineraryAttractionCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommandParser implements Parser\u003cDeleteItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteItineraryAttractionCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns a DeleteItineraryAttractionCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public DeleteItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAY_VISITING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY_VISITING) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new DeleteItineraryAttractionCommand(index, dayVisiting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/EditItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Parses input arguments and creates a new EditItineraryAttractionCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommandParser implements Parser\u003cEditItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditItineraryAttractionCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns an EditItineraryAttractionCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_DAY_VISITING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    EditItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY_VISITING)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    EditItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor editItiAttrDesc \u003d new EditItineraryAttractionDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setStartTime(ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setEndTime(ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!editItiAttrDesc.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(EditItineraryAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new EditItineraryAttractionCommand(index, dayVisiting, editItiAttrDesc);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.UniqueAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Wraps all data at trackPad\u0027s attraction list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Duplicates are not allowed (by .isSameAttraction comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionList implements ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final UniqueAttractionList attractions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an AttractionList using the Attractions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList(ReadOnlyAttractionList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the contents of the attraction list with {@code attractions}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code attractions} must not contain duplicate attractions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.attractions.setAttractions(attractions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Resets the existing data of this {@code AttractionList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void resetData(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        setAttractions(newData.getAttractionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// attraction-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a attraction with the same identity as {@code attraction} exists in the attraction list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.contains(attraction);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a attraction to the attraction list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The attraction must not already exist in the attraction list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void addAttraction(Attraction a) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.add(a);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the given attraction {@code target} in the list with {@code editedAttraction}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * attraction in the attraction list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(editedAttraction);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.setAttraction(target, editedAttraction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes {@code key} from this {@code AttractionList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code key} must exist in the attraction list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void removeAttraction(Attraction key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.asUnmodifiableObservableList().size() + \" attractions\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getAttractionList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AttractionList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 attractions.equals(((AttractionList) other).attractions));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 104,
      "limkoonkiat": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.UniqueItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Wraps all data at trackPad\u0027s itinerary list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Duplicates are not allowed (by .isSameItinerary comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryList implements ReadOnlyItineraryList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final UniqueItineraryList itineraries;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Itinerary currentItinerary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an ItineraryList using the Itineraries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList(ReadOnlyItineraryList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the contents of the itinerary list with {@code itineraries}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itineraries} must not contain duplicate itineraries."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraries.setItineraries(itineraries);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Resets the existing data of this {@code ItineraryList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void resetData(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setItineraries(newData.getItineraryList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// itinerary-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if an itinerary with the same identity as {@code itinerary} exists in the itinerary list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.contains(itinerary);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary to the itinerary list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must not already exist in the itinerary list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItinerary(Itinerary a) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.add(a);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the given itinerary {@code target} in the list with {@code editedItinerary}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the itinerary list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * itinerary in the itinerary list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(editedItinerary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.setItinerary(target, editedItinerary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes {@code key} from this {@code ItineraryList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code key} must exist in the itinerary list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void removeItinerary(Itinerary key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //// current Itinerary methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void setCurrentItinerary(Itinerary currentItinerary) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.currentItinerary \u003d currentItinerary;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // todo throw error if current itinerary is not set"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.currentItinerary;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.asUnmodifiableObservableList().size() + \" itineraries\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getItineraryList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraries.equals(((ItineraryList) other).itineraries));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 12,
      "limkoonkiat": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    Predicate\u003cAttraction\u003e PREDICATE_SHOW_ALL_ATTRACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Predicate\u003cItinerary\u003e PREDICATE_SHOW_ALL_ITINERARIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 attraction list file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the user prefs\u0027 attraction list file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setAttractionListFilePath(Path attractionListFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 itinerary list file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the user prefs\u0027 itinerary list file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItineraryListFilePath(Path itineraryListFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces attraction list data with the data in {@code attractionList}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setAttractionList(ReadOnlyAttractionList attractionList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the attraction list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyAttractionList getAttractionList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a attraction with the same identity as {@code attraction} exists in the attraction list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    boolean hasAttraction(Attraction attraction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Deletes the given attraction."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The attraction must exist in the attraction list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void deleteAttraction(Attraction target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Adds the given attraction."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code attraction} must not already exist in the attraction list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void addAttraction(Attraction attraction);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the given attraction {@code target} with {@code editedAttraction}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing attraction in"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the attraction list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void setAttraction(Attraction target, Attraction editedAttraction);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Marks the given attraction {@code target} as visited."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    void markVisitedAttraction(Attraction target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an unmodifiable view of the filtered attraction list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ObservableList\u003cAttraction\u003e getFilteredAttractionList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Updates the filter of the filtered attraction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces itinerary list data with the data in {@code itineraryList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItineraryList(ReadOnlyItineraryList itineraryList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the itinerary list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyItineraryList getItineraryList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a itinerary with the same identity as {@code itinerary} exists in the itinerary list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    boolean hasItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Deletes the given itinerary."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must exist in the itinerary list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void deleteItinerary(Itinerary target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds the given itinerary."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itinerary} must not already exist in the itinerary list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void addItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the given itinerary {@code target} with {@code editedItinerary}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the itinerary list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing itinerary in"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the itinerary list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItinerary(Itinerary target, Itinerary editedItinerary);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an unmodifiable view of the filtered itinerary list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getFilteredItineraryList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates the filter of the filtered itinerary list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets selected itinerary in ItineraryList."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param itinerary selected itinerary."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    void setCurrentItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the current itinerary."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    Itinerary getCurrentItinerary();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 5,
      "leeyorktat": 13,
      "peter-yeh": 28,
      "-": 74,
      "limkoonkiat": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents the in-memory model of the TrackPad data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionList attractionList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryList itineraryList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final FilteredList\u003cAttraction\u003e filteredAttractions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final FilteredList\u003cItinerary\u003e filteredItineraries;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes a ModelManager with the given attractionList, itineraryList and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ModelManager(ReadOnlyAttractionList attractionList, ReadOnlyItineraryList itineraryList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Initializing with attractionList: \" + attractionList + \" itineraryList: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + itineraryList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList \u003d new AttractionList(attractionList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList \u003d new ItineraryList(itineraryList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredAttractions \u003d new FilteredList\u003c\u003e(this.attractionList.getAttractionList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredItineraries \u003d new FilteredList\u003c\u003e(this.itineraryList.getItineraryList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this(new AttractionList(), new ItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return userPrefs.getAttractionListFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(attractionListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return userPrefs.getItineraryListFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryListFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(itineraryListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionList(ReadOnlyAttractionList attractionList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList.resetData(attractionList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList.hasAttraction(attraction);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.removeAttraction(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(target, editedAttraction);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.setAttraction(target, editedAttraction);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name unchangedName \u003d target.getName();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone unchangedPhone \u003d target.getPhone();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email unchangedEmail \u003d target.getEmail();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address unchangedAddress \u003d target.getAddress();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Description unchangedDescription \u003d target.getDescription();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Location unchangedLocation \u003d target.getLocation();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        OpeningHours unchangedOpeningHours \u003d target.getOpeningHours();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        PriceRange unchangedPriceRange \u003d target.getPriceRange();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Rating unchangedRating \u003d target.getRating();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d new Visited(\"TRUE\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e unchangedTags \u003d target.getTags();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markVisitedAttraction \u003d new Attraction(unchangedName, unchangedPhone, unchangedEmail,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedAddress, unchangedDescription, unchangedLocation, unchangedOpeningHours, unchangedPriceRange,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedRating, updatedVisited, unchangedTags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        attractionList.setAttraction(target, markVisitedAttraction);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Attraction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Attraction} backed by the internal list of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code versionedTrackPad}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return filteredAttractions;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        filteredAttractions.setPredicate(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryList(ReadOnlyItineraryList itineraryList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList.resetData(itineraryList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList.hasItinerary(itinerary);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.removeItinerary(target);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(target, editedItinerary);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.setItinerary(target, editedItinerary);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itineraryList.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return itineraryList.getCurrentItinerary();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Itinerary List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Itinerary} backed by the internal list of"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code versionedTrackPad}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filteredItineraries;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredItineraries.setPredicate(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList.equals(other.attractionList)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 filteredAttractions.equals(other.filteredAttractions)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 filteredItineraries.equals(other.filteredItineraries);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 36,
      "leeyorktat": 16,
      "peter-yeh": 8,
      "-": 140,
      "limkoonkiat": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Unmodifiable view of an attraction list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the attraction list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * This list will not contain any duplicate attractions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ObservableList\u003cAttraction\u003e getAttractionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 14,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Unmodifiable view of a itinerary list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ReadOnlyItineraryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the itinerary list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This list will not contain any duplicate itineraries."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getItineraryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    Itinerary getCurrentItinerary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "limkoonkiat": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path attractionListFilePath \u003d Paths.get(\"data\" , \"attractionlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path itineraryListFilePath \u003d Paths.get(\"data\" , \"itinerarylist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setAttractionListFilePath(newUserPrefs.getAttractionListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setItineraryListFilePath(newUserPrefs.getItineraryListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionListFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionListFilePath \u003d attractionListFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryListFilePath \u003d itineraryListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 attractionListFilePath.equals(o.attractionListFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraryListFilePath.equals(o.itineraryListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(guiSettings, attractionListFilePath, itineraryListFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(\"\\nLocal attraction data file location : \" + attractionListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(\"\\nLocal itinerary data file location : \" + itineraryListFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "limkoonkiat": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Attraction\u0027s address in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs an {@code Address} with an empty address value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Address() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "leeyorktat": 1,
      "peter-yeh": 8,
      "-": 53,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Attraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction in TrackPad."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class Attraction {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final OpeningHours openingHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final PriceRange priceRange;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Visited visited;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction(Name name, Phone phone, Email email, Address address, Description description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                      Location location, OpeningHours openingHours, PriceRange priceRange,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                      Rating rating, Visited visited, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireAllNonNull(name, phone, email, address, description, location, openingHours,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d visited;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours getOpeningHours() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return openingHours;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange getPriceRange() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return priceRange;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited getVisited() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return visited;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if both attractions of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two attractions."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean isSameAttraction(Attraction otherAttraction) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (otherAttraction \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return otherAttraction !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 (otherAttraction.getPhone().equals(getPhone()) || otherAttraction.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if both attractions have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * This defines a stronger notion of equality between two attractions."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!(other instanceof Attraction)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction otherAttraction \u003d (Attraction) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return otherAttraction.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherAttraction.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getOpeningHours().equals(getOpeningHours())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getPriceRange().equals(getPriceRange())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getRating().equals(getRating())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 otherAttraction.getVisited().equals(getVisited())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getTags().equals(getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Objects.hash(name, phone, email, address, description, location,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(\" OpeningHours: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(getOpeningHours())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(\" PriceRange: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(getPriceRange())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .append(\" Visited: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .append(getVisited())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 40,
      "Robinho98": 12,
      "leeyorktat": 17,
      "-": 97,
      "limkoonkiat": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/AttractionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that a {@code Attraction}\u0027s {@code Name}, {@code Address}, ***@code Description*** (not working yet),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code Email}, {@code Location}, {@code OpeningHours}, {@code Phone}, {@code PriceRange}, {@code Rating}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionContainsKeywordsPredicate implements Predicate\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean test(Attraction attraction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(attraction.getName().fullName, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getAddress().value, keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getDescription().value, keyword)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getEmail().value, keyword)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getLocation().value, keyword)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getOpeningHours().value, keyword)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getPhone().value, keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getPriceRange().value, keyword)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getRating().value, keyword)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || attraction.getTags().stream().anyMatch(tag -\u003e tag.tagName.equals(keyword))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AttractionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((AttractionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 2,
      "peter-yeh": 14,
      "-": 23,
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Attraction\u0027s email in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param email A valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs an {@code Email} without value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 1,
      "peter-yeh": 7,
      "-": 64,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Attraction\u0027s location in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "limkoonkiat": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/OpeningHours.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Represents a Attraction\u0027s Opening hours in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOpeningHours(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class OpeningHours {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Opening Hours should be of the format \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"opening time (in 24 hour format) - closing time (in 24 hour format)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String TIME_REGEX \u003d \"([01][0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d TIME_REGEX + \"-\" + TIME_REGEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code OpeningHours}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param openingHours An valid opening hour."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(openingHours);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidOpeningHours(openingHours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d openingHours;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code OpeningHours} without value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns if a given string is an valid opening hour."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidOpeningHours(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof OpeningHours // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((OpeningHours) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Attraction\u0027s phone number in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs a {@code Phone} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Phone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 1,
      "peter-yeh": 7,
      "-": 51,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/PriceRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Represents a Attraction\u0027s price range in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriceRange(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class PriceRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price Range should be of the format \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"LOW, MEDIUM, or HIGH\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\bLOW\\\\b|\\\\bMEDIUM\\\\b|\\\\bHIGH\\\\b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code PriceRange}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param priceRange A valid price range."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange(String priceRange) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(priceRange);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidPriceRange(priceRange), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d priceRange;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code PriceRange} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns if a given string is a valid price range."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidPriceRange(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (value.equals(\"LOW\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (value.equals(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$$\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (value.equals(\"HIGH\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$$$\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof PriceRange // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 value.equals(((PriceRange) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 66,
      "peter-yeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Rating.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Represents a Attraction\u0027s rating in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Rating should only contain a number \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"between 0.0 to 5.0(inclusive), to 1 decimal place\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([0-4]\\\\.[0-9]|5\\\\.0)$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code Rating}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code Rating} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns if a given string is a valid rating."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (value.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return value + \"/5.0\\u2605\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/UniqueAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.AttractionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * A list of attractions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An attraction is considered unique by comparing using {@code Attraction#isSameAttraction(Attraction)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * adding and updating of attractions uses Attraction#isSameAttraction(Attraction) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * the attraction being added or updated is unique in terms of identity in the UniqueAttractionList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * removal of an attraction uses Attraction#equals(Object) so as to ensure that the attraction with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * @see Attraction#isSameAttraction(Attraction)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class UniqueAttractionList implements Iterable\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ObservableList\u003cAttraction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ObservableList\u003cAttraction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the list contains an equivalent attraction as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean contains(Attraction toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAttraction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Adds a attraction to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add(Attraction toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the attraction {@code target} in the list with {@code editedAttraction}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing attraction in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(target, editedAttraction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new AttractionNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!target.isSameAttraction(editedAttraction) \u0026\u0026 contains(editedAttraction)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.set(index, editedAttraction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Removes the equivalent attraction from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove(Attraction toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new AttractionNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(UniqueAttractionList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the contents of this list with {@code attractions}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code attractions} must not contain duplicate attractions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(attractions);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!attractionsAreUnique(attractions)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.setAll(attractions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public Iterator\u003cAttraction\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                || (other instanceof UniqueAttractionList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAttractionList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if {@code attractions} contains only unique attractions."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private boolean attractionsAreUnique(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        for (int i \u003d 0; i \u003c attractions.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c attractions.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                if (attractions.get(i).isSameAttraction(attractions.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 136,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Visited.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Represents a Attraction\u0027s price range in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVisited(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class Visited {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visited should be of the format \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"TRUE or FALSE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\bTRUE\\\\b|\\\\bFALSE\\\\b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Constructs an {@code IsVisited}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param visited A valid price range."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited(String visited) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(visited);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        checkArgument(isValidVisited(visited), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        value \u003d visited;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Constructs an {@code IsVisited} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns if a given string is a valid price range."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static boolean isValidVisited(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (value.equals(\"TRUE\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return \"Visited\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                || (other instanceof Visited // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 value.equals(((Visited) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/exceptions/AttractionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified attraction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class AttractionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 5,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/exceptions/DuplicateAttractionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate Attractions (Attractions are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class DuplicateAttractionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public DuplicateAttractionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(\"Operation would result in duplicate attractions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 3,
      "-": 5,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an item\u0027s description in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code Description} with an empty description value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 64,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an item\u0027s name in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary\u0027s budget in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            \"Budget should only be a non-negative number, and if it contains decimal values it should have\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" two decimal digits\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^?[0-9]+(\\\\.[0-9]{2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Budget}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param budget A valid budget number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget(String budget) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidBudget(budget), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Budget} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid budget."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (value.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return \"$\" + value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Budget// instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Budget) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.DuplicateItineraryAttractionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.ItineraryAttractionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary\u0027s day in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Days should be a positive number, and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cItineraryAttraction\u003e itineraryAttractions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs an empty {@code Day}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day(String day, List\u003cItineraryAttraction\u003e itineraryAttractions) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d day;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryAttractions \u003d itineraryAttractions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cItineraryAttraction\u003e getItineraryAttractions() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary attraction and sorts them based on their start times."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItineraryAttraction(ItineraryAttraction toAdd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.sort(new Comparator\u003cItineraryAttraction\u003e() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            public int compare(ItineraryAttraction first, ItineraryAttraction second) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (first.getStartTime().isEarlierThan(second.getStartTime())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                } else if (first.getStartTime().isLaterThan(second.getStartTime())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    assert false; // There cannot be 2 itinerary attractions with same start time in a day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItineraryAttraction(Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Edits the specified itinerary attraction."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void editItineraryAttraction(ItineraryAttraction target, ItineraryAttraction editedItineraryAttraction) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int index \u003d itineraryAttractions.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryAttractionNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!target.isSameItineraryAttraction(editedItineraryAttraction) \u0026\u0026 contains(editedItineraryAttraction)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryAttractionException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.set(index, editedItineraryAttraction);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions.contains(itineraryAttraction);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given string is a valid day."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return \"Day \" + value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Day) other).value)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraryAttractions.equals(((Day) other).itineraryAttractions)); // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(value, itineraryAttractions);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Itinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary in TrackPad."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Itinerary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Name must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary(Name name, Description description, ItineraryDate startDate, ItineraryDate endDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                     Budget budget, List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(startDate.isBefore(endDate) || startDate.isEqual(endDate),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Start date should come before end date\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfDays(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                this.days.add(days.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                this.days.add(new Day(Integer.toString(i + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Not given number of days"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public Itinerary(Name name, Description description, ItineraryDate startDate, ItineraryDate endDate,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                     Budget budget) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(name, description, startDate, endDate, budget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        checkArgument(startDate.isBefore(endDate), \"Start date should come before end date\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d getNumberOfDays(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.days.add(new Day(Integer.toString(i)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate getStartDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate getEndDate() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cDay\u003e getDays() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Day getDay(Index day) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.days.get(day.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assert startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return ItineraryDate.daysBetween(startDate, endDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string of all the locations of the itinerary attractions ordered by day."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getLocations() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (ItineraryAttraction itineraryAttraction : day.getItineraryAttractions()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Location location \u003d itineraryAttraction.getAttraction().getLocation();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (!locations.contains(location)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    locations.add(location);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return locations.stream().map(Object::toString).collect(Collectors.joining(\"-\u003e \"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cItineraryAttraction\u003e getItineraryAttractions() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryAttractions.addAll(day.getItineraryAttractions());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary attraction to the itinerary."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItineraryAttraction(ItineraryAttraction toAdd, Index day) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(day.getOneBased() \u003e 0 \u0026\u0026 day.getOneBased() \u003c\u003d getNumberOfDays(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Day is not valid\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).addItineraryAttraction(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes the equivalent itinerary attraction from the itinerary."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary attraction must exist in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItineraryAttraction(Index index, Index day) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(day.getOneBased() \u003e 0 \u0026\u0026 (day.getOneBased() \u003c\u003d getNumberOfDays()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Day is not valid\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).deleteItineraryAttraction(index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Edits the corresponding itinerary attraction in the itinerary."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // todo refine depending on usage"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void editItineraryAttraction(ItineraryAttraction target, ItineraryAttraction editedItineraryAttraction,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                        Index day) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(editedItineraryAttraction);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).editItineraryAttraction(target, editedItineraryAttraction);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if an itinerary attraction in the itinerary list with the same identity as"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itineraryAttraction} exists."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryAttraction);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (day.contains(itineraryAttraction)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itineraries of the same name have the same start and end dates."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two itineraries."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isSameItinerary(Itinerary otherItinerary) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (otherItinerary \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return otherItinerary !\u003d null"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getName().equals(getName())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itineraries have the same identity and data fields."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a stronger notion of equality between two itineraries."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!(other instanceof Itinerary)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary otherItinerary \u003d (Itinerary) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return otherItinerary.getName().equals(getName())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getBudget().equals(getBudget())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getDays().equals(getDays());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Start date: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" End date: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Budget: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getBudget());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d getNumberOfDays(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Index day \u003d Index.fromOneBased(i);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            builder.append(\" Day \").append(i).append(\": \");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            getDay(day).getItineraryAttractions().forEach(builder::append);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 5,
      "leeyorktat": 19,
      "limkoonkiat": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Wrapper class to contain attributes of an attraction specific to a particular Itinerary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryAttraction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // todo decide if inheritance or dependency for this attraction, maybe extend from Attraction directly."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Attraction attraction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs a Itinerary attraction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param attraction attraction to visit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param startTime  time to visit the attraction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param endTime    time to leave the attraction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttraction(Attraction attraction, ItineraryTime startTime, ItineraryTime endTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns name of the attraction in this itinerary attraction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attraction.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the attraction in this itinerary attraction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Attraction getAttraction() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attraction;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the start time of this itinerary attraction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime getStartTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the end time of this itinerary attraction."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime getEndTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if both ItineraryAttraction has the same start and end time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param otherItineraryAttraction the ItineraryAttraction to compare with."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isSameTiming(ItineraryAttraction otherItineraryAttraction) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.startTime.equals(otherItineraryAttraction.startTime)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 this.endTime.equals(otherItineraryAttraction.endTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if both itinerary attractions are of the same name, have the same visiting timing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @return otherItineraryAttraction the itineraryAttraction to compare with."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isSameItineraryAttraction(ItineraryAttraction otherItineraryAttraction) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (otherItineraryAttraction \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return attraction.isSameAttraction(otherItineraryAttraction.getAttraction())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns false if timing does not clash with this itinerary attraction."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isTimingClash(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Might make a mistake here with the ! due to De Morgan\u0027s law"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return !this.getStartTime().isEarlierThan(itineraryAttraction.getStartTime())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 !this.getEndTime().isLaterThan(itineraryAttraction.getEndTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itinerary attractions have the same identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a stronger notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Attraction, startTime, endTime, dayVisiting must be the same to return true."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!(other instanceof ItineraryAttraction)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction otherItineraryAttraction \u003d (ItineraryAttraction) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return otherItineraryAttraction.getAttraction().equals(getAttraction())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(attraction);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attraction.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // todo add more fields"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 64,
      "limkoonkiat": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttractionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that a {@code ItineraryAttraction}\u0027s {@code Name}, {@code Address}, ***@code Description*** (not working yet),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code Email}, {@code Location}, {@code OpeningHours}, {@code Phone}, {@code PriceRange}, {@code Rating},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code StartTIme}, {@code EndTime}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryAttractionContainsKeywordsPredicate implements Predicate\u003cItineraryAttraction\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean test(ItineraryAttraction itiAttraction) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(itiAttraction.getStartTime().toString(), keyword)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itiAttraction.getEndTime().toString(), keyword)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || new AttractionContainsKeywordsPredicate(keywords).test(itiAttraction.getAttraction())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryAttractionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((ItineraryAttractionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that a {@code Itinerary}\u0027s {@code Name}, ***@code Description*** (not working yet),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code StartTime}, {@code EndTime}, {@code itineraryAttractions}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryContainsKeywordsPredicate implements Predicate\u003cItinerary\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean test(Itinerary itinerary) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(itinerary.getName().fullName, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getDescription().value, keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        // todo change if itinerary date becomes a wrapper class instead of just Localdate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getStartDate().toString(), keyword)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getEndDate().toString(), keyword)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                )"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            // todo Also checks through itinerary attractions, remove if not needed (not tested yet)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (ItineraryAttraction ia : itinerary.getItineraryAttractions()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (new ItineraryAttractionContainsKeywordsPredicate(keywords).test(ia)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((ItineraryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be of the format dd-mm-yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final DateTimeFormatter DTF \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .appendPattern(\"dd-MM-uuuu\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .toFormatter()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code ItineraryDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param date A valid ItineraryDate number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the itinerary date in LocalDate format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return LocalDate.parse(value, DTF);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid itinerary date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            LocalDate.parse(test, DTF);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if this itinerary date is before the given itinerary date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isBefore(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isBefore(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isEqual(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isEqual(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if this itinerary date is after the given itinerary date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isAfter(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isAfter(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the number of days between two itinerary dates."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static int daysBetween(ItineraryDate startDate, ItineraryDate endDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return (int) ChronoUnit.DAYS.between(startDate.getLocalDate(), endDate.getLocalDate()) + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryDate// instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((ItineraryDate) other).value)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Wrapper to hold the time and perform time related functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static final String TIME_REGEX \u003d \"([01][0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d TIME_REGEX + \"-\" + TIME_REGEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final int time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime(String time) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.time \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns if a given string is an valid time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static boolean isValidItineraryTime(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns if a given start time is earlier than end time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isValidStartTime(ItineraryTime endTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.time \u003c endTime.time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if the time is earlier than time given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isEarlierThan(ItineraryTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.time \u003c time.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns ture if the time is later than the time given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isLaterThan(ItineraryTime time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.time \u003e time.time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof ItineraryTime // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 time \u003d\u003d (((ItineraryTime) other).time)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return String.valueOf(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return time * 103;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/UniqueItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.DuplicateItineraryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.ItineraryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A list of itineraries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An itinerary is considered unique by comparing using {@code Itinerary#isSameItinerary(Itinerary)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * adding and updating of itineraries uses Itinerary#isSameItinerary(Itinerary) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * the itinerary being added or updated is unique in terms of identity in the UniqueItineraryList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * removal of an itinerary uses Itinerary#equals(Object) so as to ensure that the itinerary with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * @see Itinerary#isSameItinerary (Itinerary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class UniqueItineraryList implements Iterable\u003cItinerary\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ObservableList\u003cItinerary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ObservableList\u003cItinerary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the list contains an equivalent itinerary as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(Itinerary toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItinerary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void add(Itinerary toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the itinerary {@code target} in the list with {@code editedItinerary}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing itinerary in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(target, editedItinerary);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!target.isSameItinerary(editedItinerary) \u0026\u0026 contains(editedItinerary)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.set(index, editedItinerary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes the equivalent itinerary from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void remove(Itinerary toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(UniqueItineraryList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the contents of this list with {@code itineraries}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code items} must not contain duplicate itineraries."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(itineraries);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!itinerariesAreUnique(itineraries)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.setAll(itineraries);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Iterator\u003cItinerary\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof UniqueItineraryList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItineraryList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if {@code itineraries} contains only unique itineraries."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private boolean itinerariesAreUnique(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c itineraries.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c itineraries.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (itineraries.get(i).isSameItinerary(itineraries.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/DuplicateItineraryAttractionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate itinerary attractions in an itinerary (Itinerary"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * attractions are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DuplicateItineraryAttractionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DuplicateItineraryAttractionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(\"Operation would result in duplicate attractions in the itinerary\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/DuplicateItineraryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate Itineraries (Itineraries are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DuplicateItineraryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DuplicateItineraryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(\"Operation would result in duplicate itineraries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/ItineraryAttractionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified itinerary attraction in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryAttractionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/ItineraryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Tag in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains utility methods for populating {@code AttractionList} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static Attraction[] getSampleAttractions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new Attraction[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"Jurong Bird Park\"), new Phone(\"94351253\"), new Email(\"birdpark@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"2 Jurong Hill\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"The park offers a haven for close to 3500 birds across 400 species.\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.5\"), new Visited(\"FALSE\"), getTagSet(\"animals\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"Night Safari\"), new Phone(\"98765432\"), new Email(\"nightsafari@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"The world\u0027s first nocturnal zoo.\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.2\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"night\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"River Safari\"), new Phone(\"93210283\"), new Email(\"riversafari@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"A river-themed zoo and aquarium in Singapore.\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.4\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"panda\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Universal Studios Singapore\"), new Phone(\"65482651\"), new Email(\"uss@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"8 Sentosa Gateway, 098269\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"A world-renowned theme park with thrilling rides.\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1400-2100\"), new PriceRange(\"HIGH\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.6\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Snow City\"), new Phone(\"65602306\"), new Email(\"snowcity@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"21 Jurong Town Hall Rd, 609433\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"A winter wonderland amidst the tropical Singapore climate.\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1000-1700\"), new PriceRange(\"LOW\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"3.6\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Trick Eye Museum\"), new Phone(\"67952371\"), new Email(\"trickeye@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"26 Sentosa Gateway, 098138\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"Unique museum with a large array of 3-dimensional \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                            + \"artwork for interactive optical illusions.\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"LOW\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.2\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Singapore Zoo\"), new Phone(\"62693411\"), new Email(\"riversafari@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"Singapore Zoo\u0027s world-famous \\\"Open Concept” offers the opportunity to \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                            + \"experience and be inspired by the wonders of nature.\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"0830-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.6\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"tiger\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ReadOnlyAttractionList getSampleAttractionsList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList sampleAl \u003d new AttractionList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        for (Attraction sampleAttraction : getSampleAttractions()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            sampleAl.addAttraction(sampleAttraction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return sampleAl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // todo Make non empty sample itinerary list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ReadOnlyItineraryList getSampleItineraryList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 18,
      "Robinho98": 27,
      "leeyorktat": 7,
      "-": 27,
      "limkoonkiat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AttractionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a storage for {@link AttractionList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface AttractionListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the file path of the attraction list data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns AttractionList data as a {@link ReadOnlyAttractionList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #getAttractionListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves the given {@link ReadOnlyAttractionList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param attractionList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #saveAttractionList(ReadOnlyAttractionList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItineraryListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a storage for {@link ItineraryList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ItineraryListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the file path of the itinerary list data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns ItineraryList data as a {@link ReadOnlyItineraryList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #getItineraryListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves the given {@link ReadOnlyItineraryList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param itineraryList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #saveItineraryList(ReadOnlyItineraryList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Jackson-friendly version of {@link Attraction}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "class JsonAdaptedAttraction {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Attraction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String openingHours;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String priceRange;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final String visited;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttraction} with the given attraction details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public JsonAdaptedAttraction(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"openingHours\") String openingHours,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"priceRange\") String priceRange,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                                 @JsonProperty(\"visited\") String visited,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d visited;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Converts a given {@code Attraction} into this class for Jackson use."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public JsonAdaptedAttraction(Attraction source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d source.getOpeningHours().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d source.getPriceRange().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d source.getVisited().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted attraction object into the model\u0027s {@code Attraction} object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attraction."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Name modelName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Phone modelPhone;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Email modelEmail;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Address modelAddress;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Location modelLocation;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final OpeningHours modelOpeningHours;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final PriceRange modelPriceRange;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Rating modelRating;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final Visited modelVisited;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final List\u003cTag\u003e attractionTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            attractionTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Phone is optional"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (phone.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelPhone \u003d new Phone();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Email is optional"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (email.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEmail \u003d new Email();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Address is optional"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (address.equals(\"\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelAddress \u003d new Address();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelDescription \u003d new Description();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Location is not optional"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // OpeningHours is optional"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (openingHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    OpeningHours.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (openingHours.equals(\"\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelOpeningHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!OpeningHours.isValidOpeningHours(openingHours)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelOpeningHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // PriceRange is optional"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (priceRange \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    PriceRange.class.getSimpleName()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (priceRange.equals(\"\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelPriceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!PriceRange.isValidPriceRange(priceRange)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelPriceRange \u003d new PriceRange(priceRange);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Rating is optional"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (rating.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelRating \u003d new Rating();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // Visited is optional"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (visited \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Visited.class.getSimpleName()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (visited.equals(\"\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            modelVisited \u003d new Visited();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (!Visited.isValidVisited(visited)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new IllegalValueException(Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            modelVisited \u003d new Visited(visited);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(attractionTags);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(modelName, modelPhone, modelEmail, modelAddress, modelDescription,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                modelLocation, modelOpeningHours, modelPriceRange, modelRating, modelVisited, modelTags);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 90,
      "Robinho98": 18,
      "leeyorktat": 1,
      "-": 75,
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAdaptedDay {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedItineraryAttraction\u003e itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedDay} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                          @JsonProperty(\"itineraryAttractions\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                  List\u003cJsonAdaptedItineraryAttraction\u003e itineraryAttractions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (itineraryAttractions !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.itineraryAttractions.addAll(itineraryAttractions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        day \u003d source.value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.addAll(source.getItineraryAttractions().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .map(JsonAdaptedItineraryAttraction::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final List\u003cItineraryAttraction\u003e modelItineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Day.isValidDay(day)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedItineraryAttraction itineraryAttraction : itineraryAttractions) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelItineraryAttractions.add(itineraryAttraction.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Day(day, modelItineraryAttractions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link Itinerary}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonAdaptedItinerary {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Itinerary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedItinerary} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItinerary(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"budget\") String budget,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"days\") List\u003cJsonAdaptedDay\u003e days) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (days !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.days.addAll(days);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code Itinerary} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItinerary(Itinerary source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d source.getBudget().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days.addAll(source.getDays().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .map(JsonAdaptedDay::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted itinerary object into the model\u0027s {@code Itinerary} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted itinerary."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Name modelName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryDate modelStartDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryDate modelEndDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Budget modelBudget;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final List\u003cDay\u003e modelDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedDay day : days) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDays.add(day.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDescription \u003d new Description();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Start date is not optional"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryDate.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelStartDate \u003d new ItineraryDate(startDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // End date is not optional"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryDate.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEndDate \u003d new ItineraryDate(endDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Budget is optional"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Budget.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (budget.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelBudget \u003d new Budget();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Budget.isValidBudget(budget)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelBudget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Itinerary(modelName, modelDescription, modelStartDate, modelEndDate, modelBudget, modelDays);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItineraryAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link ItineraryAttraction}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonAdaptedItineraryAttraction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Itinerary attraction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final JsonAdaptedAttraction attraction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // todo add more fields specific to itinerary attraction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedItineraryAttraction} with the given itinerary attraction details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItineraryAttraction(@JsonProperty(\"attraction\") JsonAdaptedAttraction attraction) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // todo add more fields specific to itinerary attraction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ItineraryAttraction} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItineraryAttraction(ItineraryAttraction source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attraction \u003d new JsonAdaptedAttraction(source.getAttraction());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // todo add more fields specific to itinerary attraction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted itinerary attraction object into the model\u0027s {@code ItineraryAttraction}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted itinerary attraction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttraction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // todo add more fields specific to itinerary attraction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Attraction is not optional"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (attraction \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Attraction.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // todo make these not null next time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new ItineraryAttraction(attraction.toModelType(), null, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 2,
      "limkoonkiat": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAttractionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A class to access AttractionList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAttractionListStorage implements AttractionListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAttractionListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAttractionListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readAttractionList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #readAttractionList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cJsonSerializableAttractionList\u003e jsonAttractionList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                filePath, JsonSerializableAttractionList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!jsonAttractionList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.of(jsonAttractionList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveAttractionList(attractionList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #saveAttractionList(ReadOnlyAttractionList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAttractionList(attractionList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItineraryListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A class to access ItineraryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonItineraryListStorage implements ItineraryListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItineraryListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonItineraryListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readItineraryList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #readItineraryList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cJsonSerializableItineraryList\u003e jsonItineraryList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                filePath, JsonSerializableItineraryList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!jsonItineraryList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.of(jsonItineraryList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveItineraryList(itineraryList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #saveItineraryList(ReadOnlyItineraryList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItineraryList(itineraryList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An Immutable AttractionList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "@JsonRootName(value \u003d \"attractionlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonSerializableAttractionList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"Attraction list contains duplicate attraction(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final List\u003cJsonAdaptedAttraction\u003e attractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonSerializableAttractionList} with the given attractions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableAttractionList(@JsonProperty(\"attractions\") List\u003cJsonAdaptedAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.attractions.addAll(attractions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ReadOnlyAttractionList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAttractionList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableAttractionList(ReadOnlyAttractionList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.addAll(source.getAttractionList().stream().map(JsonAdaptedAttraction::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this attraction list into the model\u0027s {@code AttractionList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        for (JsonAdaptedAttraction jsonAdaptedAttraction : attractions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            Attraction attraction \u003d jsonAdaptedAttraction.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (attractionList.hasAttraction(attraction)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 42,
      "leeyorktat": 2,
      "limkoonkiat": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An Immutable ItineraryList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "@JsonRootName(value \u003d \"itinerarylist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonSerializableItineraryList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"Itinerary list contains duplicate itineraries.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedItinerary\u003e itineraries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonSerializableItineraryList} with the given itineraries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableItineraryList(@JsonProperty(\"itineraries\") List\u003cJsonAdaptedItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraries.addAll(itineraries);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ReadOnlyItineraryList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItineraryList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableItineraryList(ReadOnlyItineraryList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.addAll(source.getItineraryList().stream().map(JsonAdaptedItinerary::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this itinerary list into the model\u0027s {@code ItineraryList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList itineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedItinerary jsonAdaptedItinerary : itineraries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Itinerary itinerary \u003d jsonAdaptedItinerary.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (itineraryList.hasItinerary(itinerary)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface Storage extends AttractionListStorage, ItineraryListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "limkoonkiat": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Manages storage of TrackPad data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionListStorage attractionListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryListStorage itineraryListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AttractionListStorage}, {@code ItineraryListStorage} and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public StorageManager(AttractionListStorage attractionListStorage, ItineraryListStorage itineraryListStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionListStorage \u003d attractionListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryListStorage \u003d itineraryListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListStorage.getAttractionListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readAttractionList(attractionListStorage.getAttractionListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListStorage.readAttractionList(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveAttractionList(attractionList, attractionListStorage.getAttractionListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionListStorage.saveAttractionList(attractionList, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListStorage.getItineraryListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readItineraryList(itineraryListStorage.getItineraryListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListStorage.readItineraryList(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveItineraryList(itineraryList, itineraryListStorage.getItineraryListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryListStorage.saveItineraryList(itineraryList, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 62,
      "limkoonkiat": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttractionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * An UI component that displays information of a {@code Attraction}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String FXML \u003d \"AttractionListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final Attraction attraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // For JavaFX, rename location to locale as location is a reserved keyword in JavaFX"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Label locale;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label openingHours;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionCode} with the given {@code Attraction} and index to display."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionCard(Attraction attraction, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name.setText(attraction.getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        phone.setText(attraction.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        address.setText(attraction.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        email.setText(attraction.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        locale.setText(attraction.getLocation().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description.setText(attraction.getDescription().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours.setText(\"Opening Hours: \" + attraction.getOpeningHours().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getPriceRange().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            Label priceRange \u003d new Label(attraction.getPriceRange().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            priceRange.setStyle(\"-fx-background-color: #800;\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            tags.getChildren().add(priceRange);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getRating().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            Label rating \u003d new Label(attraction.getRating().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            rating.setStyle(\"-fx-background-color: #080;\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            tags.getChildren().add(rating);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getVisited().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Label visited \u003d new Label(attraction.getVisited().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (attraction.getVisited().equals(new Visited(\"TRUE\"))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                visited.setText(attraction.getVisited().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                visited.setText(\"Not Visited\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited.setStyle(\"-fx-background-color: #9933ff;\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            tags.getChildren().add(visited);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attraction.getTags().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!(other instanceof AttractionCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AttractionCard card \u003d (AttractionCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 attraction.equals(card.attraction);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 29,
      "Robinho98": 9,
      "leeyorktat": 5,
      "-": 61,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttractionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Panel containing the list of attractions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String FXML \u003d \"AttractionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttractionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private ListView\u003cAttraction\u003e attractionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListPanel(ObservableList\u003cAttraction\u003e attractionList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionListView.setItems(attractionList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListView.setCellFactory(listView -\u003e new AttractionListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Attraction} using a {@code AttractionCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    class AttractionListViewCell extends ListCell\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        protected void updateItem(Attraction attraction, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            super.updateItem(attraction, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            if (empty || attractionListView \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setGraphic(new AttractionCard(attraction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 47,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t09-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class ItineraryListCard {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class ItineraryListPanel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private AttractionListPanel attractionListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    // private ItineraryListPanel itineraryListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private StackPane attractionListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    // @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    // private StackPane itineraryListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * TO-DO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListPanel \u003d new AttractionListPanel(logic.getFilteredAttractionList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListPanelPlaceholder.getChildren().add(attractionListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // itineraryListPanel \u003d new ItineraryListPanel(logic.getFilteredItineraryList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // itineraryListPanelPlaceholder.getChildren().add(itineraryListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAttractionListFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionListPanel getAttractionListPanel() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return attractionListPanel;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 6,
      "leeyorktat": 8,
      "peter-yeh": 1,
      "-": 190,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/track_pad_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/AttractionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \u003cLabel fx:id\u003d\"locale\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"openingHours\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$openingHours\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "-": 35,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/resources/view/AttractionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \u003cListView fx:id\u003d\"attractionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"locale\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"openingHours\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$openingHours\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"priceRange\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priceRange\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 41
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003cListView fx:id\u003d\"itineraryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "         title\u003d\"TrackPad App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \u003cImage url\u003d\"@/images/track_pad_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5, 0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "          \u003cVBox fx:id\u003d\"attractionList\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"1000\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"listHeader\" text\u003d\"Attractions\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cStackPane fx:id\u003d\"attractionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "          \u003cVBox fx:id\u003d\"itineraryList\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"1000\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"listHeader\" text\u003d\"Itinerary\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cStackPane fx:id\u003d\"itineraryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "leeyorktat": 14,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/track_pad_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonAttractionListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonItineraryListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListStorage(temporaryFolder.resolve(\"attractionlist.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListStorage(temporaryFolder.resolve(\"itinerarylist.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StorageManager storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String deleteAttractionCommand \u003d \"delete-attraction 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandException(deleteAttractionCommand, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String listAttractionCommand \u003d ListAttractionCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(listAttractionCommand, ListAttractionCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Setup LogicManager with JsonAttractionListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAttractions.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionItineraries.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StorageManager storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String addAttractionCommand \u003d AddAttractionCommand.COMMAND_WORD + NAME_DESC_EIFFEL"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(EIFFEL_TOWER).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.addAttraction(expectedAttraction);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(addAttractionCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void getFilteredAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAttractionList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class JsonAttractionListIoExceptionThrowingStub extends JsonAttractionListStorage {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private JsonAttractionListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class JsonItineraryListIoExceptionThrowingStub extends JsonItineraryListStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private JsonItineraryListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 8,
      "yuxuanxc": 14,
      "-": 128,
      "limkoonkiat": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_NAME_EIFFEL \u003d \"Eiffel Tower\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_NAME_MBS \u003d \"Marina Bay Sands\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_PHONE_EIFFEL \u003d \"33892701239\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_PHONE_MBS \u003d \"66888888\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_EMAIL_EIFFEL \u003d \"eiffel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_EMAIL_MBS \u003d \"mbs@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_ADDRESS_EIFFEL \u003d \"Champ de Mars, 5 Avenue Anatole France, 75007\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_ADDRESS_MBS \u003d \"10 Bayfront Ave, 018956\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_DESCRIPTION_EIFFEL \u003d \"Gustave Eiffel\u0027s iconic, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"wrought-iron 1889 tower, with steps and elevators to observation decks.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_DESCRIPTION_MBS \u003d \"The Marina Bay Sands is an integrated \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"resort fronting Marina Bay within the Downtown Core district of Singapore.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_LOCATION_EIFFEL \u003d \"France, Paris\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_LOCATION_MBS \u003d \"Singapore, Singapore\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_OPENING_HOURS_EIFFEL \u003d \"1000-2200\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_OPENING_HOURS_MBS \u003d \"0000-2359\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_PRICE_RANGE_EIFFEL \u003d \"HIGH\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_PRICE_RANGE_MBS \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_RATING_EIFFEL \u003d \"4.8\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_RATING_MBS \u003d \"4.7\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_VISITED_EIFFEL \u003d \"FALSE\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_VISITED_MBS \u003d \"TRUE\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_TAG_SIGHTSEEING \u003d \"sightseeing\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_TAG_ACTIVITY \u003d \"activity\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String NAME_DESC_EIFFEL \u003d \" \" + PREFIX_NAME + VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String NAME_DESC_MBS \u003d \" \" + PREFIX_NAME + VALID_NAME_MBS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String PHONE_DESC_EIFFEL \u003d \" \" + PREFIX_PHONE + VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String PHONE_DESC_MBS \u003d \" \" + PREFIX_PHONE + VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String EMAIL_DESC_EIFFEL \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String EMAIL_DESC_MBS \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String ADDRESS_DESC_EIFFEL \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String ADDRESS_DESC_MBS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DESCRIPTION_DESC_EIFFEL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DESCRIPTION_DESC_MBS \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String LOCATION_DESC_EIFFEL \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String LOCATION_DESC_MBS \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String OPENING_HOURS_DESC_EIFFEL \u003d \" \" + PREFIX_OPENING_HOURS + VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String OPENING_HOURS_DESC_MBS \u003d \" \" + PREFIX_OPENING_HOURS + VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String PRICE_RANGE_DESC_EIFFEL \u003d \" \" + PREFIX_PRICE_RANGE + VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String PRICE_RANGE_DESC_MBS \u003d \" \" + PREFIX_PRICE_RANGE + VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String RATING_DESC_EIFFEL \u003d \" \" + PREFIX_RATING + VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String RATING_DESC_MBS \u003d \" \" + PREFIX_RATING + VALID_RATING_MBS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VISITED_DESC_EIFFEL \u003d \" \" + PREFIX_VISITED + VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VISITED_DESC_MBS \u003d \" \" + PREFIX_VISITED + VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String TAG_DESC_SIGHTSEEING \u003d \" \" + PREFIX_TAG + VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String TAG_DESC_ACTIVITY \u003d \" \" + PREFIX_TAG + VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Zoo\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"mbs!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // empty string not allowed for locations"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_OPENING_HOURS_DESC \u003d \" \" + PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_PRICE_RANGE_DESC \u003d \" \" + PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_VISITED_DESC \u003d \" \" + PREFIX_VISITED + \"True1\"; // numbers not allowed in VISITED"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Sightseeing*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final EditAttractionCommand.EditAttractionDescriptor DESC_EIFFEL;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final EditAttractionCommand.EditAttractionDescriptor DESC_MBS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DESC_EIFFEL \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_EIFFEL).withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_EIFFEL).withOpeningHours(VALID_OPENING_HOURS_EIFFEL)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_EIFFEL).withRating(VALID_RATING_EIFFEL)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withVisited(VALID_VISITED_EIFFEL).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        DESC_MBS \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_MBS).withRating(VALID_RATING_MBS)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withVisited(VALID_VISITED_MBS).withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * - AttractionList, filtered attraction list and selected attraction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList expectedAttractionList \u003d new AttractionList(actualModel.getAttractionList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAttractionList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedAttractionList, actualModel.getAttractionList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAttractionList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the attraction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code model}\u0027s AttractionList."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static void showAttractionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d model.getFilteredAttractionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final String[] splitName \u003d attraction.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredAttractionList(new AttractionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(1, model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the itinerary at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code model}\u0027s ItineraryList."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static void showItineraryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredItineraryList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d model.getFilteredItineraryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final String[] splitName \u003d itinerary.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredItineraryList(new ItineraryContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(1, model.getFilteredItineraryList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 38,
      "Robinho98": 35,
      "-": 84,
      "limkoonkiat": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/AddAttractionCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddAttractionCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_newAttraction_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.addAttraction(validAttraction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new AddAttractionCommand(validAttraction), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                String.format(AddAttractionCommand.MESSAGE_SUCCESS, validAttraction), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionInList \u003d model.getAttractionList().getAttractionList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(new AddAttractionCommand(attractionInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                AddAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 6,
      "yuxuanxc": 6,
      "limkoonkiat": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/AddAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAttractionCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_attractionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStubAcceptingAttractionAdded modelStub \u003d new ModelStubAcceptingAttractionAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        CommandResult commandResult \u003d new AddAttractionCommand(validAttraction).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(String.format(AddAttractionCommand.MESSAGE_SUCCESS, validAttraction),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(Arrays.asList(validAttraction), modelStub.attractionsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addAttractionCommand \u003d new AddAttractionCommand(validAttraction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAttraction(validAttraction);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                AddAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION, () -\u003e addAttractionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction singaporeZoo \u003d new AttractionBuilder().withName(\"Singapore Zoo\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction nightSafari \u003d new AttractionBuilder().withName(\"Night Safari\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addSingaporeZooCommand \u003d new AddAttractionCommand(singaporeZoo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addNightSafariCommand \u003d new AddAttractionCommand(nightSafari);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZooCommand.equals(addSingaporeZooCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addSingaporeZooCommandCopy \u003d new AddAttractionCommand(singaporeZoo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZooCommand.equals(addSingaporeZooCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(addNightSafariCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * A Model stub that contains a single attraction."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private class ModelStubWithAttraction extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        private final Attraction attraction;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStubWithAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return this.attraction.isSameAttraction(attraction);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * A Model stub that always accept the attraction being added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private class ModelStubAcceptingAttractionAdded extends ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final ArrayList\u003cAttraction\u003e attractionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return attractionsAdded.stream().anyMatch(attraction::isSameAttraction);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            attractionsAdded.add(attraction);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new AttractionList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 40,
      "yuxuanxc": 11,
      "peter-yeh": 10,
      "limkoonkiat": 69,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/ClearAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ClearAttractionCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_emptyTrackPad_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ClearAttractionCommand(), model,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                ClearAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_nonEmptyAttractionList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setAttractionList(new AttractionList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ClearAttractionCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                ClearAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "Robinho98": 1,
      "limkoonkiat": 8,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/DeleteAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * {@code DeleteAttractionCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionToDelete \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(deleteAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(deleteAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionToDelete \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showNoAttraction(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(deleteAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trackPad list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(deleteAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteFirstCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteSecondCommand \u003d new DeleteAttractionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteFirstCommandCopy \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private void showNoAttraction(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(model.getFilteredAttractionList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 10,
      "yuxuanxc": 18,
      "limkoonkiat": 15,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/EditAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * and unit tests for EditAttractionCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(editedAttraction).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(model.getFilteredAttractionList().get(0), editedAttraction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index indexLastAttraction \u003d Index.fromOneBased(model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction lastAttraction \u003d model.getFilteredAttractionList().get(indexLastAttraction.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        AttractionBuilder attractionInList \u003d new AttractionBuilder(lastAttraction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d attractionInList.withName(VALID_NAME_MBS).withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(indexLastAttraction, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(lastAttraction, editedAttraction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new EditAttractionDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction editedAttraction \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction attractionInFilteredList \u003d model.getFilteredAttractionList()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(attractionInFilteredList).withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()), model.getItineraryList(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(model.getFilteredAttractionList().get(0), editedAttraction);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttractionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction firstAttraction \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(firstAttraction).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, EditAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttractionFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // edit attraction in filtered list into a duplicate in AttractionList"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionInList \u003d model.getAttractionList()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .getAttractionList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder(attractionInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, EditAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidAttractionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * but smaller than size of AttractionList list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidAttractionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the AttractionList list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final EditAttractionCommand standardCommand \u003d new EditAttractionCommand(INDEX_FIRST, DESC_EIFFEL);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor copyDescriptor \u003d new EditAttractionDescriptor(DESC_EIFFEL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand commandWithSameValues \u003d new EditAttractionCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearAttractionCommand()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAttractionCommand(INDEX_SECOND, DESC_EIFFEL)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAttractionCommand(INDEX_FIRST, DESC_MBS)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 30,
      "yuxuanxc": 32,
      "limkoonkiat": 34,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/EditAttractionDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class EditAttractionDescriptorTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptorWithSameValues \u003d new EditAttractionDescriptor(DESC_EIFFEL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_EIFFEL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_EIFFEL.equals(DESC_EIFFEL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(DESC_MBS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withEmail(VALID_EMAIL_MBS).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withAddress(VALID_ADDRESS_MBS).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withLocation(VALID_LOCATION_MBS).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withDescription(VALID_DESCRIPTION_MBS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different opening hours -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different price range -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withPriceRange(VALID_PRICE_RANGE_MBS).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withRating(VALID_RATING_MBS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different visited -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withVisited(VALID_VISITED_MBS).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 44,
      "yuxuanxc": 23,
      "limkoonkiat": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/FindAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ATTRACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.BOTANIC_GARDENS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.ORCHARD_ROAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.RIVER_SAFARI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SINGAPORE_ZOO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindAttractionCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findFirstCommand \u003d new FindAttractionCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findSecondCommand \u003d new FindAttractionCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findFirstCommandCopy \u003d new FindAttractionCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_zeroKeywords_noAttractionFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d new FindAttractionCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAttractionList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_multipleKeywords_multipleAttractionsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Zoo Orchard Gardens\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d new FindAttractionCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(Arrays.asList(SINGAPORE_ZOO, RIVER_SAFARI, ORCHARD_ROAD, BOTANIC_GARDENS),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                model.getFilteredAttractionList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code userInput} into a {@code AttractionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new AttractionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 8,
      "yuxuanxc": 10,
      "peter-yeh": 4,
      "limkoonkiat": 16,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/ListAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListAttractionCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ListAttractionCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ListAttractionCommand(), model, ListAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ListAttractionCommand(), model, ListAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "yuxuanxc": 4,
      "limkoonkiat": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/MarkVisitedAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * {@code MarkVisitedAttractionCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d new Attraction(attractionToMarkVisited.getName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPhone(), attractionToMarkVisited.getEmail(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getAddress(), attractionToMarkVisited.getDescription(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getLocation(), attractionToMarkVisited.getOpeningHours(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPriceRange(), attractionToMarkVisited.getRating(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new Visited(\"TRUE\"), attractionToMarkVisited.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MarkVisitedAttractionCommand.MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandSuccess(markVisitedAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandFailure(markVisitedAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d new Attraction(attractionToMarkVisited.getName(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPhone(), attractionToMarkVisited.getEmail(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getAddress(), attractionToMarkVisited.getDescription(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getLocation(), attractionToMarkVisited.getOpeningHours(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPriceRange(), attractionToMarkVisited.getRating(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new Visited(\"TRUE\"), attractionToMarkVisited.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MarkVisitedAttractionCommand.MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandSuccess(markVisitedAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trackPad list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandFailure(markVisitedAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedFirstCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedSecondCommand \u003d new MarkVisitedAttractionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(markVisitedFirstCommand.equals(markVisitedFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedFirstCommandCopy \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(markVisitedFirstCommand.equals(markVisitedFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(markVisitedSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private void showNoAttraction(Model model) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(p -\u003e false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(model.getFilteredAttractionList().isEmpty());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 132,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/AddItineraryCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddItineraryCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_newItinerary_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.addItinerary(validItinerary);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new AddItineraryCommand(validItinerary), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(AddItineraryCommand.MESSAGE_SUCCESS, validItinerary), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItinerary_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryInList \u003d model.getItineraryList().getItineraryList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(new AddItineraryCommand(itineraryInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                AddItineraryCommand.MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/AddItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class AddItineraryCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItineraryCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_itineraryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommandTest.ModelStubAcceptingItineraryAdded modelStub \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommandTest.ModelStubAcceptingItineraryAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        CommandResult commandResult \u003d new AddItineraryCommand(validItinerary).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(String.format(AddItineraryCommand.MESSAGE_SUCCESS, validItinerary),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Arrays.asList(validItinerary), modelStub.itinerariesAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItinerary_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addItineraryCommand \u003d new AddItineraryCommand(validItinerary);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommandTest.ModelStub modelStub \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommandTest.ModelStubWithItinerary(validItinerary);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                AddItineraryCommand.MESSAGE_DUPLICATE_ITINERARY, () -\u003e addItineraryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary singaporeZoos \u003d new ItineraryBuilder().withName(\"Singapore Zoos\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary parisTrip \u003d new ItineraryBuilder().withName(\"Paris Trip\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addSingaporeZoosCommand \u003d new AddItineraryCommand(singaporeZoos);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addParisTripCommand \u003d new AddItineraryCommand(parisTrip);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZoosCommand.equals(addSingaporeZoosCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addSingaporeZooCommandCopy \u003d new AddItineraryCommand(singaporeZoos);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZoosCommand.equals(addSingaporeZooCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(addParisTripCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A Model stub that contains a single itinerary."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStubWithItinerary extends AddItineraryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelStubWithItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return this.itinerary.isSameItinerary(itinerary);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A Model stub that always accept the itinerary being added."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStubAcceptingItineraryAdded extends AddItineraryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ArrayList\u003cItinerary\u003e itinerariesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return itinerariesAdded.stream().anyMatch(itinerary::isSameItinerary);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itinerariesAdded.add(itinerary);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new ItineraryList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 5,
      "limkoonkiat": 259
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/ClearItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ClearItineraryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_emptyTrackPad_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ClearItineraryCommand(), model, ClearItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_nonEmptyItineraryList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItineraryList(new ItineraryList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ClearItineraryCommand(), model, ClearItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/DeleteItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItineraryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code DeleteItineraryCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryCommand.MESSAGE_DELETE_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(deleteItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItineraryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(deleteItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryCommand.MESSAGE_DELETE_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showNoItinerary(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(deleteItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trackPad list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getItineraryList().getItineraryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(deleteItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteFirstCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteSecondCommand \u003d new DeleteItineraryCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteFirstCommandCopy \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no itinerary."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void showNoItinerary(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredItineraryList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(model.getFilteredItineraryList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/AddItineraryAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void constructor_nullItineraryAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItineraryAttractionCommand(null, null, null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_duplicateItineraryAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d new ItineraryTime(\"1200\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d new ItineraryTime(\"1300\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction validItineraryAttraction \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().withStartTime(startTime).withEndTime(endTime).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                startTime, endTime, Index.fromOneBased(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                // todo wait for itinerary builder"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithItinerary(validItineraryAttraction, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                AddItineraryAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION, () -\u003e addIaCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidAttractionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction validItineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d new ItineraryTime(\"1200\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d new ItineraryTime(\"1300\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand(Index.fromOneBased(9),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                startTime, endTime, Index.fromOneBased(2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithAttractionFilteredList model \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ModelStubWithAttractionFilteredList(new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                addIaCommand.execute(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command equals"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d new ItineraryTime(\"1200\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d new ItineraryTime(\"1300\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index \u003d Index.fromOneBased(9);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index day \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal day, set addIaCommand index to 1"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        day \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d new ItineraryTime(\"1159\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal end time"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d new ItineraryTime(\"1359\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests itinerary attraction class"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction ia1 \u003d new ItineraryAttractionBuilder().withStartTime(\"1200\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction ia2 \u003d new ItineraryAttractionBuilder().withStartTime(\"1200\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia1, ia1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia2, ia2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia1, ia2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(ia1, 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(ia1, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A default model stub that throws exception for all method calls."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains a single attraction."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithAttraction extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final Attraction attraction;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return this.attraction.isSameAttraction(attraction);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains a empty filtered list of Attraction type."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithAttractionFilteredList extends ModelStub {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final FilteredList\u003cAttraction\u003e filteredAttractions;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithAttractionFilteredList(FilteredList\u003cAttraction\u003e filteredAttractions) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            requireNonNull(filteredAttractions);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.filteredAttractions \u003d filteredAttractions;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return filteredAttractions;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // * A Model stub that contains a single Itinerary."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //private class ModelStubWithItinerary extends ModelStub {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //    private final Itinerary itinerary;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //    ModelStubWithItinerary(ItineraryAttraction attraction, int day) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //        requireNonNull(attraction);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //        this.itinerary \u003d new ItineraryBuilder(); // build a itinerary and put it into model"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //        this.itinerary.addItineraryAttraction(attraction, day);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 5,
      "peter-yeh": 299,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/DeleteItineraryAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * {@code DeleteAttractionCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_validIndexValidDay_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                itineraryAttraction);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary expectedItinerary \u003d new ItineraryBuilder().withItineraryAttraction("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().build(), INDEX_FIRST).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.setCurrentItinerary(expectedItinerary);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.getCurrentItinerary().deleteItineraryAttraction(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandSuccess(delIaCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_commandFailure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary expectedItinerary \u003d new ItineraryBuilder().withItineraryAttraction("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().build(), INDEX_FIRST).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.setCurrentItinerary(expectedItinerary);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.getCurrentItinerary().deleteItineraryAttraction(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandFailure(delIaCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_THIRD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedMessage \u003d Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandFailure(delIaCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidAttractionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_THIRD, INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerary modelWithItinerary \u003d new ModelStubWithItinerary(new ItineraryBuilder().build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                delIaCommand.execute(modelWithItinerary));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand deleteFirstCommand;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand deleteSecondCommand;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteFirstCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_THIRD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // diff index -\u003e return false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteSecondCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_THIRD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // diff day visiting -\u003e return false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteFirstCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A default model stub that throws exception for all method calls."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains a itinerary in itineraryList."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithItinerary extends ModelStub {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ModelStubWithItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return this.itinerary;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 279
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Bot@nic Gardens\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+6471 7138\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_OPENING_HOURS \u003d \"1-2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_PRICE_RANGE \u003d \"low\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_RATING \u003d \"9\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_VISITED \u003d \"FaLse\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#nature\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_ITINERARY_DATE \u003d \"3 february\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_BUDGET \u003d \"345.123\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_NAME \u003d \"Botanic Gardens\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_PHONE \u003d \"64717138\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"1 Cluny Rd, 259569\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"botanicgardens@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"First UNESCO Heritage Site in Singapore\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"Singapore, Singapore\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_OPENING_HOURS \u003d \"1000-1800\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_PRICE_RANGE \u003d \"LOW\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_RATING \u003d \"4.9\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_VISITED \u003d \"FALSE\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"nature\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"sightseeing\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_ITINERARY_DATE \u003d \"03-02-2016\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_BUDGET \u003d \"100.50\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocation((String) null));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLocation(INVALID_LOCATION));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_validValueWithoutWhitespace_returnsLocation() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedLocation, ParserUtil.parseLocation(VALID_LOCATION));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_validValueWithWhitespace_returnsTrimmedLocation() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String locationWithWhitespace \u003d WHITESPACE + VALID_LOCATION + WHITESPACE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedLocation, ParserUtil.parseLocation(locationWithWhitespace));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOpeningHours((String) null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOpeningHours(INVALID_OPENING_HOURS));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_validValueWithoutWhitespace_returnsOpeningHours() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours expectedOpeningHours \u003d new OpeningHours(VALID_OPENING_HOURS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedOpeningHours, ParserUtil.parseOpeningHours(VALID_OPENING_HOURS));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_validValueWithWhitespace_returnsTrimmedOpeningHours() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String openingHoursWithWhitespace \u003d WHITESPACE + VALID_OPENING_HOURS + WHITESPACE;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours expectedOpeningHours \u003d new OpeningHours(VALID_OPENING_HOURS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedOpeningHours, ParserUtil.parseOpeningHours(openingHoursWithWhitespace));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriceRange((String) null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriceRange(INVALID_PRICE_RANGE));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_validValueWithoutWhitespace_returnsPriceRange() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange expectedPriceRange \u003d new PriceRange(VALID_PRICE_RANGE);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedPriceRange, ParserUtil.parsePriceRange(VALID_PRICE_RANGE));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_validValueWithWhitespace_returnsTrimmedPriceRange() throws Exception {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String priceRangeWithWhitespace \u003d WHITESPACE + VALID_PRICE_RANGE + WHITESPACE;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange expectedPriceRange \u003d new PriceRange(VALID_PRICE_RANGE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedPriceRange, ParserUtil.parsePriceRange(priceRangeWithWhitespace));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVisited((String) null));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVisited(INVALID_VISITED));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_validValueWithoutWhitespace_returnsVisited() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited expectedVisited \u003d new Visited(VALID_VISITED);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedVisited, ParserUtil.parseVisited(VALID_VISITED));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_validValueWithWhitespace_returnsTrimmedVisited() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String visitedWithWhitespace \u003d WHITESPACE + VALID_VISITED + WHITESPACE;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited expectedVisited \u003d new Visited(VALID_VISITED);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedVisited, ParserUtil.parseVisited(visitedWithWhitespace));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseItineraryDate((String) null));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseItineraryDate(INVALID_ITINERARY_DATE));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_validValueWithoutWhitespace_returnsItineraryDate() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate expectedItineraryDate \u003d new ItineraryDate(VALID_ITINERARY_DATE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedItineraryDate, ParserUtil.parseItineraryDate(VALID_ITINERARY_DATE));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_validValueWithWhitespace_returnsTrimmedItineraryDate() throws Exception {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String itineraryDateWithWhitespace \u003d WHITESPACE + VALID_ITINERARY_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate expectedItineraryDate \u003d new ItineraryDate(VALID_ITINERARY_DATE);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedItineraryDate, ParserUtil.parseItineraryDate(itineraryDateWithWhitespace));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBudget((String) null));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBudget(INVALID_BUDGET));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_validValueWithoutWhitespace_returnsBudget() throws Exception {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget expectedBudget \u003d new Budget(VALID_BUDGET);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedBudget, ParserUtil.parseBudget(VALID_BUDGET));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_validValueWithWhitespace_returnsTrimmedBudget() throws Exception {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String budgetWithWhitespace \u003d WHITESPACE + VALID_BUDGET + WHITESPACE;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget expectedBudget \u003d new Budget(VALID_BUDGET);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedBudget, ParserUtil.parseBudget(budgetWithWhitespace));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 37,
      "yuxuanxc": 104,
      "-": 180,
      "limkoonkiat": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TrackPadParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ClearAttractionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.AttractionUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TrackPadParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final TrackPadParser parser \u003d new TrackPadParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand command \u003d (AddAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                AttractionUtil.getAddCommand(attraction));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new AddAttractionCommand(attraction), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearAttractionCommand.COMMAND_WORD) instanceof ClearAttractionCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearAttractionCommand.COMMAND_WORD + \" 3\") instanceof ClearAttractionCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand command \u003d (DeleteAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new DeleteAttractionCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(attraction).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand command \u003d (EditAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                EditAttractionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + AttractionUtil.getEditAttractionDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new EditAttractionCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d (FindAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                FindAttractionCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new FindAttractionCommand(new AttractionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ListAttractionCommand.COMMAND_WORD) instanceof ListAttractionCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ListAttractionCommand.COMMAND_WORD + \" 3\") instanceof ListAttractionCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 26,
      "Robinho98": 6,
      "-": 68,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/AddAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPENING_HOURS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_RANGE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VISITED_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_MBS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MBS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_MBS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MBS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_MBS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandParserTest {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private AddAttractionCommandParser parser \u003d new AddAttractionCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(MBS).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_MBS"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + NAME_DESC_MBS + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_EIFFEL + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_EIFFEL + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_EIFFEL + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple locations - last location accepted"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_EIFFEL + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple opening hours - last opening hours accepted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple price ranges - last price range accepted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_EIFFEL + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple ratings - last rating accepted"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_EIFFEL + RATING_DESC_MBS"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // multiple visited - last visited accepted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction expectedAttractionMultipleTags \u003d new AttractionBuilder(MBS)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS + TAG_DESC_SIGHTSEEING + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionMultipleTags));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(EIFFEL_TOWER).withTags().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No phone number given"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoPhone \u003d new AttractionBuilder(EIFFEL_TOWER).withPhone().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoPhone));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No email given"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoEmail \u003d new AttractionBuilder(EIFFEL_TOWER).withEmail().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoEmail));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No address given"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttractionNoAddress \u003d new AttractionBuilder(EIFFEL_TOWER).withAddress().build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoAddress));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No description given"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoDescription \u003d new AttractionBuilder(EIFFEL_TOWER).withDescription().build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoDescription));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No opening hours given"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoOpeningHours \u003d new AttractionBuilder(EIFFEL_TOWER).withOpeningHours().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoOpeningHours));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // No price range given"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoPriceRange \u003d new AttractionBuilder(EIFFEL_TOWER).withPriceRange().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoPriceRange));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // No rating given"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoRating \u003d new AttractionBuilder(EIFFEL_TOWER).withRating().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoRating));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // No visited given"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction expectedAttractionNoVisited \u003d new AttractionBuilder(EIFFEL_TOWER).withVisited().build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_EIFFEL"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoVisited));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // missing location prefix"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VALID_LOCATION_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MBS + VALID_PHONE_MBS + VALID_EMAIL_MBS + VALID_ADDRESS_MBS"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VALID_LOCATION_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_LOCATION_DESC"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_TAG_ACTIVITY,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Description"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Opening hours"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_OPENING_HOURS_DESC"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Price Range"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_PRICE_RANGE_DESC"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Rating"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_RATING_DESC"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // invalid Visited"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + INVALID_VISITED_DESC"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_MBS + EMAIL_DESC_MBS + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_MBS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 77,
      "yuxuanxc": 85,
      "peter-yeh": 172,
      "limkoonkiat": 28,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/DeleteAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * outside of the DeleteAttractionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * same path through the DeleteAttractionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private DeleteAttractionCommandParser parser \u003d new DeleteAttractionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteAttractionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "limkoonkiat": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/EditAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPENING_HOURS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_RANGE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VISITED_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_MBS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_MBS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MBS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_MBS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandParserTest {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private EditAttractionCommandParser parser \u003d new EditAttractionCommandParser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\", EditAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS); // invalid location"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OPENING_HOURS_DESC,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                OpeningHours.MESSAGE_CONSTRAINTS); // invalid opening hours"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_RANGE_DESC,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                PriceRange.MESSAGE_CONSTRAINTS); // invalid price range"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VISITED_DESC, Visited.MESSAGE_CONSTRAINTS); // invalid visited"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_EIFFEL, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_MBS + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Attraction} being edited,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ACTIVITY + TAG_EMPTY + TAG_DESC_SIGHTSEEING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_EIFFEL"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VALID_PHONE_EIFFEL + VALID_DESCRIPTION_EIFFEL + VALID_LOCATION_EIFFEL + VALID_OPENING_HOURS_EIFFEL"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VALID_PRICE_RANGE_EIFFEL + VALID_RATING_EIFFEL + VALID_VISITED_EIFFEL, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL + NAME_DESC_EIFFEL + DESCRIPTION_DESC_EIFFEL"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL).withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_EIFFEL).withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withRating(VALID_RATING_EIFFEL).withVisited(VALID_VISITED_EIFFEL)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MBS + EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_EIFFEL).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withAddress(VALID_ADDRESS_EIFFEL).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // opening hours"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withOpeningHours(VALID_OPENING_HOURS_EIFFEL).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // price range"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPriceRange(VALID_PRICE_RANGE_EIFFEL).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withRating(VALID_RATING_EIFFEL).build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withVisited(VALID_VISITED_EIFFEL).build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + LOCATION_DESC_EIFFEL + DESCRIPTION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + EMAIL_DESC_EIFFEL + TAG_DESC_ACTIVITY + PHONE_DESC_MBS + ADDRESS_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + LOCATION_DESC_MBS + DESCRIPTION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS + TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_MBS).withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withRating(VALID_RATING_MBS).withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MBS + INVALID_PHONE_DESC + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 58,
      "yuxuanxc": 79,
      "limkoonkiat": 49,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/FindAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private FindAttractionCommandParser parser \u003d new FindAttractionCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand expectedFindAttractionCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new FindAttractionCommand(new AttractionContainsKeywordsPredicate(Arrays.asList(\"Zoo\", \"MBS\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \"Zoo MBS\", expectedFindAttractionCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \" \\n Zoo \\n \\t MBS  \\t\", expectedFindAttractionCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 9,
      "limkoonkiat": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/AddItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class AddItineraryCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo fill up with tests"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/DeleteItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * outside of the DeleteItineraryCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * same path through the DeleteItineraryCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private DeleteItineraryCommandParser parser \u003d new DeleteItineraryCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_validArgs_returnsDeleteItineraryCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteItineraryCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                DeleteItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/MarkVisitedAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.attraction.MarkVisitedAttractionCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * outside of the MarkVisitedAttractionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * same path through the MarkVisitedAttractionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private MarkVisitedAttractionCommandParser parser \u003d new MarkVisitedAttractionCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MarkVisitedAttractionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, MarkVisitedAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionList attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Collections.emptyList(), attractionList.getAttractionList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attractionList.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_withValidReadOnlyTrackPad_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList newData \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(newData, attractionList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_withDuplicateAttractions_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        List\u003cAttraction\u003e newAttractions \u003d Arrays.asList(MBS, editedMbs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStub newData \u003d new AttractionListStub(newAttractions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, () -\u003e attractionList.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attractionList.hasAttraction(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasAttraction_attractionNotInTrackPad_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(attractionList.hasAttraction(MBS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasAttraction_attractionInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(MBS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(attractionList.hasAttraction(MBS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionWithSameIdentityFieldsInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(MBS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(attractionList.hasAttraction(editedMbs));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void getAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e attractionList.getAttractionList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A stub ReadOnlyAttractionList whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class AttractionListStub implements ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private final ObservableList\u003cAttraction\u003e attractions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStub(Collection\u003cAttraction\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.attractions.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getAttractionList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return attractions;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "leeyorktat": 77,
      "limkoonkiat": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ItineraryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo add stuff"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.AttractionListBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new AttractionList(), new AttractionList(modelManager.getAttractionList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new ItineraryList(), new ItineraryList(modelManager.getItineraryList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"track/pad/file/attraction\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"track/pad/file/itinerary\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"new/track/pad/file/attraction\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"new/track/pad/file/itinerary\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAttractionListFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath_validPath_setsAttractionListFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Path path \u003d Paths.get(\"track/pad/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.setAttractionListFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(path, modelManager.getAttractionListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasItinerary(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionNotInTrackPad_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(modelManager.hasAttraction(MBS));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        modelManager.addAttraction(MBS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(modelManager.hasAttraction(MBS));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void getFilteredAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAttractionList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionList \u003d new AttractionListBuilder().withAttraction(MBS).withAttraction(SUNTEC).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList differentAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //todo make ItineraryListBuilder"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //ItineraryList itineraryList \u003d new ItineraryListBuilder().withAttraction(MBS).withAttraction(SUNTEC).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList itineraryList \u003d new ItineraryList(); //temporary until ItineraryListBuilder is up"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList differentItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager \u003d new ModelManager(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different attractionList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAttractionList, itineraryList, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //todo make Itinerarybuilder"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itineraryList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //assertFalse(modelManager.equals(new ModelManager(attractionList, differentItineraryList, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String[] keywords \u003d MBS.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.updateFilteredAttractionList(new AttractionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, itineraryList, userPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        modelManager.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        differentUserPrefs.setAttractionListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, itineraryList, differentUserPrefs)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 14,
      "-": 97,
      "limkoonkiat": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAttractionListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItineraryListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "limkoonkiat": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AttractionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Street\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Mandai\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Road\", \"Mandai\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Mandai\", \"Way\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"ManDaI\", \"WaY\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"mAnDaI wAy\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Road\", \"Bob\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Road Bob\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Way\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice Way\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"WaY\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice WaY\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"A@Bx\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"A@Bx\").build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"A\", \"Bob\", \"A@Bob\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"A@Bob\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Way\", \"Alice@Way\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"Alice@Way\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"WaY\", \"Alice@WaY\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"Alice@WaY\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Whole email should match"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"@Way\", \"Alice@Wa\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"AliCe@WAy\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_locationContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Singapore\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"Singapore, Singapore\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Find command matches whole words, it would not be able to find France if it is \"France,\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Paris\", \"France\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"France , Paris\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"USA\", \"Netherlands\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"Netherlands , Amsterdam\").build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"NethErlands\", \"AmStErDaM\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"NetheRlAnds, AmstErdam\").build()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_openingHoursContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"1200-1300\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1200-1300\", \"-1300\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"123456789\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"6789\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"654987\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_priceRangeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"LOW\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"LOW\").build()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"MED\", \"MEDIUM\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"HIGH\", \"MED\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"HIGH\").build()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"loW\", \"MED\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"LOW\").build()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_ratingContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"1.1\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"2.1\", \"1.1\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"2.1\").build()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1.1\", \"1.6\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"warm\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String[] tags \u003d {\"warm\", \"cold\"};"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"warm\", \"cold\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"warm\", \"sexy\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(\"sexy\").build()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords does not work for tags as tags are case sensitive"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"WaRM\", \"CoLD\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_fieldDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withAddress(\"Alice\").build()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"ZOO@GMAIL.COM\").build()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withLocation(\"Alice\").build()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Mandai\", \"Drive\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withAddress(\"Marina Way\").build()));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"This\", \"is\", \"The\"));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withDescription(\"Big theme park\").build()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"zoo@gmail.com\"));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"USS@gmail.com\").build()));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Malaysia\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withLocation(\"Singapore\").build()));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1200-1300\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withOpeningHours(\"1000-1700\").build()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"987654321\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"HIGH\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withRating(\"1.2\").build()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"hot\"));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String[] tags \u003d {\"warm\", \"cold\"};"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 8,
      "peter-yeh": 171,
      "-": 51,
      "limkoonkiat": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AttractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class AttractionTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e attraction.getTags().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void isSameAttraction() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(MBS.isSameAttraction(MBS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.isSameAttraction(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withEmail(VALID_EMAIL_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withPhone(VALID_PHONE_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withAddress(VALID_ADDRESS_EIFFEL).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction mbsCopy \u003d new AttractionBuilder(MBS).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.equals(mbsCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(MBS.equals(MBS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(SUNTEC));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction editedSuntec \u003d new AttractionBuilder(SUNTEC).withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withPhone(VALID_PHONE_EIFFEL).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withAddress(VALID_ADDRESS_EIFFEL).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different opening hours -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withOpeningHours(VALID_OPENING_HOURS_EIFFEL).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different price range -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withPriceRange(VALID_PRICE_RANGE_EIFFEL).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withRating(VALID_RATING_EIFFEL).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different visited -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withVisited(VALID_VISITED_EIFFEL).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 34,
      "Robinho98": 5,
      "leeyorktat": 69,
      "limkoonkiat": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Singapore, Singapore\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"USA, California, San Francisco\")); // long location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/OpeningHoursTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class OpeningHoursTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpeningHours(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidOpeningHours_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidOpeningHours \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new OpeningHours(invalidOpeningHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidOpeningHours() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null openingHours"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e OpeningHours.isValidOpeningHours(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // blank openingHours"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"-2359\")); // missing opening time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"00002359\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"0000-\")); // missing closing time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"7am-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"333-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"3333-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-11pm\")); // invalid closing time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-240\")); // invalid closing time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-2400\")); // invalid closing time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1.30-2359\")); // dot in opening time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-11.59\")); // dot in closing time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"13 30-2359\")); // spaces in opening time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330- 23 59\")); // spaces in closing time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\" 1330-2359\")); // leading space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-2359 \")); // trailing space"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330--2359\")); // double \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"13-30-2359\")); // \u0027-\u0027 symbol in opening time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-23-59\")); // \u0027-\u0027 symbol in closing time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"0000-2359\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"2300-1000\")); //opening time can be more than closing time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/PriceRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class PriceRangeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PriceRange(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidPriceRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidPriceRange \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PriceRange(invalidPriceRange));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidPriceRange() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null price range"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PriceRange.isValidPriceRange(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid price ranges"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"low\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"average\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\" MEDIUM\")); // leading space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"MEDIUM \")); // trailing space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid price ranges"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"LOW\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"MEDIUM\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"HIGH\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/RatingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"5.1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"0\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\".5\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"4.50\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\" 0.5\")); // leading space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"0.5 \")); // trailing space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid price ranges"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0.0\")); // lowest rating"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5.0\")); // highest rating"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"2.5\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/UniqueAttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.BOTANIC_GARDENS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.AttractionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class UniqueAttractionListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final UniqueAttractionList uniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(uniqueAttractionList.contains(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(uniqueAttractionList.contains(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(BOTANIC_GARDENS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(uniqueAttractionList.contains(editedAttraction));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add_duplicateAttraction_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, () -\u003e uniqueAttractionList.add(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_nullTargetAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(null, BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_nullEditedAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_targetAttractionNotInList_throwsAttractionNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(AttractionNotFoundException.class, ()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionIsSameAttraction_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(BOTANIC_GARDENS)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, editedAttraction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(editedAttraction);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, SUNTEC);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionHasNonUniqueIdentity_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, SUNTEC));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_attractionDoesNotExist_throwsAttractionNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(AttractionNotFoundException.class, () -\u003e uniqueAttractionList.remove(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_existingAttraction_removesAttraction() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.remove(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniquePersonList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueAttractionList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_nullUniqueAttractionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttractions((UniqueAttractionList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_uniqueAttractionList_replacesOwnListWithProvidedUniqueAttractionList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttractions(expectedUniqueAttractionList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.setAttractions((List\u003cAttraction\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cAttraction\u003e attractionList \u003d Collections.singletonList(SUNTEC);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttractions(attractionList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniquePersonList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniquePersonList.add(SUNTEC);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueAttractionList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_listWithDuplicateAttractions_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cAttraction\u003e listWithDuplicateAttractions \u003d Arrays.asList(BOTANIC_GARDENS, BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttractions(listWithDuplicateAttractions));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "leeyorktat": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/VisitedTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class VisitedTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Visited(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_invalidVisited_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String invalidVisited \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Visited(invalidVisited));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void isValidVisited() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Visited.isValidVisited(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"True\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"False\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"TRuE\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"TRUE1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\" TRUE\")); // leading space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"TRUE \")); // trailing space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // valid price ranges"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"TRUE\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"FALSE\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\"World\u0027s first Gudetama themed cafe.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \"The park offers a haven for close to 3500 birds across 400 species.\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 36,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/BudgetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidBudget_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String invalidBudget \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Budget(invalidBudget));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidBudget() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null budget"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Budget.isValidBudget(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // blank budget"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid budget"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"-1\")); // non-positive value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"twenty\")); // non-numeric value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"2E.34\")); // non-numeric value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"$23\")); // non-numeric value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"1.2\")); // not enough decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"23.345\")); // too many decimal places"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid budget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"0\")); // zero value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"1660\")); // non-decimal value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"2000.57\")); // decimal value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/ItineraryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class ItineraryDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate firstDate \u003d new ItineraryDate(\"25-02-2020\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate secondDate \u003d new ItineraryDate(\"03-03-2020\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItineraryDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItineraryDate(invalidDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidItineraryDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItineraryDate.isValidDate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\" \")); //spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Invalid dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"31-11-2022\")); // Month with invalid day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"00-12-2020\")); // Invalid day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"32-12-2020\")); // Invalid day"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"5-10-2005\")); // Invalid day"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"04-00-2023\")); // Invalid month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"09-13-2010\")); // Invalid month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-2005\")); // Invalid month"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-5\")); // Invalid year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-15\")); // Invalid year"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-2005\")); // Invalid year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"29-02-2006\")); // Not leap year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12 02 2007\")); // Invalid format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12/02/2007\")); // Invalid format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"2001 12 20\")); // Invalid format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"30 04\")); // Invalid format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"27-08\")); // Invalid format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12 Jan\")); // Invalid format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"30 April 2013\")); // Invalid format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Valid dates"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(ItineraryDate.isValidDate(\"25-12-2017\")); // Valid format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(ItineraryDate.isValidDate(\"29-02-2024\")); // Leap year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void getLocalDate_validInput_correctResult() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate itineraryDate \u003d new ItineraryDate(\"28-02-2024\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(itineraryDate.getLocalDate(), LocalDate.parse(\"2024-02-28\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isBeforeItineraryDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(firstDate.isBefore(secondDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstDate.isBefore(firstDate));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isAfterItineraryDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(secondDate.isAfter(firstDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstDate.isAfter(firstDate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void daysBetweenItineraryDates() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(ItineraryDate.daysBetween(firstDate, secondDate), 8);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAttractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAttraction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class JsonAdaptedAttractionTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Sing@poreZ00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_OPENING_HOURS \u003d \"1-12\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_PRICE_RANGE \u003d \"low\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_RATING \u003d \"9\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_VISITED \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_NAME \u003d EIFFEL_TOWER.getName().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_PHONE \u003d EIFFEL_TOWER.getPhone().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_EMAIL \u003d EIFFEL_TOWER.getEmail().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_ADDRESS \u003d EIFFEL_TOWER.getAddress().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d EIFFEL_TOWER.getDescription().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_LOCATION \u003d EIFFEL_TOWER.getLocation().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_OPENING_HOURS \u003d EIFFEL_TOWER.getOpeningHours().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_PRICE_RANGE \u003d EIFFEL_TOWER.getPriceRange().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_RATING \u003d EIFFEL_TOWER.getRating().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_VISITED \u003d EIFFEL_TOWER.getVisited().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EIFFEL_TOWER.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_validAttractionDetails_returnsAttraction() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(EIFFEL_TOWER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(EIFFEL_TOWER, attraction.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(null, VALID_PHONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                null, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, null, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        INVALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, null, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, INVALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_LOCATION,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, INVALID_LOCATION,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, null,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        INVALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d OpeningHours.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                null, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OpeningHours.class.getSimpleName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidPriceRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_OPENING_HOURS, INVALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d PriceRange.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullPriceRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_OPENING_HOURS, null, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PriceRange.class.getSimpleName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, INVALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, null, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void toModelType_invalidVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, INVALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d Visited.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void toModelType_nullVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, null, VALID_TAGS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Visited.class.getSimpleName());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, invalidTags);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, attraction::toModelType);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 125,
      "Robinho98": 34,
      "-": 70,
      "limkoonkiat": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedItineraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAdaptedItineraryTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Tr!p\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"23-13-2019\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"32-06-2020\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // todo add to test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // private static final String VALID_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // private static final String VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // private static final String VALID_START_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // private static final String VALID_END_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAttractionListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.JURONG_BIRD_PARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAttractionListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTrackPadStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAttractionList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAttractionList\u003e readAttractionList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new JsonAttractionListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .readAttractionList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(readAttractionList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"notJsonFormatTrackPad.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_invalidAttractionTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"invalidAttractionTrackPad.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_invalidAndValidAttractionTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"invalidAndValidAttractionTrackPad.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAndSaveAttractionList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAttractionList.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList original \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage jsonAttractionListStorage \u003d new JsonAttractionListStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList readBack \u003d jsonAttractionListStorage.readAttractionList(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addAttraction(MBS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.removeAttraction(JURONG_BIRD_PARK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonAttractionListStorage.readAttractionList(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addAttraction(EIFFEL_TOWER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonAttractionListStorage.readAttractionList().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList_nullAttractionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAttractionList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves {@code attractionList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void saveAttractionList(ReadOnlyAttractionList attractionList, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new JsonAttractionListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .saveAttractionList(attractionList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAttractionList(new AttractionList(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonItineraryListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonItineraryListStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo add stuff"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.TypicalAttractions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonSerializableAttractionListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTrackPadTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path TYPICAL_ATTRACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAttractionsTrackPad.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path INVALID_ATTRACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAttractionTrackPad.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path DUPLICATE_ATTRACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAttractionTrackPad.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_typicalAttractionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ATTRACTIONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList typicalAttractionsAttractionList \u003d TypicalAttractions.getTypicalAttractionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(attractionListFromFile, typicalAttractionsAttractionList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidAttractionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ATTRACTION_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_duplicateAttractions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ATTRACTION_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAttractionList.MESSAGE_DUPLICATE_ATTRACTION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 35,
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableItineraryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonSerializableItineraryListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo add stuff"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"attractionlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"itinerarylist.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d new JsonAttractionListStorage(getTempFilePath(\"al\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d new JsonItineraryListStorage(getTempFilePath(\"il\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storageManager \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void trackPadReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         * {@link JsonAttractionListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAttractionListStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList original \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storageManager.saveAttractionList(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList retrieved \u003d storageManager.readAttractionList().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void getTrackPadFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertNotNull(storageManager.getAttractionListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "-": 54,
      "limkoonkiat": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class to help with building Attraction objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Singapore Zoo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"62693411\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"zoo@example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"80 Mandai Lake Rd, 729826\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Set in a rainforest environment, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"Singapore Zoo\u0027s world-famous \\\"Open Concept” offers the opportunity to \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"experience and be inspired by the wonders of nature.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Singapore, Singapore\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_OPENING_HOURS \u003d \"1000-1800\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_PRICE_RANGE \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"4.5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String DEFAULT_VISITED \u003d \"TRUE\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private OpeningHours openingHours;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private PriceRange priceRange;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Visited visited;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionBuilder} with the default details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d new OpeningHours(DEFAULT_OPENING_HOURS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d new PriceRange(DEFAULT_PRICE_RANGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d new Visited(DEFAULT_VISITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Initializes the AttractionBuilder with the data of {@code attractionToCopy}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder(Attraction attractionToCopy) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name \u003d attractionToCopy.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        phone \u003d attractionToCopy.getPhone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        email \u003d attractionToCopy.getEmail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        address \u003d attractionToCopy.getAddress();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d attractionToCopy.getDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d attractionToCopy.getLocation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d attractionToCopy.getOpeningHours();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d attractionToCopy.getPriceRange();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d attractionToCopy.getRating();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d attractionToCopy.getVisited();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(attractionToCopy.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Name} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPhone() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.phone \u003d new Phone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withEmail() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.email \u003d new Email();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withAddress() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.address \u003d new Address();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withDescription() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Location} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withOpeningHours() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d new PriceRange(priceRange);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPriceRange() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withRating() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d new Rating();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public AttractionBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d new Visited(visited);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public AttractionBuilder withVisited() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d new Visited();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Initializes a new attraction."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @return a new Attraction."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction build() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(name, phone, email, address, description, location,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 191,
      "Robinho98": 24,
      "peter-yeh": 16,
      "limkoonkiat": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building AttractionList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *     {@code AttractionList al \u003d new AttractionListBuilder().withAttraction(\"USS\", \"MBS\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionList attractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder(AttractionList attractionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList \u003d attractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a new {@code Attraction} to the {@code AttractionList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder withAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class for Attraction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns an add command string for adding the {@code attraction}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static String getAddCommand(Attraction attraction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return AddAttractionCommand.COMMAND_WORD + \" \" + getAttractionDetails(attraction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the part of command string for the given {@code attraction}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static String getAttractionDetails(Attraction attraction) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_NAME + attraction.getName().fullName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_PHONE + attraction.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_EMAIL + attraction.getEmail().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_ADDRESS + attraction.getAddress().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + attraction.getDescription().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_LOCATION + attraction.getLocation().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_OPENING_HOURS + attraction.getOpeningHours().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_PRICE_RANGE + attraction.getPriceRange().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_RATING + attraction.getRating().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        sb.append(PREFIX_VISITED + attraction.getVisited().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attraction.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the part of command string for the given {@code EditAttractionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static String getEditAttractionDescriptorDetails(EditAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION).append(location.value).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getOpeningHours().ifPresent(openingHours -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_OPENING_HOURS).append(openingHours.value).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getPriceRange().ifPresent(priceRange -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_PRICE_RANGE).append(priceRange.value).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.getVisited().ifPresent(visited -\u003e sb.append(PREFIX_VISITED).append(visited.value).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 32,
      "Robinho98": 3,
      "-": 45,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAttractionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class to help with building EditAttractionDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private EditAttractionDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder(EditAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.descriptor \u003d new EditAttractionDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns an {@code EditAttractionDescriptor} with fields containing {@code attraction}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder(Attraction attraction) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setName(attraction.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPhone(attraction.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setEmail(attraction.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setAddress(attraction.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setDescription(attraction.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setLocation(attraction.getLocation());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setOpeningHours(attraction.getOpeningHours());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPriceRange(attraction.getPriceRange());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setRating(attraction.getRating());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.setVisited(attraction.getVisited());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setTags(attraction.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Location} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditAttractionDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Opening Hours} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setOpeningHours(new OpeningHours(openingHours));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Price Range} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPriceRange(new PriceRange(priceRange));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public EditAttractionDescriptorBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.setVisited(new Visited(visited));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditAttractionDescriptor}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptor build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 125,
      "Robinho98": 10,
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryAttractionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * A utility class to help with building Itinerary Attraction objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Depends on AttractionBuilder class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryAttractionBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction DEFAULT_ATTRACTION \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"1300\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"1500\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Attraction attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private ItineraryTime startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private ItineraryTime endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Creates a {@code ItineraryAttractionBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        attraction \u003d DEFAULT_ATTRACTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d new ItineraryTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d new ItineraryTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Initializes the ItineraryAttractionBuilder with the data of {@code iaToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder(ItineraryAttraction iaToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        attraction \u003d iaToCopy.getAttraction();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d iaToCopy.getStartTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d iaToCopy.getEndTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Attraction} of the {@code ItineraryAttraction} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code startTime} of the {@code ItineraryAttraction} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startTime \u003d new ItineraryTime(startTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code endTime} of the {@code ItineraryAttraction} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endTime \u003d new ItineraryTime(endTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Initializes a new itinerary attraction."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @return a new Attraction."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttraction build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryAttraction(attraction, startTime, endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 68,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building Itinerary objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Singapore Trip\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Explore the wonders of Singapore!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"12-12-2020\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"15-12-2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_BUDGET \u003d \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryDate startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryDate endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private List\u003cDay\u003e days;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a {@code ItineraryBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d new ItineraryDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d new ItineraryDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d new Budget(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d ItineraryDate.daysBetween(startDate, endDate); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            days.add(new Day(Integer.toString(i)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes the ItineraryBuilder with the data of {@code itineraryToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder(Itinerary itineraryToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d itineraryToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d itineraryToCopy.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d itineraryToCopy.getStartDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d itineraryToCopy.getEndDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d itineraryToCopy.getBudget();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d new ArrayList\u003c\u003e(itineraryToCopy.getDays());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Name} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Description} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Description} of the {@code Itinerary} that we are building to empty string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withDescription() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Budget} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withBudget(String budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Budget} of the {@code Itinerary} that we are building to empty string."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withBudget() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d new Budget();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code startDate} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d new ItineraryDate(startDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int numberOfDays \u003d ItineraryDate.daysBetween(this.startDate, endDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cDay\u003e newDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(days.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(new Day(Integer.toString(i + 1)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d newDays;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code endDate} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d new ItineraryDate(endDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int numberOfDays \u003d ItineraryDate.daysBetween(startDate, this.endDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cDay\u003e newDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(days.get(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(new Day(Integer.toString(i + 1)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d newDays;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an {@code itineraryAttraction} to the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withItineraryAttraction(ItineraryAttraction itineraryAttraction, Index day) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.days.get(day.getZeroBased()).addItineraryAttraction(itineraryAttraction);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes a new itinerary."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return a new Itinerary."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary build() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Itinerary(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building ItineraryList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *     {@code ItineraryList il \u003d new ItineraryListBuilder().withItinerary(todo add example).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryList itineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder(ItineraryList itineraryList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList \u003d itineraryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a new {@code Itinerary} to the {@code ItineraryList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder withItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class for Itinerary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an add itinerary command string for adding the {@code itinerary}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getAddItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return AddItineraryCommand.COMMAND_WORD + \" \" + getItineraryDetails(itinerary);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the part of command string for the given {@code itinerary}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getItineraryDetails(Itinerary itinerary) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_NAME + itinerary.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + itinerary.getDescription().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_START_DATE + itinerary.getStartDate().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_END_DATE + itinerary.getEndDate().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //todo add more depending on final implementation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // * Returns the part of command string for the given {@code EditItineraryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // todo add when edit itinerary command is up"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // public static String getEditItineraryDescriptorDetails() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //     return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the middle index of the attraction in the {@code model}\u0027s attraction list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAttractionList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the last index of the attraction in the {@code model}\u0027s attraction list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the attraction in the {@code model}\u0027s attraction list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Attraction getAttraction(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return model.getFilteredAttractionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the itinerary in the {@code model}\u0027s itinerary list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Itinerary getItinerary(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getFilteredItineraryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "-": 48,
      "limkoonkiat": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAttractions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * A utility class containing a list of {@code Attraction} objects to be used in tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class TypicalAttractions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction JURONG_BIRD_PARK \u003d new AttractionBuilder().withName(\"JurongBirdPark\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"2 Jurong Hill\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(\"birdpark@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The park offers a haven for close to 3500 birds across 400 species.\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withTags(\"animals\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction NIGHT_SAFARI \u003d new AttractionBuilder().withName(\"Night Safari\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(\"nightsafari@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The world\u0027s first nocturnal zoo.\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1800-2300\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withTags(\"animals\", \"night\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction SINGAPORE_ZOO \u003d new AttractionBuilder().withName(\"Singapore Zoo\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"singaporezoo@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction RIVER_SAFARI \u003d new AttractionBuilder().withName(\"River Safari\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"riversafari@example.com\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"A river-themed zoo and aquarium in Singapore.\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withTags(\"panda\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction ORCHARD_ROAD \u003d new AttractionBuilder().withName(\"Orchard Road\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"orchardroad@example.com\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withAddress(\"Orchard Road\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Orchard Road is Singapore’s retail heart, with discount outlets, \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"department stores and upscale boutiques, alongside luxury hotels.\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction BOTANIC_GARDENS \u003d new AttractionBuilder().withName(\"Botanic Gardens\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"botanicgardens@example.com\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"1 Cluny Rd\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The only tropical garden to be honoured as a UNESCO World Heritage Site.\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction JURONG_LAKE \u003d new AttractionBuilder().withName(\"Jurong Lake\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"juronglake@example.com\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withAddress(\"Jurong\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Sprawling park around a lake \u0026 swamp forest with a boardwalk, \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"playgrounds, a dog run \u0026 water sports.\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Attraction NOTRE_DAME \u003d new AttractionBuilder().withName(\"Cathedrale Notre Dame de Paris\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEmail()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"6 Parvis Notre-Dame - Pl. Jean-Paul II, 75004\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Attraction ESPLANADE \u003d new AttractionBuilder().withName(\"Esplanade\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"8482424\").withEmail(\"esplanade@example.com\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"1 Esplanade Dr\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Esplanade – Theatres on the Bay is a performing arts centre \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"located in Downtown Core near the mouth of the Singapore River.\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-2200\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange(\"HIGH\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating(\"4.0\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Attraction SUNTEC \u003d new AttractionBuilder().withName(\"Suntec City\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"8482131\").withEmail(\"suntec@example.com\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"3 Temasek Blvd\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Suntec City is a major mixed-use development located in  \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"Centre, a subzone of the Downtown Core in Singapore.\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-2000\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange(\"LOW\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating(\"4.5\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Attraction LOUVRE \u003d new AttractionBuilder().withName(\"Louvre Museum\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone(\"330140205317\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEmail(\"info@louvre.fr\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"Rue de Rivoli, 75001\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"The Louvre, or the Louvre Museum, is the world\u0027s largest art museum and a\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" historic monument in Paris, France.\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withOpeningHours(\"0900-1800\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPriceRange(\"MEDIUM\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withRating(\"4.7\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withVisited(\"FALSE\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Manually added - Attraction\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Attraction EIFFEL_TOWER \u003d new AttractionBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_EIFFEL).withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_EIFFEL).withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withRating(VALID_RATING_EIFFEL).withVisited(VALID_VISITED_EIFFEL).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction MBS \u003d new AttractionBuilder().withName(VALID_NAME_MBS).withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MBS).withLocation(VALID_LOCATION_MBS)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_MBS).withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withRating(VALID_RATING_MBS).withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private TypicalAttractions() {} // prevents instantiation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an {@code AttractionList} with all the typical attractions."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static AttractionList getTypicalAttractionList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList al \u003d new AttractionList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        for (Attraction attraction : getTypicalAttractions()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            al.addAttraction(attraction);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static List\u003cAttraction\u003e getTypicalAttractions() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JURONG_BIRD_PARK, NIGHT_SAFARI, SINGAPORE_ZOO, RIVER_SAFARI, ORCHARD_ROAD,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                BOTANIC_GARDENS, JURONG_LAKE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 82,
      "yuxuanxc": 68,
      "peter-yeh": 1,
      "limkoonkiat": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItineraries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.LOUVRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.NIGHT_SAFARI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.NOTRE_DAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.RIVER_SAFARI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SINGAPORE_ZOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class containing a list of {@code Itinerary} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TypicalItineraries {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo add more itineraries"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Itinerary SINGAPORE_ZOOS \u003d new ItineraryBuilder().withName(\"Singapore Zoos\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"Rediscover our wildlife parks!\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withStartDate(\"06-07-2019\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEndDate(\"07-07-2019\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withBudget(\"500\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            // todo might need more typical attractions from different countries"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(SINGAPORE_ZOO)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1700\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(NIGHT_SAFARI)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1900\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"2300\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(RIVER_SAFARI)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1200\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1800\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_SECOND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Itinerary PARIS_TRIP \u003d new ItineraryBuilder().withName(\"Paris Trip\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"Visit the City of Light\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withStartDate(\"21-12-2020\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEndDate(\"26-12-2020\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withBudget()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(EIFFEL_TOWER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"0900\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1500\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(LOUVRE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1100\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1800\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_SECOND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(NOTRE_DAME)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1200\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1500\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_THIRD)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private TypicalItineraries() {} // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an {@code ItineraryList} with all the typical itineraries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ItineraryList getTypicalItineraryList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList il \u003d new ItineraryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Itinerary itinerary : getTypicalItineraries()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            il.addItinerary(itinerary);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return il;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static List\u003cItinerary\u003e getTypicalItineraries() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SINGAPORE_ZOOS, PARIS_TRIP));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 87
    }
  }
]
