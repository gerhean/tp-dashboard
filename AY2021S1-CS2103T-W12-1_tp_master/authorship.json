[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Covigent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-1/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 3,
      "itssodium": 8
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    toolVersion \u003d \u00278.36.2\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    String jUnitVersion \u003d \u00275.7.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    testImplementation group: \u0027org.mockito\u0027, name: \u0027mockito-core\u0027, version: \u00273.5.13\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    archiveFileName \u003d \u0027covigent.jar\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "chiamyunqing": 4,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "We are team CS2103T-W12-1 based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### Wee Yee Hong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cimg src\u003d\"images/w-yeehong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](https://github.com/w-yeehong)][[Portfolio](team/w-yeehong.md)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Responsibilities: Project Coordination"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "### Ge Wai Lok"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003cimg src\u003d\"images/raymondge.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](http://github.com/raymondge)][[Portfolio](team/raymondge.md)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "### Noorul Azlina"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003cimg src\u003d\"images/itssodium.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](http://github.com/itssodium)][[Portfolio](team/itssodium.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### Chiam Yun Qing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cimg src\u003d\"images/chiamyunqing.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](https://github.com/chiamyunqing)][[Portfolio](team/chiamyunqing.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### Lee Ming De"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cimg src\u003d\"images/leemingde.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](http://github.com/LeeMingDe)][[Portfolio](team/leemingde.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Responsibilities: Integration (version the code, maintain the code repository and integrate various parts into a software)"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "LeeMingDe": 3,
      "chiamyunqing": 4,
      "-": 30,
      "raymondge": 5,
      "itssodium": 2
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to create a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "title: Covigent - Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. [Preface](#1-preface)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [Setting Up](#2-setting-up)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [Design](#3-design)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.1  [Architecture: High Level View](#31-architecture-high-level-view)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.2  [UI Component](#32-ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.3  [Logic Component](#33-logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.4  [Model Component](#34-model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.5  [Storage Component](#35-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.6  [Commons Component](#36-commons-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " 1. [Implementation](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    4.1  [Patient Feature](#41-patient-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.1.1 [Overview](#411-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          4.1.2 [Implementation](#412-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          4.1.3 [Design Considerations](#413-design-considerations)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.1.4 [Create, Read, Update, Delete](#414-create-read-update-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.1.5 [Search](#415-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    4.2  [Room Feature](#42-room-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          4.2.1 [Overview](#421-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.2.2 [Implementation](#422-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.2.3 [Design Considerations](#423-design-considerations)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.2.4 [Create, Read, Update](#424-create-read-update)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    4.3  [Task Feature](#43-task-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          4.3.1 [Overview](#431-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          4.3.2 [Implementation](#432-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          4.3.3 [Design Considerations](#433-design-considerations)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.3.4 [Create, Read, Update, Delete](#434-create-read-update-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          4.3.5 [Search](#435-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    4.4  [Logging Feature](#44-logging-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    4.5  [Configuration Feature](#45-configuration-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " 1. [Planned Features](#5-planned-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " 1. [Documentation](#6-documentation)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " 1. [Appendix](#7-appendix)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    A1. [Product Scope](#a1-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    A2. [User Stories](#a2-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    A3. [Use Cases](#a3-use-cases)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    A4. [Non-Functional Requirements](#a4-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    A5. [Glossary](#a5-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    A6. [Instructions for Manual Testing](#a6-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "## 1. Preface"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop management application that helps to keep track of the information of quarantined individuals and the tasks to be done by the staff of a small hotel that has been converted to a quarantine facility."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The Developer Guide for Covigent v1.4 is designed to illustrate and identify the high level architecture systems used to design and implement the Covigent application. The document contains an overall view of the system hierarchy, logical views of the system components, and a process view of the system’s communication. We hope that this Developer Guide serves you well in understanding and maintaining the Covigent application. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The link to the GitHub repository can be found [here](https://github.com/AY2021S1-CS2103T-W12-1/tp)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " _Written by: Yun Qing_ "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This section describes some noteworthy details on how Covigent is designed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.1 Architecture: High Level View"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/ArchitectureDiagram.png\" width\u003d\"450\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 1. Architecture diagram of Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of Covigent. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W12-1/tp/tree/master/docs/diagrams/plantuml) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[**`Commons`**](#36-commons-component) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* [**`UI`**](#32-ui-component): The UI of the App."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* [**`Logic`**](#33-logic-component): The command executor."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* [**`Model`**](#34-model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* [**`Storage`**](#35-storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/LogicClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 2. Class diagram of Logic component\u003c/i\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `deletepatient Alex Yeoh`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/ArchitectureSequenceDiagram.png\" width\u003d\"574\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 3. Sequence diagram of deletepatient alex command\u003c/i\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.2 UI Component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The `UI` component displays information for the users based on user\u0027s input. The GUI to displayed is based on the return from logic."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "It uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Consists of a `MainWindow` that is made up of many different parts that inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The `MainWindow` is made up of "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* A `PatientListPanel` that displays the list of patients. The layout is defined by `PatientCard` and `PatientDetailsPanel`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `RoomListPanel` that displays the list of rooms. The layout is defined by `RoomCard` and `RoomDetailPanel`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `RoomTaskListPanel` that displays the list of tasks. The layout is defined by `TaskCard`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `HelpWindow` that displays the link to the help page."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `CommandBox` that displays the area for command input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `ResultDisplay` that displays the robot response."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* A `StatusBarFooter` that displays the status bar footer.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Below is a class diagram for `Ui`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/UiClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 4. Class diagram of Ui component\u003c/i\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The `UI` component listens for changes to `Model` data so that the `UI` can be updated with the modified data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Below shows the interaction with `Model`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/UiClassDiagram1.png\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 5. Structure of Ui component\u003c/i\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.3 Logic Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The `Logic` component is the \"brains\" of Covigent. While the `Ui` defines the GUI and `Model` defines in-memory data,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "the `Logic` component does most of the heavy-lifting in terms of deciding what to change within the `Model` and what to "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "return to the `Ui`.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The diagram below shows the structure of the `Logic` component and how it interacts with its internal parts."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/LogicClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 6. Structure of the Logic Component\u003c/i\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. Once a user input is obtained from the GUI, `Logic` uses the `CovigentAppParser` class to parse the users\u0027 commands"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "and return a `Command` object."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. The `Command` is executed by `LogicManager`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. Depending on the command input by the user, it may mutate the `Model`, such as adding a new patient, room or task."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` that is returned to the `Ui`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. These `CommandResults` can instruct the `Ui` to perform certain actions, such as displaying help or error messages to the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Shown below is the Sequence Diagram within the `Logic` component for the API call: `execute(\"deletepatient alex\")`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/DeletePatientSequenceDiagram.png\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 7. Interactions inside the Logic Component for the deletepatient alex Command\u003c/i\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeletePatientCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by: Ming De_"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "### 3.4 Model Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The `Model` API acts as a facade that handles interaction between different kinds of data in Covigent. These data include user\u0027s preferences, patient records and room list. The `Model` API exposes the methods that allow the logic component to utilise to perform retrieving and updating of data."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The `Model` component,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * stores a `PatientRecords` object that stores the data of all the patients. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * stores a `RoomList` object that stores the data of all the rooms."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * stores a `RoomTaskRecords` object that stores all the `RoomTaskAssociation` objects, which keep track of the room that a task belongs to."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * exposes unmodifiable `ObservableList\u003cPatient\u003e`, `ObservableList\u003cRoom\u003e` and `ObservableList\u003cRoomTaskAssociation\u003e` which can be observed. This means that the UI can be bound to the lists so that the UI automatically updates when data in the lists changes."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * does not depend on any of the three components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The concrete class `ModelManager` implements `Model` interface and manages the data for Covigent. `ModelManager` contains `UserPrefs`, `PatientRecords`, `RoomList` and `RoomTaskRecords`. These classes manage the data related to their specific features."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Below is a class diagram for `ModelManager`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/ModelClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 7. Class Diagram for Model Component\u003c/i\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The breakdown for each type of data in `ModelManager`, which include `PatientRecords`, `RoomList` and `RoomTaskRecords`, can be found below."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The `PatientRecords` class is in charge of maintaining the data of the patients and in ensuring the uniqueness of patients according to their names. Below is a class diagram for `PatientRecords`. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/PatientRecordsClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 8. Class Diagram for PatientRecords\u003c/i\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `PatientRecords` class implements the interface ReadOnlyList\u0026lt;Patient\u0026gt; but due to a limitation of PlantUML, the interface is reflected as simply `ReadOnlyList`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The `RoomList` class is in charge of maintaining the data in the rooms and in ensuring the uniqueness of rooms according to the room numbers. As each room stores the data of the patient who resides in the room and the tasks meant for the room, it incorporates data from both `Patient` and `RoomTasks`. `RoomTasks` class is in charge of maintaining the data of the tasks in a room. The full details of `Patient` can be found in the previous class diagram for `PatientRecords` so it is no longer reflected in the class diagram for `RoomList`. The class diagram for `RoomList` is shown below.  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cimg src\u003d\"images/dg/RoomListClassDiagram.png\" width\u003d\"350\" height\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 9. Class Diagram for RoomList\u003c/i\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `RoomList` class implements the interface ReadOnlyList \u0026lt;Room\u0026gt; and the `RoomTasks` class implements the interface ReadOnlyList\u0026lt;Task\u0026gt;. However, due to a limitation of PlantUML, the interface is reflected as simply `ReadOnlyList`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The `RoomTaskRecords` class is in charge of maintaining the data regarding the association of a task in a room. The `RoomTaskAssociation` class acts as an association class that ties `Task` and `Room` together so that the `Task` object does not need to know of the details of `Room` and we are still able to identify the room number that `Task` belongs to and its index in `Room`. The class diagram for `RoomTaskRecords` is shown below."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cimg src\u003d\"images/dg/RoomTaskRecordsClassDiagrams.png\" width\u003d\"350\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 10. Class Diagram for RoomTaskRecords\u003c/i\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `RoomTaskRecords` class implements the interface ReadOnlyList \u0026lt;RoomTaskAssociation\u0026gt;. However, due to a limitation of PlantUML, the interface is reflected as simply `ReadOnlyList`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " _Written by: Yun Qing_ "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itssodium"
        },
        "content": "### 3.5 Storage Component"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/UML_Storage_Diagram.png\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 11. Structure of the Storage Component\u003c/i\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W12-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The `Storage` API handles the reading and writing of data in Json format, enabling Covigent to remember information stored by user even when the application is closed. The Storage API behaves like a façade by handling the storage classes and interfaces."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The `Storage` interface class diagram is shown below, and as it can be seen it inherits from specific storage interfaces."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  *\tSaves `UserPref` objects in Json format "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  *\tReads `UserPred` objects in Json format"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  *\tSaves `RoomRecords` and `PatientRecords` data in json format "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  *\tReads `RoomRecords` and `PatientRecords` data in json format "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The information of the `Patient` and `Room` feature of Covigent is stored locally in the Json format. This is done by adapting the Patient and Room feature into JsonSerializablePatientRecords and JsonSerializableRoomRecords respectively."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The class diagram for StorageManager is shown below"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/dg/UML_Diagram_StorageManager.png\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ci\u003eFigure 12. Structure of the StorageManager Component\u003c/i\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The information of the `Patient` and `Room` feature of Covigent is stored locally in the Json format. This is done by adapting the Patient and Room feature into JsonSerializablePatientRecords and JsonSerializableRoomRecords respectively."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The class diagrams for the above stated adapted classes are shown below"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     \u003cimg src\u003d\"images/dg/JsonSerializableRoomRecords.png\"\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     \u003cbr /\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     \u003ci\u003eFigure 13. Structure of the JsonSerializableRoomRecords\u003c/i\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " \u003c/p\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "itssodium"
        },
        "content": " "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cimg src\u003d\"images/dg/JsonSerializablePatientRecords.png\" width\u003d\"350\" height\u003d\"250\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 14. Structure of the JsonSerializablePatientRecords\u003c/i\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "itssodium"
        },
        "content": " _Written by: Noorul Azlina_"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.6 Commons Component"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section describes some noteworthy details on how [Patient](#41-patient-feature), [Room](#42-room-feature) and [Task](#43-task-feature) features are implemented."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 4.1 Patient Feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.1.1 Overview"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The patient feature in Covigent allows hotel staff to store important information about the individuals that are quarantined in the hotels. Some of these important dynamic information include temperature and comment regarding the patient. To fully understand the patient feature, it is important to learn about the [implementation](#412-implementation) and [design considerations](#413-design-considerations) of the patient object before looking at the possible [commands](#414-create-read-update-delete) that can operate on the patient object. A patient is meant to be allocated to a room in the facility, hence tying the patient feature with the room feature together."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.1.2 Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "A `Patient` object in Covigent contains the following attributes, which is also reflected in Figure 15:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Name"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Temperature"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. PeriodOfStay"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Age"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Phone"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Comment  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Each of the attribute is a stand-alone class on its own."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/PatientClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 15. Class Diagram for Patient\u003c/i\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.1.3 Design Considerations "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Aspect: Encapsulation of fields for `Patient` object**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Option 1: Using primitive data types for `Temperature`, `Age` and `Comment` classes"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Classes like `Temperature`, `Age` and `Comment` can be easily treated as primitive data types including double and string. However, this option goes against the spirit of OOP. Furthermore, it does not align to the original design of AddressBook3, which Covigent was morphed from, in which `Name` and `Phone` attributes were abstracted out as separate classes. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Option 2: Encapsulate constituent patient attributes in their own classes"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This option increases OOP and is aligned to the original design of AddressBook3. In addition, this design has proven itself to be extensible in the long run and allows for adjustments to `Patient` attributes easily. For example, when setting the valid temperature range as input for `Temperature`, only the `Temperature` class needs to change, which demonstrates the essence of the single responsibility principle. This allows for better understanding and maintenance of our code base in the future."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Aspect: Decision on the uniqueness of `Patient` object**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Option 1: Uniqueness is identified by name, age and phone"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Originally, we intended to define two `Patient` to be equals if they have the same `Name`, `Age` and `Phone`. However, such a design will make it difficult for users of Covigent as they will have to key in all these fields when executing `EditPatientCommand` and `DeletePatientCommand` in order for Covigent to uniquely identify the `Patient` to manipulate. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Option 2: Uniqueness is identified by name"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Keeping in mind the ease of usage of Covigent for users, we chose to identify `Patient` uniquely by `Name` only. As such, when users need to manipulate the data of a `Patient`, all they need to input is the `Name`. Furthermore, we believes that since Covigent is used by small hotels, there is a very low chance of two patients having the same names."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "##### Features related to Patient"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Having looked at the design of `Patient`, we can now explore the possible features related to `Patient`. In particular, our commands support [create, read, update, delete](#414-create-read-update-delete) and [search](#415-search). "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The features comprise of five commands namely,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `AddPatientCommand` - Adding patients"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `ListPatientCommand` - Listing all the patients"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `EditPatientCommand` - Editing patients"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `DeletePatientCommand` - Deleting patients"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `SearchPatientCommand`- Searching for patients"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by Yun Qing_"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.1.4 Create, Read, Update, Delete"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "In this section, we will cover the implementation of the manipulation of the `Patient` data. The commands that allow creating, reading, updating and deleting of `Patient` include `AddPatientCommand`, `ListPatientCommand`, `EditPatientCommand` and `DeletePatientCommand`. "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "As the `Patient` data are stored in `UniquePatientList`, which ensures the uniqueness of `Patient`, the actual manipulation of the `Patient` data is made in `UniquePatientList` class."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Some of the significant methods within `UniquePatientList` class that allows the manipulation of the `Patient` data are shown below:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `UniquePatientList#add(Patient toAdd)` - Adds a `Patient` to `UniquePatientList`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `UniquePatientList#setPatient(Patient target, Patient editedPatient)` - Edits the attributes of `Patient`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `UniquePatientList#remove(Patient toRemove)` - Deletes a `Patient` from `UniquePatientList`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `UniquePatientList#asUnmodifiableObservableList()` - Returns an observable list of `Patient`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `UniquePatientList#getPatientWithName(Name name)` - Returns the `Patient` with the given `Name` if the `Patient` object exists in `UniquePatientList`. Since `Name` is an identifier of a `Patient`, this method is used in `EditPatientCommand` and `DeletePatientCommand` to modify the `Patient` or check if the `Patient` to be deleted exists."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "These methods in `UniquePatientList` class support the corresponding methods in the facade classes `PatientRecords` and `ModelManager`. In particular, the `Model` interface exposes the methods `Model#addPatient(Patient patient)`, `Model#setPatient(Patient target, Patient editedPatient)`, `Model#deletePatient(Patient target)`, `Model#getPatientWithName(Name name)` and `Model#getFilteredPatientList()`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "For brevity\u0027s sake, we will only illustrate the implementation of 2 specific commands - `AddPatientCommand` and `EditPatientCommand`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Implementation of AddPatientCommand**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The following is a detailed explanation of the operations that `AddPatientCommand` performs."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step 1.** The user executes `addpatient [input all attributes of Patient]` command to add a patient to Covigent. An `AddPatientCommandParser` object is created and the `AddPatientCommandParser#parse(String args)` method is called, which helps to parse the different attributes of `Patient`. The parse method returns a new `AddPatientCommand` object and the `AddPatientCommand` object stores the `Patient` to be added."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step 2.** The `Patient` to be added is then searched through `UniquePatientList#internalList`using the `Model#hasPatient(Patient patient)` method to check if the patient already exists. If the patient already exists, a `CommandException` object will be thrown with an error message."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step 3.** Through `Model#addPatient(Patient toAdd)`, the `Patient` will be added to `UniquePatientList`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step 4.** A success message with the new patient details will be appended with the `AddPatientCommand#MESSAGE_SUCCESS` constant. A new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The sequence diagram for a successful execution of `AddPatientCommand` can be found below."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/AddPatientSequenceDiagram.png\"\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 16. Sequence Diagram for AddPatientCommand\u003c/i\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Due to space limitation in PlantUML diagram, the addpatient command example given in the sequence diagram only consists of two patient attributes, name and age."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by Yun Qing_"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Implementation of EditPatientCommand**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The following is a detailed explanation of the operations that `EditPatientCommand` performs."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 1.** The `EditPatientCommand#execute(Model model)` method is executed and it checks if the `Name` defined when instantiating"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`EditPatientCommand(Name patientToBeEdited, EditPatientDescriptor editPatientDescriptor)` is valid. The `EditPatientDescriptor` holds"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "the edited information of the `Patient`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 2.** A new `Patient` with the updated values will be created and the patient is then searched through `UniquePatientList#internalList`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "using the `Model#hasPatient(Patient patient)` method to check if the patient already exists. If the patient already exists,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`CommandException` will be thrown with an error message."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 3.** The newly created `Patient` will replace the existing patient object through the `Model#setPatient(Patient target, Patient editedPatient)`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "method."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 4.** A success message with the edited patient will be appended with the `EditPatientCommand#MESSAGE_EDIT_PATIENT_SUCCESS` constant. A "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Ming De_"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.1.5 Search"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The following is a detailed explanation of the operations that `SearchPatientCommand` performs."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 1.** The `SearchPatientCommand#execute(Model model)` method is executed and checks the `criteriaToSearch` via `confirmCriteria(SearchPatientDescriptor searchPatientDescriptor)`. "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The `SearchPatientDescriptor` holds the `name` or `temperatureRange` of the Command."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 2.** If the `criteriaToSearch` is `SearchCriteria.CRITERIA_NOT_FOUND`, `CommandException` will be thrown with an error message."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 3.** If the `criteriaToSearch` is `SearchCriteria.CRITERIA_IS_NAME`, we update the `Model`\u0027s `FilteredPatientList` Predicate via `updateNamePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor)`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Then `findPatientWithName(SearchPatientDescriptor searchPatientDescriptor, List\u003cPatient\u003e patientList)` will go through `Model`\u0027s `FilteredPatientList`, if no patient is found, `CommandException` will be thrown with an error message. If there is at least one patient found, a new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 4.** If the `criteriaToSearch` is `CRITERIA_IS_TEMPERATURE`, we update the `Model`\u0027s `FilteredPatientList` Predicate via `updateTemperaturePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor)`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Then `findPatientWithTemperature(SearchPatientDescriptor searchPatientDescriptor, List\u003cPatient\u003e patientList)` will go through `Model`\u0027s `FilteredPatientList`, if no patient is found, `CommandException` will be thrown with an error message. If there is at least one patient found, a new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 5.** If the `criteriaToSearch` is `TOO_MANY_CRITERIA` A new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "raymondge"
        },
        "content": "method."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by Wai Lok_"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 4.2 Room Feature"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "itssodium"
        },
        "content": "#### 4.2.1 Overview"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The application is able to track the room details. It keep tracks of the whether a room is occupied and the patient inside the room if it is occupied. "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "It also keeps track of the tasks assigned to a specific room. Hence, there is a need to represent the Room List as a list of Rooms on which the application can perform read and update operations."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.2.2 Implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The class diagram for RoomList is shown below."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cimg src\u003d\"images/dg/UML_RoomFeature.png\"\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003ci\u003eFigure 17. Class diagram for RoomList\u003c/i\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "From the diagram above, the `RoomList` contains of one `UniqueRoomList`. This `UniqueRoomList` is a wrapper class around the `RoomList`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "which contains an ObservableList of `Patient` and PriorityQueue of `Patient`. The `RoomList` can contain from about 1 to 500 rooms."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Each Room contains the following member attributes, all of which are non-nullable attributes:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. **roomNumber**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This gives the room number of the Room object"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. **isOccupied**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This gives the information of whether the Room is occupied or not. If there is a `Patient` inside the `Room`, then the isOccupied is true, else false"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. **patient**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This gives the patient details and it is stored as an Optional object. If there is no `Patient`, then the Optional.empty() is assigned."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "4. **tasks**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This gives all the tasks that are assigned to a specific room. The number of tasks assigned can be zero."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The proposed room feature is facilitated by `RoomList`. It extends `ReadOnlyRoomList` which reads the Room information Json file, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `RoomList#addRooms(int num)` — adds the number of which are said to add together and retains infromation previously stored in each room"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `RoomList#containsRoom(Room toCehck)` - checks whether the given room exists"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `RoomList#clearRoom(Name patientName)` - removes patient from the room"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `RoomList#setSingleRoom(Room target, Room editedRoom)` - sets the editedRoom to the target room"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addRooms(int num)`, `Model#hasroom(Room room)`, `Model#clearRoom(Name patientName)` and `Model#setSingleRoom(Room target, Room editedRoom)` respectivley. "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by Noorul Azlina_"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "The GUI for room feature is based on a `ListView` that updates whenever the `RoomList` is updated and a `scroll pane` that"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "displays the details of the room. To ensure that the information displayed in the `scroll pane` is updated dynamically, "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "we employ the use of `Listeners` that listens for changes and notify the `scroll pane` to update."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Ming De_"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.2.3 Design Considerations "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Aspect: Decision on allowing `editRoomCommand` that allows changing of room number to remain**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Option 1: Do not change the `editRoomCommand`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Allowing the users to change room numbers will give the user more power in customising the rooms. However, this option introduced a bug into the system"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "that could not be easily resolved unless we changed our entire implementation of `InitRoomCommand`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Option 2: Remove `editRoomCommand` ability to change room number and rename it to `AllocateRoomCommand`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Removing the `editRoomCommand` to change room number is much more time-efficient compared to changing the entire implementation of `InitRoomCommand`. We"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "also decided that there should be no reason that a user would need to change the room number. Renaming the method to `AllocateRoomCommand` would provide"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "more clarity for the method."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Ultimately, we decided on Option 2. This is because keeping `editRoomCommand` would lead to a large consumption of time to redesign the system. In order"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "to not stray from our schedule, we have to remove `editRoomCommand` to ensure that we can develop the other features on time."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Furthermore, to solve the bug that was introduced, we would have to store the count of the number of times `InitRoomCommand` was called. This would"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "cause us to store information in another `.json` file which is unnecessary. Therefore, we decided that the forgoing a"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "small function like this would be a better choice."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Ming De_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "##### Feature related to Room"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The features comprise of five commands namely,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `InitRoomCommand` - Initializes the number of rooms in Covigent app."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `ListRoomCommand` - Lists all the rooms in Covigent app."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `AllocateRoomCommand` - Allocates a patient to a room."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `SearchRoomCommand` - Searches for the room with the specified room number."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `FindEmptyRoomCommand` - Finds an empty room with the lowest room number."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "We will illustrate the progress of two of the above commands for simplicity."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.2.4 Create, Read, Update"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Implementation of InitRoomCommand**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The following is a detailed explanation of the operations that `InitRoomCommand` performs."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Step 1.** The `InitRoomCommand#execute(Model model)` method is executed and it check if the `Integer`defined when instantiating"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "itssodium"
        },
        "content": "If it is a positive integer and the number of rooms is more than or equal to the existing number of occupied rooms, InitRoomCommand is valid. "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The checking of the number of rooms is done by `Model#hasSpaceForRooms()`. If this is true then `Integer` is valid, else it is invalid."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Step 2.** The stated number of rooms is then set to `Integer`, if `Integer` is greater than the existing number of rooms then excess rooms are added to the back of the "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "itssodium"
        },
        "content": "UniqueRoomList. If the number of rooms is less than the `Integer` and there are occupied rooms the information of patients in that room is transferred to an empty room "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "itssodium"
        },
        "content": "in the reduced number of rooms"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Step 4.** A success message with the `Intger` appended with the `InitRoomCommand#MESSAGE_SUCCESS` constant is displayed on the UI. A new `CommandResult`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "itssodium"
        },
        "content": "returns this message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The activity diagram below illustrates the `initRoom`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/ActivityDiagramForInitRoom.png\"\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 18. Activity diagram for initRoom\u003c/i\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "itssodium"
        },
        "content": "The Sequence Diagram for `initRooms` is shown below."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/SequenceDiagramForInitRoom.png\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 19. Sequence diagram for initRoom\u003c/i\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "itssodium"
        },
        "content": " "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  _Written By: Noorul Azlina_"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Implementation of AllocateRoomCommand**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The following is a detailed explanation of the operations that `AllocateRoomCommand` performs."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 1.** The `AllocateRoomCommand#execute(Model model)` method is executed and it checks if the `Integer` defined when instantiating"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`AllocateRoomCommand(Integer roomNumberToAllocate, AllocateRoomDescriptor AllocateRoomDescriptor)` is valid. This is done using the `Model#getRoomWithRoomNumber` method"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " where it is used to get an `Optional\u003cRoom\u003e`. If `Optional\u003cRoom\u003e` is empty, the `Integer` is not valid."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " The `AllocateRoomDescriptor` holds the information of the `Room` with the patient allocated."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 2.** A new `Room` with the allocated patient will be created and the room is then searched through `RoomList#internalList`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "using the `Model#hasRoom(Room room)` method to check if a room with the same room number exists. If it already exists,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`CommandException` will be thrown with an error message."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 3.** The newly created `Room` will replace the existing room object through the `Model#setSingleRoom(Room target, Room editedRoom)`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "method."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step 4.** A success message with the allocated room will be appended with the `AllocateRoomCommand#MESSAGE_ALLOCATE_ROOM_SUCCESS ` constant. A "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The activity diagram below illustrates `allocateRoomCommand`."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/AllocateRoomActivityDiagram.png\"\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 20. Activity Diagram for AllocateRoomCommand\u003c/i\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "The sequence diagram for `AllocateRoomCommand` is shown below."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cimg src\u003d\"images/dg/AllocateRoomSequenceDiagram.png\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ci\u003eFigure 21. Sequence Diagram for AllocateRoomCommand\u003c/i\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by Mingde_"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 4.3 Task Feature"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.3.1 Overview"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The task feature in Covigent allows hotel staff to manage and organize time-critical work related to a room in a quarantine facility."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Every room can be allocated any number of tasks, with each task keeping track of the description of the work and a due date by which"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "it should be completed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "It is important to note that Covigent handles tasks on a per-room basis. Tasks not specific to any room (e.g. tasks related to the operations"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "of the quarantine facility) are out of scope."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The task feature in Covigent includes the following:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Adding a task to a room"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Displaying all tasks in the user interface"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Editing the description and due date of a task"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Removing a task from a room"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Filtering tasks based on a criterion and displays the filtered tasks in the user interface (currently on supports filtering by due date)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.3.2 Implementation"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "At a higher level, tasks share a composition type relationship with rooms. That is, if a room is deleted, all tasks in that room are similarly deleted."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "We have implemented the task feature based on the class diagram in Figure 22."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cimg src\u003d\"images/dg/TaskClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 22. Class Diagram for Task\u003c/i\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Each `Room` contains a `RoomTasks` class, which is a wrapper around `TaskList`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Task-related operations that alter the tasks in a `Room` must be performed through that `Room`."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The API calls for these operations first proceed to `Room`, which redirects them to `RoomTasks`. To enforce this constraint, `RoomTasks` is not publicly exposed in the API for `Room`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "(i.e. there is no getter for `RoomTasks` in `Room`)."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`TaskList` emulates the other `List` classes in Covigent such as `UniquePatientList` and `UniqueRoomList`, exposing only an unmodifiable `ObservableList\u003cTask\u003e`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This `ObservableList\u003cTask\u003e` is subsequently returned by `RoomTasks` in the `getReadOnlyList()` method to fulfill its contract with the `ReadOnlyList\u003cTask\u003e` interface."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.3.3 Design Considerations"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Aspect: Retrieving list of tasks from `Room`**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Option 1: Supplying a getter for `RoomTasks` in `Room`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Having a `getRoomTasks()` method to retrieve all the tasks in `Room` greatly enhances convenience, especially when copying the information from one `Room` to another."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This is because we can use the constructor of `Room` in this manner: `Room copyOfRoom \u003d new Room(..., originalRoom.getRoomTasks()))` (`...` refers to other attributes of `Room` that need to be passed into constructor)."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "It is a quick way to transfer tasks between `Room`."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "However, this option is not optimal from a defensive programming perspective. Because a client can retrieve `RoomTasks` from `Room`, there is potential for abuse."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The `RoomTasks` object may be passed to some other classes that are not `Room`. Consequently, there is no guarantee that a client will not circumvent `Room` and call an operation that changes its tasks such as `addTask(Task)` directly from `RoomTasks`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This destroys the abstraction barrier of `Room` as clients can modify the tasks in it via external means."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Option 2: Add a `getReadOnlyTasks()` method in `Room` to retrieve an unmodifiable list of tasks from `RoomTasks`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "We chose option 2 for Covigent as we thought it was the safer option. Since `RoomTasks` implements `ReadOnlyList\u003cTask\u003e`, `Room` can retrieve and expose it via a `getReadOnlyTasks()` method for clients to access the tasks."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This is more secure from a defensive programming perspective and respects the abstraction barrier. Without the getter for `RoomTasks`, clients are only allowed to change the tasks in `Room` via its API."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "It ensures that the tasks in a `Room` are not modified without knowledge of `Room`, while providing the flexibility for clients to access the information in them."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "An additional benefit of this option is that it obscures the fact that `Room` depends on `RoomTasks` for its task-related operations, thus strengthening the composition type relationship between tasks and rooms."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "With option 2, the operation for copying tasks from one `Room` to another can be performed as such: `Room copyOfRoom \u003d new Room(..., new RoomTasks(originalRoom.getReadOnlyTasks()))`."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "It is probably better for the constructor of `Room` to take in `List\u003cTask\u003e` instead of `RoomTasks` to completely hide the existence of `RoomTasks` from clients."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This can be considered as part of the improvements to be made to Covigent in the future."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "A downside of this option is that the implementor (future programmers of Covigent) must be aware of this design decision and avoid exposing `RoomTasks` through the public API of `Room`."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Moreover, there is a slight increase in complexity now that `RoomTasks` has to implement `ReadOnlyList\u003cTask\u003e`."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Aspect: Storing a list of tasks in `Room`**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Option 1: Using `List\u003cTask\u003e` in `Room`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This option is simple as it does not require any additional classes. However, `Room` has to handle all task-related operations, which violates the single-responsibility principle. "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Conceptually, we consider `Room` to be a container for a patient and tasks. It should not contain implementations of methods related to patients and tasks."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Option 2: Using `TaskList` in `Room`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "While entirely possible to use `TaskList` to store the tasks in `Room` (see Figure 23), we cannot be certain that `TaskList` will not be used elsewhere in `Covigent` in the future."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cimg src\u003d\"images/dg/TaskAlternativeClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 23. Class Diagram for Task using TaskList\u003c/i\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "For instance, suppose we want to support a list of tasks for specific patients (instead of rooms). It may not make much sense to use `TaskList` for both patients and rooms as they can have different behaviors."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Perhaps a maximum of 5 tasks can be assigned to each patient, while there is no limit to the number of tasks that can be assigned to each room."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Taking that into consideration, we decided to add a wrapper class."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Option 3: Using an extra class in addition to `TaskList`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "We chose option 3 and added a new class `RoomTasks` to `Room`. `RoomTasks` is a wrapper around `TaskList` to support room-specific behavior associated with tasks."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "A simple example is how we can set a maximum number of tasks each `Room` can hold through `RoomTasks` without modifying `TaskList`. In that sense, option 3 respects the open-closed principle."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "An alternative is to use a new class that extends from `TaskList`. This would improve polymorphism as methods that work with `TaskList` will also work with the new class."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "However, Liskov substitution principle might be a concern. For instance, if `TaskList` allows an unlimited number of tasks to be stored but `RoomTasks` only allows 500, it would be a violation of Liskov substitution principle."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "As such, we did not choose this alternative."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The disadvantage of using another class is the added complexity as API calls for task-related operations need to be routed from the new class to `TaskList`."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.3.4 Create, Read, Update, Delete"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "In this section, we will cover the implementation of the manipulation of `Task` data. The commands that allow the task-related operations of creating, reading, updating, and deleting of `Task` are `AddTaskCommand`, `ListTaskCommand`, `EditTaskCommand`, and `DeleteTaskCommand` respectively."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The actual manipulation of `Task` data is performed in the `TaskList` class. Some significant methods within `TaskList` that allows the manipulation of `Task` data are shown below:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `TaskList#add(Task toAdd)` - Adds a `Task` to `TaskList`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `TaskList#setTask(Task target, Task editedTask)` - Replaces a `Task` in `TaskList` with the edited `Task`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `TaskList#remove(Task toRemove)` - Removes a `Task` from `TaskList`."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `TaskList#asUnmodifiableObservableList()` - Returns a read-only list containing all `Task` in `TaskList`."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `RoomTasks#getTaskWithTaskIndex(Index index)` - Returns the `Task` with the `Index` in the `TaskList`. This method is currently in `RoomTasks` but can be safely refactored into `TaskList`."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "These methods in `TaskList` class support the corresponding methods in `RoomTasks`. For clients to perform these operations, `Room` exposes `addTask(Task task)`, `setTask(Task task, Task editedTask)`, and `deleteTask(Task task)` in its public API."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Calls to these APIs are redirected to `RoomTasks` and eventually `TaskList`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Since the commands do not directly interact with `Room` but rather the `Model`, the `Model` interface has to expose `addTaskToRoom(Task task, Room room)`, `deleteTaskFromRoom(Task task, Room room)` and `setTaskToRoom(Task task, Task editedTask, Room room)`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "For brevity\u0027s sake, we will only illustrate the implementation of the most complex command, `EditTaskCommand`."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Implementation of EditTaskCommand**"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The following is an explanation of the operations that `EditTaskCommand` performs, with the higher level details (`LogicManager` and `CovigentAppParser`) omitted for simplicity."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 1.** The user executes `edittask [room number] [task index] [other attributes to edit]` command to edit the description of a `Task` in a `Room`. An `EditTaskCommandParser` object is created and the `EditTaskCommandParser#parse(String args)` method is called, which helps to parse the different attributes of `Task`. The parse method returns a new `EditTaskCommand` object with the room number, task index, and a descriptor containing the updated values to replace the original."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 2.** The `Room` is retrieved from the list of rooms in Covigent using the `Model#getRoomWithRoomNumber(int roomNumber)` method. If no such `Room` exists, a `CommandException` object will be thrown with an error message."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 3.** The `Task` is retrieved from `RoomTasks` of `Room` using the `Model#getTaskFromRoomWithTaskIndex(Index taskIndex, Room room)` method. If no such `Task` exists, a `CommandException` object will be thrown with an error message."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 4.** The `Task` is edited in `EditTaskCommand` and replaces the original `Task` the room with `Model#setTaskToRoom(Task target, Task editedTask, Room room)`."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 5.** A success message with the new task details will be appended with the `EditTaskCommand#MESSAGE_SUCCESS` constant. A new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The sequence diagram for `EditTaskCommand` can be found below."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cimg src\u003d\"images/dg/EditTaskSequenceDiagram.png\"\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cbr /\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 24. Sequence Diagram for EditTaskCommand\u003c/i\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Yee Hong_"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 4.3.5 Search "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The following is a detailed explanation of the operations that `SearchTaskCommand` performs."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 1.** The `SearchTaskCommand#execute(Model model)` method is executed and it gets information of `task` from each `room` in the `roomList`."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 2.** If the `task` has a `duedate` before the `duedate` from user command, it is stored in `taskListWithDesirableResult`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 3.** If no `task` is found, `CommandException` will be thrown with an error message. "
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Step 4.** If there is at least one task found, the `model`\u0027s `filteredRoomTaskRecords` is updated with a `dueDatePredicate` using `updateTasksInFilteredRoomTaskRecords`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step 5.** a new `CommandResult` will be returned with the message."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Wai Lok_"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 4.4 Logging Feature"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See [Section 4.5, \"Configuration Features\"](#45-configuration-feature))"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Log messages are output through: `Console` and to a `.log` file"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Logging Levels**:"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Ming De_"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 4.5 Configuration Feature"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "## 5. Planned Features"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This section describes the features planned for the next iteration of Covigent."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 5.1 Single Command to Create and Allocate Patient to Room"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "When the user wants to assign a patient to a room, she must run 2 commands: `addpatient` and `allocateroom`. The former creates a new `Patient` object in Covigent and the latter assigns that `Patient` to an empty room."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "To improve the user\u0027s productivity, we can allow the user to specify a room number when executing `addpatient`. If the room and patient are valid, the patient is added to Covigent and assigned to the room in a single command."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Since these changes will add another layer of complexity, we plan to complete this feature in Covigent v1.5."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 5.2 Search for Task by Description"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The `searchtask` command allows searching for tasks only by due dates. A user with many tasks would most likely want to search for tasks by description."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "In addition to modifying `SearchTaskCommand` and `SearchTaskCommandParser`, a new class `DescriptionPredicate` might have to be introduced to filter the tasks by description."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Considering these additional changes, we plan to complete this feature in Covigent v1.5."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 5.3 Scroll to Modified Task in User Interface"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Whenever a user adds or edits a `Patient` or `Room`, the Patients and Rooms tabs in the user interface scrolls to the entry corresponding to the most recent change."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This is useful as the user can immediately review the latest modification on the user interface. To accomplish this, `PatientListPanel` and `RoomListPanel` attach a listener to `ListView\u003cPatient\u003e` and `ListView\u003cRoom\u003e` respectively to update the user interface when changes are detected."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Currently, when the user modifies a `Task`, the user interface does not scroll to the latest change. The reason is that the current implementation of the Tasks tab retrieves the room and task details from a `ListView\u003cRoomTaskAssociation\u003e`, as seen in `RoomTaskListPanel`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The underlying list for `ListView\u003cRoomTaskAssociation\u003e`, found in `RoomTaskRecords` is altered each time there are changes to a room, including not only the tasks but also the room itself and the patient in it."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Hence, the list is unable to distinguish between modifications to tasks, to rooms, or to patients in rooms. Since we do not want the user interface for `Task` to scroll when there are changes to `Room` or `Patient`, we have disabled the listener for `ListView\u003cRoomTaskAssociation\u003e`."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Fixing this issue likely requires a significant overhaul of the implementation of the Tasks tab. We plan to complete this feature in Covigent v2.0."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by Yee Hong_"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "## 6. Documentation"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 7. Appendix"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### A1. Product scope"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Needs to manage a significant number of patients and their tasks"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Needs to manage a significant number of rooms"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Wants to keep track of patients and their tasks efficiently"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Wants to look up patients, rooms and tasks details quickly"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers all information to be available at one place"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Is reasonably comfortable using Command Line Interface (CLI) apps"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Covigent is a handy tool for quarantine facility managers to manage the rooms and patients in the quarantine facility with increased productivity."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Covigent stores and retrieves information faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### A2. User stories"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | key in new patient information | keep track of the information of new patients in the facility |"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | edit patient information       | update his/her health status                                                                |"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "| `* * *` | staff of a quarantine facility | delete the records of patients who no longer resides in the facility | focus on information of existing patients residing in the facility|"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | view which rooms are empty     | allocate patients to them |"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | allocate patients to room     |keep track of which room they are living in|"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility | quickly find the room that a patient is staying in | locate the patient in the facility easily |"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | key in new task information    | keep track of the details of the tasks that I must complete                                  |"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "| `* *`  | staff of a quarantine facility | quickly find the room details of a given room number | track the patient and tasks in that room easily |"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "| `* *`    | staff of the quarantine facility     | indicate that I have completed the task in the room | let other staff know that they no longer have to handle them|"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* *`    | staff of a quarantine facility | find out all the outstanding tasks left in each room |  serve the quarantined individuals better                                               |"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "| `* *` | staff of a quarantine facility | quickly search through patient information | find the patients that match my criteria|"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "itssodium"
        },
        "content": "| `* *` | staff of a quarantine facility | look at all the rooms| find out which rooms are occupied and which are not |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "itssodium"
        },
        "content": "| `* *`| staff of a quarantine facility | initialise the number of rooms many times with previous information retained | define correct number of rooms if mistake is made I can correct it without having to tediously key in information again|"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "itssodium"
        },
        "content": "|`* * `| staff of a quarantine facility | find out an empty room | to allocate patient to that empty room easily without having to search through the rooms for an empty room |"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "itssodium"
        },
        "content": "| `* * `| careless staff of a quarantine facility | edit a task | to allow for me to easily change a mistake that I made while adding tasks |"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "itssodium"
        },
        "content": "| `* * `| forgetful staff of a quarantine facility | search a task | to allow for me to easily search for a task that end before a certain due date |"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### A3. Use cases"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "(For all use cases below, the **System** is `Covigent` and the **Actor** is `Hotel Staff`, unless specified otherwise. In addition, due to limitation in Github markdown, for use cases which include another use case, there will be no underlining of text.) "
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC01 Add a patient**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff requests to add a patient into Covigent."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Covigent adds the patient."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. Covigent shows the details of the newly added patient."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2a. Covigent realises that the patient name already exists."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2b. Covigent realises that the patient information being entered does not conform to the system format."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 2b1. Covigent displays an error message."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC02 Delete a patient**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff requests to delete a patient from Covigent."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Covigent deletes the patient and removes the patient from the room he/she is residing in."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. Covigent shows the details of the deleted patient."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2a. Covigent realizes the patient does not exist."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Use case: UC03 Edit a patient**"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff inputs the new information about the patient."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Covigent edits the patient information to the new information."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. Covigent shows the details of the edited patient."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 1a. Covigent realizes that no optional fields are input."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Use case: UC04 Search for a patient**"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff requests to search patients with a criterion."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Covigent searches the patients with the input criteria."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. Covigent shows the search results."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 2a. Covigent realizes that no such patient is recorded"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC05 Allocate a patient to a room**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff adds a patient to Covigent (UC01)."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Hotel Staff requests to allocate the patient to a specified room."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. Covigent adds the patient to the specified room."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Extensions**    "
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2a. Covigent realizes that the specified room does not exist."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends.   "
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  "
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2b. Covigent realizes that the specified room is not empty."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * 2b1. Covigent displays an error message."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC06 List all rooms**"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff requests to list all the rooms in quarantine facility."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Covigent lists all the rooms in the hotel and whether they are occupied or unoccupied."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 1a. Covgient realizes that there are no rooms existing."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC07 Find empty room**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff requests to search for an empty room to accommodate patient."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Covigent finds an empty room."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. Covigent shows the room to Hotel Staff."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "*  1a. Covigent realizes that there are no rooms."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  "
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "*  1b. Covigent realizes that there are no empty rooms."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 1b1. Covigent displays an error message."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC08 Initialize rooms**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff requests to change number of rooms."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Hotel Staff inputs the number of rooms to change into."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. Covigent changes the number of rooms in the system."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "4. Covigent displays all the current rooms."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 2a. Covigent realizes that the Hotel Staff inputs an invalid number."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 2b. Covigent realizes that the number of rooms input is less than number of occupied room"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * 2b1. Covigent displays an error message."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC09 Search for a room**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff requests to search for a room with the given patient."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Hotel Staff inputs the name of the patient to find the corresponding room."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. Covigent displays the room details that the patient resides in."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2a. Covigent realizes that the patient does not exists in the system."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2b. Covigent realizes that the patient is not allocated to any room."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 2b1. Covigent displays an error message."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC10 Add a task to a room**"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff requests to add a task to a room."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Covigent adds the task to the room."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 1a. Covigent realizes that the specified room does not exist."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC11 Delete a task from a room**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff requests to delete a task from a room."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Covigent deletes the task from the room."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* 1a. Covigent realizes that the specified room does not exist."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * 1b. Covigent realizes that the specified task does not exist."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * 1b1. Covigent displays an error message."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     "
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC12 Edit a task in a room**"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Hotel Staff inputs the new information about the task."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. Covigent edits the task information to the new information."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. Covigent shows the details of the edited task."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 1a. Covigent realizes that no optional fields are input."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 1a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * 1b. Covigent realizes that the specified room does not exist."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * 1b1. Covigent displays an error message."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     "
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * 1c. Covigent realizes that the specified task does not exist."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * 1c1. Covigent displays an error message."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * 1d. Covigent realizes that the new information for the task is the same as the original."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 1d1. Covigent displays an error message."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "itssodium"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: UC13 Search Task**"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Hotel Staff requests to search for a task before a specific date."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. Hotel Staff inputs the specific date."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. Covigent searches for tasks before the specific date."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "4. Covigent displays the tasks before the specific date and success message. "
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 2a. Covigent realizes that the format of the date is incorrect."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 2a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 3a. Covigent realizes that there is no task matching the criteria. "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * 3a1. Covigent displays an error message."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    "
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### A4. Non-Functional Requirements"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Should be able to hold up to 100 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Should work even without internet connection."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Should respond to commands within 3 seconds."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### A5. Glossary"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Patient**: An individual residing in the quarantine facility"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Task**: Task is to be completed by staff of the quarantine facility"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## A6. Instructions for manual testing"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Initial Launch**"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Double-click the jar file \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   **Expected**: Shows the GUI with a set of sample patients. "
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Saving Window Preferences**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   **Expected**: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Storage**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Launch the application and make a change that changes the state of the program, such as `addpatient` or `initroom`. Close the window."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   **Expected**: The app should re-launch into the same state as when it was closed."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### Adding a patient"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Adding a patient to Covigent**"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Prerequisites: User is viewing the patient tab."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Test case: `addpatient n/John Doe t/37.0 d/20200101-20200114 p/91234567 a/22`\u003cbr\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      **Expected**: Patient John Doe is added to the list. Details of the newly added patient is shown in the result box and the details panel. "
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Test case: `addpatient n/John Doe`\u003cbr\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      **Expected**: No patient is added. Error details shown in the result box. "
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   1. Other incorrect add patient commands to try: `addpatient n/John Doe t/37.0 d/20200101-20190114 p/91234567 a/22` \u003cbr\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      **Expected**: Similar to previous."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    "
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Dealing with missing data files**"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Run the app once and play around with the application. Once a change is made, the program will generate a data files in `./data/`."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   1. In `./data/`, delete `covigentapp.json` and `roomInformation.json`."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   "
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Re-launch the app.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   **Expected**: Default Patient information should now be present in the Patient tab. No Rooms present in Room tab."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. **Corrupted data files**"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    "
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    1. Run the app once and play around with the application. Once a change is made, the program will generate a data files in `./data/`."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    "
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    1. In `./data/`, open `covigentapp.json`. On line 2, delete the `[`: \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        1 {"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        2   \"patients\" : [ {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        3 ..."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       ```"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       should become "
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       ```"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       1 {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       2   \"patients\" : {"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "       3 ..."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   1. Re-launch the app.\u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   **Expected**: Go to the Patient tab and the tab should not have any data. `covigentapp.json` still exists."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 247,
      "LeeMingDe": 260,
      "chiamyunqing": 346,
      "-": 240,
      "raymondge": 32,
      "itssodium": 98
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### Covigent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-1/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 10
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Covigent’s architecture](DeveloperGuide.md#architecture)."
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "title: Covigent - User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "1. [About this Guide](#2-about-this-guide)\u003cbr /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   2.1. [What\u0027s in Covigent](#21-what-is-in-covigent)\u003cbr /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "   2.2. [Formatting in the Guide](#22-formatting-in-the-guide)\u003cbr /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [Getting Started](#3-getting-started)\u003cbr /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   3.1. [Setting Up](#31-setting-up)\u003cbr /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   3.2. [Parts of the Graphical User Interface](#32-parts-of-the-graphical-user-interface)\u003cbr /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         3.2.1. [Patients Tab](#321-patients-tab)\u003cbr /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         3.2.2. [Rooms Tab](#322-rooms-tab)\u003cbr /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         3.2.3. [Tasks Tab](#323-tasks-tab)\u003cbr /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   3.3. [Tutorial on How to Use Covigent](#33-tutorial-on-how-to-use-covigent)\u003cbr /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [Glossary](#4-glossary)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [Features](#5-features)\u003cbr /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.1. [Command Format](#51-command-format)\u003cbr /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    5.2. [Patient](#52-patient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.2.1. [Add a Patient: `addpatient`](#521-add-a-patient-addpatient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.2.2  [Delete a Patient: `deletepatient`](#522-delete-a-patient-deletepatient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.2.3  [Edit Patient Details: `editpatient`](#523-edit-patient-details-editpatient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.2.4  [Search Patients by Information: `searchpatient`](#524-search-patients-by-information-searchpatient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.2.5  [List all Patients: `listpatient`](#525-list-all-patients-listpatient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.3. [Room](#53-room)\u003cbr /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.3.1  [Initialise Rooms in Hotel: `initroom`](#531-initialise-rooms-in-hotel-initroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.3.2  [Allocate Patient to Room: `allocateroom`](#532-allocate-patient-to-room-allocateroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.3.3  [Search by Room Number: `searchroom`](#533-search-by-room-number-searchroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.3.4  [Search for Room with Patient: `searchroom`](#534-search-for-room-with-patient-searchroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.3.5  [List the Current Rooms: `listroom`](#535-list-the-current-rooms-listroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          5.3.6  [Find the first free room: `findemptyroom`](#536-find-the-first-free-room-findemptyroom)\u003cbr /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.4 [Task](#54-task)\u003cbr /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.4.1  [Add a Task to a Room: `addtask`](#541-add-a-task-to-a-room-addtask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.4.2  [Delete a Task from a Room: `deletetask`](#542-delete-a-task-from-a-room-deletetask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.4.3  [Edit Task Description or Due Date: `edittask`](#543-edit-task-description-or-due-date-edittask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.4.4  [Remove Due Date from a Task: `edittask`](#544-remove-due-date-from-a-task-edittask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          5.4.5  [Search all Tasks before the Given Date: `searchtask`](#545-search-tasks-before-a-given-date-searchtask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "          5.4.6  [List all Tasks: `listtask`](#546-list-all-tasks-listtask)\u003cbr /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.5  [View Help: `help`](#55-view-help-help)\u003cbr /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.6  [Exit Covigent: `exit`](#56-exit-covigent-exit)\u003cbr /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    5.7  [Autosave](#57-autosave)\u003cbr /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. [Command Summary](#6-command-summary)\u003cbr /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   6.1 [Patient](#61-patient)\u003cbr /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   6.2 [Room](#62-room)\u003cbr /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   6.3 [Task](#63-task)\u003cbr /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   6.4 [General](#64-general)\u003cbr /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. [FAQ](#7-faq)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Welcome to User Guide for our application, Covigent! Has Covid-19 hit your boutique hotel hard and left you scrambling to search for an application"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "that can ease your transition from a boutique hotel to a quarantine facility? Your search ends here! "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Covigent is a desktop management application to ease boutique hotels\u0027 transitions into quarantine facilities. Covigent aims to help boutique hotel managers"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "keep track of the information of quarantined individuals (i.e. patients) and the tasks to be done by their staff. The main features include:\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      1. Managing patient information - Period of Stay, temperature, phone number etc.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      2. Managing the rooms of the quarantine facility - Allocate patients to rooms, search for a room, etc.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      3. Managing the tasks to be done by each room - Add a task to a room, editing a task to the room, etc.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "As an application optimized for use with a keyboard rather than the mouse, you operate Covigent mainly by "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "typing commands into a Command Box. If you can type quickly, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional apps."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "But wait! Don\u0027t forget our beautiful Graphical User Interface (GUI) too!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "With our easy to navigate GUI, it has served it\u0027s purpose well as an interface that facilitates interaction with our application"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "through graphical icons. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Getting interested? Jump to [Section 3, \"Getting Started\"](#3-getting-started) to get started."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "This is what Covigent looks like:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f1_ui.png\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 1. The Graphical User Interface for Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by: Ming De_"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## 2. About this Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "This guide gives you an overview of the features in Covigent and shows you how to get started using Covigent. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Choose a link in the [Feature](#5-features) section to get a step-by-step instruction, and understand how to use Covigent. "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "### 2.1 What is in Covigent"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "In our patient features, you can [add](#521-add-a-patient-addpatient), [delete](#522-delete-a-patient-deletepatient),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[edit](#523-edit-patient-details-editpatient), [search](#524-search-patients-by-information-searchpatient) for a patient,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "or you can [list](#525-list-all-patients-listpatient) out all the patients in Covigent."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Moving on to our room features, you can [initialise](#531-initialise-rooms-in-hotel-initroom), [allocate](#532-allocate-patient-to-room-allocateroom),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[search](#533-search-by-room-number-searchroom) and [find](#536-find-the-first-free-room-findemptyroom) the rooms which you need."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "If you want an overview of the rooms, you can [list](#535-list-the-current-rooms-listroom) out all the rooms in Covigent."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Next, for our task features, you can [add](#541-add-a-task-to-a-room-addtask), [delete](#542-delete-a-task-from-a-room-deletetask), "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[edit](#543-edit-task-description-or-due-date-edittask) and [search](#545-search-tasks-before-a-given-date-searchtask) for a task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "and see it be displayed on our amazing GUI. If you want to see all the tasks, you can [list](#546-list-all-tasks-listtask) out all the tasks in Covigent."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Lastly, our miscellaneous features will ensure that you can seek [help](#55-view-help-help) if you are lost, or "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "[exit](#56-exit-covigent-exit) the program when you are done with it. Our app also has an [autosave](#57-autosave) feature that allows you to save the data without manual command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "### 2.2 Formatting in the Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Note the following formatting used in this document:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* ![icon](images/ug/icon_info.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* ![icon](images/ug/icon_keyword.png) "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "A grey highlight (called a mark-up) indicates a keyword. It denotes either i) a field or command that can be typed into the Command Box and executed by Covigent; or ii) the name of a file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* ![icon](images/ug/icon_italics.png) "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Italicised words indicate text that is displayed on the Graphical User Interface."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* ![icon](images/ug/icon_hyperlink.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "A light blue font color indicates that this is a Hyperlink that you can click on"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "and be transferred to the corresponding section in Covigent."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## 3. Getting Started"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "If you are tired of lengthy and problematic installation processes, Covigent is perfect for you."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The setup is minimal and can be completed in 4 simple steps. Follow the instructions below to try it out!"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 3.1 Setting Up"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": "The following steps to set up Covigent are applicable to Windows, Mac OS X, and Linux."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Install Java 11 or a later version. The latest version of Java can be found [here](https://java.com/en/download/)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Download the latest version of Covigent from [here](https://github.com/AY2021S1-CS2103T-W12-1/tp/releases). To do so, look for the file `covigent.jar` and click on it."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Please refer to Figure 2 if you require assistance with locating the file. Figure 2 shows how to download version 1.3 of Covigent. `covigent.jar` has been highlighted in red for your convenience."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f2_downloadcovigent.png\" width\u003d\"500\" height\u003d\"230\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 2. How to Download Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. You may move `covigent.jar` to any other folder. Your save data and preferences for Covigent will be saved to the same folder."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Double-click on `covigent.jar` to start Covigent. Here is what you will see if everything goes right:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f3_startingcovigent.png\" width\u003d\"400\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003ci\u003eFigure 3. Covigent after Starting Up\u003c/i\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "In case there are any problems during setup, please refer to [Section 7, \"FAQ\"](#7-faq) for instructions to resolve them."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 3.2 Parts of the Graphical User Interface"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The user interface of Covigent comprises 3 main tabs: Patients, Rooms, and Tasks. The tabs respectively display information on the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "patients, the rooms in the quarantine facility, and the tasks assigned to the rooms. A tab turns a deeper shade of pink"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "when you click on it to indicate that you are currently in the tab. For example, Figure 4 shows how the Tasks tab changes colours when you click on it."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f4_covigenttabs.png\" width\u003d\"100\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 4. User Interface of Covigent when a Tab is Clicked\u003c/i\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 3.2.1 Patients Tab"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The main purpose of the Patients tab is to display information about the patients."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "When you first start Covigent, you will find yourself in the Patients tab. You may notice that there is already some sample data for quarantined"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "individuals. There is no need to worry! The data can be edited or deleted to suit your needs later. If you urgently need to change the data,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "please proceed to [Section 5.2.3, \"Edit Patient Details\"](#523-edit-patient-details-editpatient) for the relevant instructions."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Using the Patients tab is easy. Click on any of the patients. This will highlight that individual and display her information."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Figure 5 illustrates what happens when you click on a patient _David Li_. Observe that his details appear on the right of the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "user interface, in the Details Panel."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f5_patientstab.png\" width\u003d\"600\" height\u003d\"280\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 5. Highlighted Individual in Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 3.2.2 Rooms Tab"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The main purpose of the Rooms tab is to display information about the rooms in the quarantine facility. Each room contains 1 quarantined"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "individual and multiple tasks."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "When you first start Covigent and click into the Rooms tab, it will be empty. Rest assured that this is normal. Once you learn how to add rooms"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "to Covigent, the Rooms tab will be populated in no time. You may refer to [Section 3.3, \"Tutorial on How to Use Covigent\"](#33-tutorial-on-how-to-use-covigent)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "for step-by-step guidance or [Section 5.3.1, \"Initialise Rooms in Hotel\"](#531-initialise-rooms-in-hotel-initroom) if you prefer a more hands-on approach."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Using the Rooms tab is easy. Click on any of the rooms. This will highlight that room and display the patient and tasks allocated"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "to the room. Figure 6 shows what happens when you click on _Room #2_. The details of the patient _Alex Yeoh_ and task _Sanitise the room_ "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "are displayed on the right of the user interface, in the Details Panel."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f6_roomstab.png\" width\u003d\"600\" height\u003d\"280\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 6. Highlighted Room in Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 3.2.3 Tasks Tab"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The main purpose of the Tasks tab is to display information about the tasks assigned to the rooms. When you have too many tasks, it is common"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "to forget which room you have allocated a certain task to. The Tasks tab provides a quick overview of all the tasks in Covigent such that you do not"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "have to look through each room to find a specific task."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "When you first start Covigent and click into the Tasks tab, it will be empty. Do not panic! This is the default behaviour. As you add more tasks to the rooms,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "those tasks will start to appear in the Tasks tab. You may refer to [Section 3.3, \"Tutorial on How to Use Covigent\"](#33-tutorial-on-how-to-use-covigent)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "for step-by-step guidance or [Section 5.4.1, \"Add a Task to a Room\"](#541-add-a-task-to-a-room-addtask) if you prefer a more hands-on approach."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Using the Tasks tab is easy. Simply read the description and due date of the tasks directly from the user interface. For tasks with very long"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "descriptions, the user interface is unable to fully display them. In those cases, you may highlight the descriptions with your cursor and drag right to scroll through them."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Alternatively, you may triple-click on the descriptions, followed by a right click to copy them. Refer to Figure 7 for an example of the latter method."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f7_taskstab.png\" width\u003d\"600\" height\u003d\"280\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 7. Copying a Long Description in Tasks Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### 3.3 Tutorial on How to Use Covigent"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Covigent has numerous features, including adding patients, creating rooms, assigning tasks to rooms, and more."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Every feature has a corresponding command. Using a feature is as simple as typing a command in the Command Box (see Figure 8) and pressing Enter to execute it."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f8_commandbox.png\" width\u003d\"800\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 8. Command Box of Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You have heard so much about the potential of Covigent. Excited? Without further ado, let\u0027s give these features a try! We will role-play the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "following scenario to get you acquainted with a few common commands: your hotel has 10 rooms; a guest is arriving today and will quarantine with"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "your hotel for 14 days; and you must not forget to sanitise the room the day after he leaves."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You may copy-and-paste the following commands (bold and in grey highlights) into the Command Box. Do not forget to press Enter, or the command will not execute!"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. **`initroom 10`** : Let\u0027s set up the hotel room first. This command creates _10_ rooms in Covigent. If you proceed to the Rooms tab, you will see that 10 rooms"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   have been created (see Figure 9)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f9_initroomexample.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 9. Creating Hotel Rooms in Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "2. **`addpatient n/John Doe t/37.4 d/20200910-20200924 p/98765432 a/35 c/Vegan`** : The guest has arrived. You have taken his temperature and need to enter his details into Covigent."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   This command adds a new patient named _John Doe_ with age _35_, phone number _98765432_, period of stay _10 Sep 2020 to 24 Sep 2020_, temperature _37.4_, and a comment that he is _Vegan_."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   If you proceed to the Patients tab, you will see that _John Doe\u0027s_ entry has been added."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f10_addpatientexample.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 10. Adding a Patient to Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "3. **`findemptyroom`** : You would like to assign _John Doe_ a room but are unsure which rooms are empty. This command will search for an empty room."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   Proceed to the Rooms tab. The result can be seen in Figure 11."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f11_findemptyroomexample.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 11. Finding an Empty Room in Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "4. **`allocateroom 1 n/John Doe`** : Now that you know _Room #1_ is empty, let\u0027s assign _Room #1_ to _John Doe_. This command will do exactly that."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   Notice that _Room #1_ is now occupied and _John Doe\u0027s_ details are reflected in the Details Panel on the right of the user interface."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f12_allocateroomexample.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 12. Allocating a Room to a Patient in Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "5. **`addtask r/1 d/Sanitise the room dd/20200925 1800`** : Finally, we would like a reminder to sanitise the room after _John Doe_ leaves."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   This command adds a task to _Room #1_ with description _Sanitise the room_ and due date _25 Sep 2020 1800_. Notice that the Details Panel"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   reflects the task now (see Figure 12). You may also click on the Tasks tab to view the newly added task."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f13_addtaskexample.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 13. Adding a Task to Covigent\u003c/i\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "If you are curious about what other features are available in Covigent, please visit [Section 5, Features](#5-features)."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yee Hong_"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 4. Glossary"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Graphical User Interface**: A form of user interface that allows users to interact with electronic devices through graphical icons. \u003cbr /\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Patient**: An individual who resides in the quarantine facility. \u003cbr /\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Task**: A task to be completed by staff of the quarantine facility. \u003cbr /\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## 5. Features"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section covers all the commands that you can type into the Command Box of Covigent. The commands are categorised into [patient features](#52-patient), [room features](#53-room) and [task features](#54-task). If it is the first time that you are using the command, we recommend that you refer to [Command Format](#51-command-format) to find out how to interpret the format of the commands."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.1 Command Format"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Notes about the command format:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Words in `UPPER_CASE` are the fields to be supplied by the user. \u003cbr /\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  e.g. in `addpatient n/NAME`, `NAME` is a field which can be used as `addpatient n/John Doe`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Fields in square brackets are optional. \u003cbr /\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  e.g `n/NAME [c/COMMENT]` can be used as `n/John Doe c/Is vegan` or as `n/John Doe`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Fields can be in any order. \u003cbr /\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* If the same field is provided multiple times, only the last input for that field will be processed.\u003cbr /\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  e.g. if you input `n/John Doe n/Mary Doe`, Covigent will only process `n/Mary Doe` and ignore `n/John Doe`. Similarly, if you input `n/John Doe t/37.4 n/Mary Doe t/36.5`, Covigent will interpret the fields provided as simply `n/Mary Doe t/36.5`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 5.2 Patient"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section contains all the commands related to patients. You can [add](#521-add-a-patient-addpatient), [delete](#522-delete-a-patient-deletepatient),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[edit](#523-edit-patient-details-editpatient), [search](#524-search-patients-by-information-searchpatient) for a patient, or you can [list](#525-list-all-patients-listpatient) out all the patients in Covigent. If you are unsure of how to interpret the command format, head back to [Command Format](#51-command-format) before executing the commands!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.2.1 Add a Patient: `addpatient` "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to add a patient with the following details: name, temperature, period of stay, phone number, age and comment.\u003cbr /\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Format:** `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]`\u003cbr /\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`NAME` | The name of the patient. It should preferably be the full name of the patient. The maximum number of characters allowed is 150."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`TEMPERATURE` | The temperature of the patient. It must be keyed in to 1 decimal place (e.g. 37.0 instead of 37) and must be within the range 32.0 to 41.0 degree celsius, both inclusive."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`PERIOD_OF_STAY` | The period of stay of the patient in the facility. It must be in the format YYYYMMDD-YYYYMMDD. Both dates must be valid and the start date must be before or equals to the end date."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`PHONE_NUMBER` | The phone number of the patient that the patient wishes to be contacted by. The maximum number of digits allowed is 20."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`AGE` | The age of the patient, which is between 0 (inclusive) and 120 (exclusive)."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`COMMENT` | An optional field that is used to indicate any special details of the patient such as dietary preferences or health conditions."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Duplicate names are not allowed. If an entry of name _John Doe_ is recorded in Covigent, you should not add a patient of the name _John Doe_ again."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic` A patient named _Betsy Crowe_ with temperature _36.5_, period of stay from _1 October 2020 to 14 October 2020_, phone number _91234567_, age _19_ and comment _Is asthmatic_ is added to Covigent."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Patients tab under the navigation bar as shown in Figure 14."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatepatientstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 14. Navigation to Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f15_addpatientcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 15. \u003ccode\u003eaddpatient\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. The Result Box displays the sucess message shown in Figure 16. The Details Panel now reflects the information of the newly added patient and the patient is selected in the Patient List."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f16_addpatientsuccess.png\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 16. A Successful Execution of \u003ccode\u003eaddpatient\u003c/code\u003e Command\u003c/i\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 16, please repeat step 2 onwards."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.2.2 Delete a Patient: `deletepatient` "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to delete the details of the existing patient identified by his/her name from Covigent.\u003cbr /\u003e "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Format:** `deletepatient NAME`\u003cbr /\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`NAME` | The name of the patient to be deleted. It is case-insensitive and must match exactly with the name of the patient that was input into Covigent previously."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* If the patient to be deleted was allocated a room previously, the room will be updated to unoccupied in Covigent but the tasks (if any) in that room will remain unchanged."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. `deletepatient Mary Doe` The patient details of Mary Doe will be deleted from Covigent."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Patients tab under the navigation bar as shown in Figure 17."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatepatientstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 17. Navigation to Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f18_deletepatientcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 18. \u003ccode\u003edeletepatient\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. The Result Box displays the success message shown in Figure 19 and the deleted patient can no longer be found in the list of patients in Covigent. The Patient List now hovers back to the first patient in the list and the Details Panel displays the information of the first patient."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f19_deletepatientsuccess.png\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003ci\u003eFigure 19. A Successful Execution of \u003ccode\u003edeletepatient\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 19, please repeat step 2 onwards."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#### 5.2.3 Edit Patient Details: `editpatient`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "You can use this command to edit an existing patient\u0027s details in Covigent."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Format**: `editpatient ORIGINAL_NAME [n/NEW_NAME] [t/TEMPERATURE] [d/PERIOD_OF_STAY] [p/PHONE_NUMBER] [a/AGE] [c/COMMENT]`\u003cbr /\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`ORIGINAL_NAME` | The name of the patient whom details are to be edited. It must match exactly with the name of the patient that was input into Covigent previously. It is case-insensitive."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`NEW_NAME` | The new name of the patient. The new name must not already exist within Covigent and the maximum number of characters allowed is 150. "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`TEMPERATURE` | The new temperature of the patient. It must be keyed in to 1 decimal place (e.g. 37.0 instead of 37) and must be within the range 32.0 to 41.0 degree Celsius, both inclusive."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`PERIOD_OF_STAY` | The new period of stay of the patient. It must be in the format YYYYMMDD-YYYYMMDD. Both dates must be valid and the start date must be before or equals to the end date."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`PHONE_NUMBER` | The new phone number of the patient. The maximum number of digits allowed is 20."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`AGE` | The new age of the patient. Age should be between 0 (inclusive) and 120 (exclusive)."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`COMMENT` | The new comments about the patient."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. `editpatient john doe p/91234567` The phone number of the patient named John Doe will be updated to _91234567_."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. `editpatient alex t/36.7 a/21 d/20200303-20200315` The temperature, age and period of stay of the patient named Alex will be updated to _36.7_, _21_ and _20200303-20200315_ respectively."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Patients tab under the navigation bar as shown in Figure 20."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatepatientstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 20. Navigation to Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f21_editpatientcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 21. \u003ccode\u003eeditpatient\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1.  The Result Box displays the success message shown in Figure 22 and the patient has been edited in Covigent."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The details of the newly edited patient will be shown in the Details Panel."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f22_editpatientsuccess.PNG\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 22. A Successful Execution of \u003ccode\u003eeditpatient\u003c/code\u003e Command\u003c/i\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. If you do not see the success message as shown in Figure 11, please repeat step 2 onwards."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by: Ming De_"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.2.4 Search Patients by Information: `searchpatient`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "raymondge"
        },
        "content": "You can use this command to search patients that match the given criteria(name or a range of temperature) in Covigent."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Format**: `searchpatient [n/NAME] [tr/TEMPERATURE_RANGE]`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "raymondge"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "raymondge"
        },
        "content": "`NAME` | The full name or the sub-name of the patient you want to look for. If the patient\u0027s name is \"Alex Joe\", then you must enter \"Alex\", \"Joe\" or \"Alex Joe\" to find him. You input is case-insensitive."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "raymondge"
        },
        "content": "`TEMPERATURE_RANGE` | The temperature range that you want to look for. It is made up of two valid temperatures. A temperature must be keyed in to 1 decimal place (e.g. 37.0 instead of 37). The two temperature are linked using a dash \"-\". The `TEMPERATURE_RANGE` is inclusive of start and end temperatures. `tr/35.5-36.0` means a temperature range of 35.5-36.0 degree, celsius, both inclusive."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Only one of the fields can be provided. If the field `n/name` is entered, you should not enter the field `tr/TEMPERATURE_RANGE`.\u003cbr /\u003e "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* The two temperature you enter for field `tr/TEMPERATURE_RANGE` must both be valid, if one of the temperature is invalid, the search function will fail.\u003cbr /\u003e "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. `searchpatient n/john` Searches patients with names containing _john_."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. `searchpatient tr/36.5-36.7` Searches patients within temperature range _36.5 to 36.7_ degree celsius, both inclusive."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:**  \u003cbr /\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Patients tab under the navigation bar as shown in Figure 23."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatepatientstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 23. Navigation to Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. Before the search, this is what you see in the list of patient."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f24_patientuibeforesearch.PNG\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 24. Patient List before \u003ccode\u003esearchpatient\u003c/code\u003e Command \u003c/i\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the second example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f25_searchpatientcommand.PNG\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 25. \u003ccode\u003esearchpatient\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the success message shown in Figure 26 and you can find the patients with temperatures in the inputted temperature range in Covigent."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f26_searchpatient.png\" width\u003d\"480\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 26. A Successful Execution of \u003ccode\u003esearchpatient\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.2.5 List all Patients: `listpatient`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "raymondge"
        },
        "content": "You can use this command to look at the list of all patients in the patient tab."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Format**: `listpatient`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Example(s)**:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `listpatient` Lists all patients that are present in Covigent."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:**  \u003cbr /\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Patients tab under the navigation bar as shown in Figure 27."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatepatientstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 27. Navigation to Patients Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f28_listpatientcommand.png\" width\u003d\"600\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 28. \u003ccode\u003elistpatient\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the sucess message shown in Figure 29 and you can find the full list of patient in Covigent."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f29_listpatient.png\" width\u003d\"480\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 29. A Successful Execution of \u003ccode\u003elistpatient\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.3 Room"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section contains all the commands related to rooms. You can [initialise](#531-initialise-rooms-in-hotel-initroom), [allocate](#532-allocate-patient-to-room-allocateroom), [search](#533-search-by-room-number-searchroom) and [find](#536-find-the-first-free-room-findemptyroom) the rooms which you need."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "If you want an overview of the rooms, you can [list](#535-list-the-current-rooms-listroom) out all the rooms in Covigent. If you are unsure of how to interpret the command format, head back to [Command Format](#51-command-format) before executing the commands!"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 5.3.1 Initialise Rooms in Hotel: `initroom`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to initialise a number of rooms in the quarantine facility to the app, if there was data given previously, they would "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "itssodium"
        },
        "content": "be stored."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `initroom NUMBER_OF_ROOMS`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "itssodium"
        },
        "content": "----------|-------------"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`NUMBER_OF_ROOMS` | The number of rooms you wish to have in hotel"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* The maximum number of rooms that can be defined is 500 as most boutique hotels have a maximum of 500 rooms."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* If suppose you `initroom x` and x is already the number of rooms, no error would be seen to improve user experience."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If the number of rooms is less than the number of patients error is thrown when decreasing the number of existing rooms."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Adds `NUMBER_OF_ROOMS` rooms into the hotel system, if there were previously added information that information for respective rooms will still be there."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `initroom 123`. 123 rooms are initialised in Covigent."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `initroom 400`. 400 rooms are initialised in Covigent."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 30."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 30. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f31_initroomcommand.png\" width\u003d\"500\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 31. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box shows a success message \"Initialise the number of rooms to 400 rooms in the application.\"."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f32_initroom.png\" width\u003d\"550\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 32. A Successful Execution of \u003ccode\u003einitroom\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Noorul Azlina_"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#### 5.3.2 Allocate Patient to Room: `allocateroom`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to allocate a patient to a room."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Format**: `allocateroom ROOM_NUMBER n/PATIENT_NAME`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "----------|-------------"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`ROOM_NUMBER` | The room number of the room of which the patient is to be allocated to. A room with the `ROOM_NUMBER` must already exist within Covigent."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "`PATIENT_NAME` | The name of the patient to be allocated to the room. It is case-sensitive but must match exactly with the name of the patient that was input into Covigent previously."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* To remove a patient from the room, input the patient name as \"-\". Refer to the example below for more clarity."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `allocateroom 1 n/john doe`. The patient named _John Doe_ will be allocated to _Room #1_."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `allocateroom 1 n/-`. The previous patient will be removed from _Room #1_."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 33."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 33. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f34_allocateroomcommand.PNG\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 34. \u003ccode\u003eallocateroom\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the sucess message shown in Figure 35 and the patient is allocated to the room."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "The room with the newly allocated patient is shown in the room Details Panel."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f35_allocateroomsuccess.PNG\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 35. A Successful Execution of \u003ccode\u003eallocateroom\u003c/code\u003e for Room Number\u003c/i\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 35, please repeat step 2 onwards."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by: Ming De_"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 5.3.3 Search by Room Number: `searchroom` "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "You can use this command to search for the room details with the specified room number."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Format:** `searchroom r/ROOM_NUMBER`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "----------|-------------"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`ROOM_NUMBER` | The room number of the room to be searched for, which is a positive integer. The room number should be present in the list of rooms in Covigent."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. `searchroom r/6` The room details of room number 6 will be searched."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 36."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 36. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f37_searchroomnumbercommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 37. \u003ccode\u003esearchroom\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the success message shown in Figure 38 and the room with the specified room number is shown in the room Details Panel."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f38_searchroomnumbersuccess.png\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 38. A Successful Execution of \u003ccode\u003esearchroom\u003c/code\u003e for Room Number\u003c/i\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 38, please repeat step 2 onwards."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#### 5.3.4 Search for Room with Patient: `searchroom` "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "You can use this command to search for the room that the specified patient is residing in. "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Format:** `searchroom n/NAME`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "----------|-------------"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "`NAME` | The name of the patient whose room you are looking for. It is case-insensitive and must match exactly with the name of the patient that was input into Covigent previously."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. `searchroom n/Mary Doe` The room details of the room that Mary Doe resides in will be searched."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 39."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 39. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the first example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f40_searchroompatientcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 40. \u003ccode\u003esearchroom\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command. "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the success message shown in Figure 41 and the room that the specified patient resides in is shown in the room Details Panel."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f41_searchroompatientsuccess.png\" width\u003d\"620\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 41. A Successful Execution of \u003ccode\u003esearchroom\u003c/code\u003e for Patient\u003c/i\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 41, please repeat step 2 onwards."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.3.5 List the Current Rooms: `listroom`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "itssodium"
        },
        "content": "You can use this command to list all the rooms in the hotel together with information of whether the room is occupied or not, provided there is at least one room defined"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Format: `listroom` All the rooms in Covigent."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "itssodium"
        },
        "content": "1. `listroom` all the rooms will be listed"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "itssodium"
        },
        "content": "2. `listroom abdcfbhfr` all rooms will be listed"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "itssodium"
        },
        "content": "3. `listroom 21232198` all rooms will be listed"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "itssodium"
        },
        "content": "4. `listroom 123ebhbh11` all rooms will be listed"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If there are no rooms, then no rooms will be mentioned and informs user to initialize rooms using the `initroom` command."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* You need at least one room for this command to work.\u003cbr /\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to Rooms tab under the navigation bar as shown in Figure 42"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 42. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Next, type the command `listroom` in the Command Box as shown below"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f43_listroomcommand.png\" width\u003d\"550\" height\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 43. \u003ccode\u003elistroom\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box shows a success message \"All rooms are listed.\""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f44_listroom.png\" width\u003d\"550\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 44. A Successful Execution of \u003ccode\u003elistroom\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Noorul Azlina_"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.3.6 Find the First Free Room: `findemptyroom`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to find the room with the lowest room number that is free for use."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Format: `findemptyroom` The unoccupied room in Covigent with the lowest room number will be displayed on UI."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Example(s)**:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "itssodium"
        },
        "content": "1. `findemptyroom` gives room with the lowest room number"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "itssodium"
        },
        "content": "2. `findemptyroom 238405` gives room with the lowest room number"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "itssodium"
        },
        "content": "3. `findemptyroom ahfbhrf` gives room with the lowest room number"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "itssodium"
        },
        "content": "4. `findemptyroom hsbf835dfj` gives room with the lowest room number"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If there are no empty rooms then an error message informing hotel staff is mentioned."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to Rooms tab under the navigation bar as shown in Figure 45."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 45. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Next, type the command `findemptyroom` in the Command Box as shown below"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f46_findemptyroomcommand.png\" width\u003d\"550\" height\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 46. \u003ccode\u003efindemptyroom\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box shows a success message that \"Room Number 4 is empty\""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f47_findemptyroom.png\" width\u003d\"550\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 47. A Successful Execution of \u003ccode\u003efindemptyroom\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/p\u003e "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "itssodium"
        },
        "content": "_Written by: Noorul Azlina_"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.4 Task"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section contains all the commands related to tasks. You can [add](#541-add-a-task-to-a-room-addtask), [delete](#542-delete-a-task-from-a-room-deletetask), "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[edit](#543-edit-task-description-or-due-date-edittask) and [search](#545-search-tasks-before-a-given-date-searchtask) for a task in a room."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "If you want to see all the tasks, you can [list](#546-list-all-tasks-listtask) out all the tasks in Covigent. If you are unsure of how to interpret the command format, head back to [Command Format](#51-command-format) before executing the commands!"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.4.1 Add a Task to a Room: `addtask`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to add a task to a room. The task has the following details: description and due date."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `addtask r/ROOM_NUMBER d/DESCRIPTION [dd/DUE_DATE]`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`ROOM_NUMBER` | The room number of the room to which you want to add the task. It refers to the number displayed beside each room under the list of rooms. An example of the room number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_roomnumber.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`DESCRIPTION` | The description of the task. It must be between 1 and 4000 characters long. Note that empty inputs such as multiple spaces are considered 0 characters and are not allowed. The description can be related to the patient in the room, e.g. _Call the patient_; or related to the room, e.g. _Restock the supplies in this room_."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`DUE_DATE` | An optional field that is used to indicate by what date and time should the task be completed. It can in any of the following formats: \u003cbr /\u003e i) YYYYMMDD, e.g. `20210131` \u003cbr /\u003e ii) YYYYMMDD HHmm, e.g. `20210131 2359` \u003cbr /\u003e iii) D/M/YYYY, e.g. `31/1/2021` or `31/01/2021` \u003cbr /\u003e iv) D/M/YYYY HHmm, e.g. `31/1/2021 2359` or `31/01/2021 2359`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* After you add a task successfully, the task will appear in both the room you have added it to, and also in the Tasks tab."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `DUE_DATE` defaults to `-` if you leave out the field, i.e. the task has no due date."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If you do not provide the time for a `DUE_DATE`, it defaults to 0000 (12am)."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `addtask r/5 d/Running low on masks and needs to be restocked. dd/12/1/2021` A task with description _Running low on masks and needs to be restocked._ and due date _12 Jan 2021 0000_ is added to _Room #5_."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `addtask r/1 d/Remind patient to change bedsheets.` A task with description _Remind patient to change bedsheets._ and no due date is added to _Room #1_."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 48."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 48. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. For this example, the task will be added to _Room #5_. Please ensure there at least 5 rooms in Covigent, i.e. you can find _Room #5_ in the Rooms tab."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   If you cannot find _Room #5_, do not worry. That means that the room has not been created yet. To create the rooms, please key in `initroom 5` into the Command Box."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   For more details on creating room, refer to [Section 5.3.1, \"Initialise Rooms in Hotel\"](#531-initialise-rooms-in-hotel-initroom)."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key the command into the Command Box as shown below."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f49_addtaskcommand.png\" width\u003d\"600\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 49. \u003ccode\u003eaddtask\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003c/p\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays a success message. Click on _Room #5_ to view the newly added task. Refer to Figure 50 for the success message and to confirm that details of the task are displayed in the Details Panel."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f50_addtasksuccess.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 50. A Successful Execution of \u003ccode\u003eaddtask\u003c/code\u003e Command\u003c/i\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see the success message as shown in Figure 50, please check that there are at least 5 rooms in Covigent as per step 2, and that you have keyed in the command correctly as in step 3."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yee Hong_"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.4.2 Delete a Task from a Room: `deletetask`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to delete an existing task from a room."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `deletetask r/ROOM_NUMBER t/TASK_NUMBER`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`ROOM_NUMBER` | The room number of the room from which you want to delete the task. It refers to the number displayed beside each room under the list of rooms. An example of the room number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_roomnumber.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`TASK_NUMBER` | The task number of the task to be deleted. It refers to the number displayed beside each task in the Details Panel for rooms. An example of the task number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumber.png\" width\u003d\"250\" /\u003e\u003cbr /\u003e Alternatively, you may find the task number in the Tasks tab. Here is the task number of the same task, but found in the Tasks tab: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumbertaskstab.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* After you delete a task successfully, the task will not only disappear from room it was in, but also from the Tasks tab."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Once you delete a task, the `TASK_NUMBER` of the remaining tasks changes accordingly. Figure 51 illustrates how _Task 3_ is updated to _Task 2_ after the original Task 2 is deleted."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cimg src\u003d\"images/ug/f51_changingtasknumber.png\" height\u003d\"320\"\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cbr /\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003ci\u003eFigure 51. Task Number Changing after \u003ccode\u003edeletetask\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `deletetask r/5 t/1` The first task (_Task 1_) of _Room #5_ is deleted."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 52."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 52. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. For this example, _Task 1_ of _Room #5_ is deleted. Please replace the `5` with the `ROOM_NUMBER` of the room containing the task and the `1` with the `TASK_NUMBER` of the task that you want to delete."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key the command into the Command Box as shown below, replacing `ROOM_NUMBER` and `TASK_NUMBER` as necessary."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f53_deletetaskcommand.png\" width\u003d\"600\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 53. \u003ccode\u003edeletetask\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003c/p\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays a success message. You have successfully deleted _Task 1_ of _Room #5_ (see Figure 54)."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f54_deletetasksuccess.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 54. A Successful Execution of \u003ccode\u003edeletetask\u003c/code\u003e Command\u003c/i\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see a success message similar to Figure 54, please check that you have entered the correct `ROOM_NUMBER` and `TASK_NUMBER`."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yee Hong_"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.4.3 Edit Task Description or Due Date: `edittask`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to edit the description or due date of an existing task in a room."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `edittask r/ROOM_NUMBER t/TASK_NUMBER [d/DESCRIPTION] [dd/DUE_DATE]`"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`ROOM_NUMBER` | The room number of the room from which you want to edit the task. It refers to the number displayed beside each room under the list of rooms. An example of the room number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_roomnumber.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`TASK_NUMBER` | The task number of the task to be edited. It refers to the number displayed beside each task in the Details Panel for rooms. An example of the task number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumber.png\" width\u003d\"250\" /\u003e\u003cbr /\u003e Alternatively, you may find the task number in the Tasks tab. Here is the task number of the same task, but found in the Tasks tab: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumbertaskstab.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`DESCRIPTION` | The description of the task. It must be between 1 and 4000 characters long. Note that empty inputs such as multiple spaces are considered 0 characters and are not allowed. The description can be related to the patient in the room, e.g. _Call the patient_; or related to the room, e.g. _Restock the supplies in this room_."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`DUE_DATE` | An optional field that is used to indicate by what date and time should the task be completed. It can in any of the following formats: \u003cbr /\u003e i) YYYYMMDD, e.g. `20210131` \u003cbr /\u003e ii) YYYYMMDD HHmm, e.g. `20210131 2359` \u003cbr /\u003e iii) D/M/YYYY, e.g. `31/1/2021` or `31/01/2021` \u003cbr /\u003e iv) D/M/YYYY HHmm, e.g. `31/1/2021 2359` or `31/01/2021 2359`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* A task will not be edited if there are no changes to its description or due date."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If you do not provide the time for a `DUE_DATE`, it defaults to _0000_ (12am)."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `edittask r/5 t/1 d/Return a call to the patient. dd/12/1/2021 1500` The description and due date of the first task (_Task 1_) in _Room #5_ are updated to _Return a call to the patient._ and _12 Jan 2021 1500_ respectively."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `edittask r/2 t/2 dd/12/1/2021` The due date for the second task (_Task 2_) of _Room #2_ is updated to _12 Jan 2021 0000_. The description remains unchanged."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 55."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 55. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. For this example, _Task 1_ of _Room #5_ is edited. Please replace the `5` with the `ROOM_NUMBER` of the room containing the task and the `1` with the `TASK_NUMBER` of the task that you want to edit."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key the command into the Command Box as shown below, replacing `ROOM_NUMBER`, `TASK_NUMBER`, `DESCRIPTION`, and `DUE_DATE` as necessary."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f56_edittaskcommand.png\" width\u003d\"600\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 56. \u003ccode\u003eedittask\u003c/code\u003e Command to Edit Description and Due Date in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003c/p\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays a success message. Click on _Room #5_ to view the edited task. Refer to Figure 57 for the success message and to confirm that details of the edited task are displayed in the Details Panel."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f57_edittasksuccess.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 57. A Successful Execution of \u003ccode\u003eedittask\u003c/code\u003e Command to Edit Description and Due Date\u003c/i\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see a success message similar to Figure 57, please check that you have entered the correct `ROOM_NUMBER` and `TASK_NUMBER`, and at least one of the optional fields."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yee Hong_"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.4.4 Remove Due Date from a Task: `edittask`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "You can use this command to remove a due date from a task in a room."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `edittask r/ROOM_NUMBER t/TASK_NUMBER dd/-`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`ROOM_NUMBER` | The room number of the room from which you want to edit the task. It refers to the number displayed beside each room under the list of rooms. An example of the room number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_roomnumber.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`TASK_NUMBER` | The task number of the task to be edited. It refers to the number displayed beside each task in the Details Panel for rooms. An example of the task number highlighted in red: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumber.png\" width\u003d\"250\" /\u003e\u003cbr /\u003e Alternatively, you may find the task number in the Tasks tab. Here is the task number of the same task, but found in the Tasks tab: \u003cbr /\u003e\u003cimg src\u003d\"images/ug/icon_tasknumbertaskstab.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`-` | A `-` indicates the removal of a due date. "
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* The due date of a task cannot be removed if it does not originally have a due date."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* This is only one feature of the `edittask` command. Refer to the full command [here](#543-edit-task-description-or-due-date-edittask)."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Example(s):**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `edittask r/5 t/1 dd/-` The due date of the first task (_Task 1_) in Room #5 is removed, i.e. set to `-`."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Rooms tab under the navigation bar as shown in Figure 58."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigateroomstab.png\" width\u003d\"300\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 58. Navigation to Rooms Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. For this example, the due date of _Task 1_ of _Room #5_ is removed. Please replace the `5` with the `ROOM_NUMBER` of the room containing the task and the `1` with the `TASK_NUMBER` of the task from which you want to remove the due date."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key the command into the Command Box as shown below, replacing `ROOM_NUMBER`, `TASK_NUMBER` as necessary."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cimg src\u003d\"images/ug/f59_edittaskcommand_removeduedate.png\" width\u003d\"600\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003cbr /\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ci\u003eFigure 59. \u003ccode\u003eedittask\u003c/code\u003e Command to Remove Due Date in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   \u003c/p\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays a success message. Click on _Room #5_ to view the edited task. Refer to Figure 57 for the success message and to confirm that details of the edited task are displayed in the Details Panel."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f60_edittasksuccess_removeduedate.png\" width\u003d\"500\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 60. A Successful Execution of \u003ccode\u003eedittask\u003c/code\u003e Command to Remove Due Date\u003c/i\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. If you do not see a success message similar to Figure 60, please check that you have entered the correct `ROOM_NUMBER` and `TASK_NUMBER`, and that the task you want to edit has a due date."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Yee Hong_"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#### 5.4.5 Search Tasks before a Given Date: `searchtask`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "raymondge"
        },
        "content": "You can use this command to search all tasks before a date in Covigent."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Format**: `searchtask dd/DUE_DATE`"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "raymondge"
        },
        "content": "----------|-------------"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "`DUE_DATE` | The due date you are looking for. It can in any of the following formats: \u003cbr /\u003e i) YYYYMMDD, e.g. `20210131` \u003cbr /\u003e ii) YYYYMMDD HHmm, e.g. `20210131 2359` \u003cbr /\u003e iii) D/M/YYYY, e.g. `31/1/2021` or `31/01/2021` \u003cbr /\u003e iv) D/M/YYYY HHmm, e.g. `31/1/2021 2359` or `31/01/2021 2359`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**:information_source: Important Information:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If you do not provide the time for a `DUE_DATE`, it defaults to _0000_ (12am)."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Example(s)**:"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. `searchtask dd/12/1/2021` Search all tasks before and including 12 January 2021 0000."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Step By Step Usage:** \u003cbr /\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Tasks tab under the navigation bar as shown in Figure 61."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatetaskstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 61. Navigation to Tasks Tab\u003c/i\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Using the example, key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f62_searchtaskcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 62. \u003ccode\u003esearchtask\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. With reference to Figure 63, the Result Box displays the message, \"Tasks before the due date found.\"."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Now you can find tasks before and including _12 Jan 2021 0000_ can now be found in the list of tasks in Covigent."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f63_searchtasksuccess.png\" width\u003d\"480\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 63. A Successful Execution of \u003ccode\u003esearchtask\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "raymondge"
        },
        "content": "#### 5.4.6 List all Tasks: `listtask`"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "raymondge"
        },
        "content": "You can use this command to look at the list of all tasks in the task tab."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Format**: `listtask`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Example(s)**:"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "raymondge"
        },
        "content": "1. `listtask` Lists all tasks that are present in Covigent."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Step By Step Usage:**  \u003cbr /\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Navigate to the Tasks tab under the navigation bar as shown in Figure 64."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/navigatetaskstab.png\" width\u003d\"380\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "       \u003ci\u003eFigure 64. Navigation to Tasks tab\u003c/i\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f65_listtaskcommand.png\" width\u003d\"700\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 65. \u003ccode\u003elisttask\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Now you can find the full list of patient in Covigent."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f66_listtasksuccess.png\" width\u003d\"480\" height\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 66. A Successful Execution of \u003ccode\u003elisttask\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "raymondge"
        },
        "content": "_Written by: Wai Lok_"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.5 View help: `help`"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "If you encounter any issues using Covigent and need to access this user guide again, simply key in `help` into the Command Box."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Format:** `help`"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:**  \u003cbr /\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f67_helpcommand.png\" width\u003d\"750\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 67. \u003ccode\u003ehelp\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. The Result Box displays the message as shown in Figure 68."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f68_helpresultdisplay.png\" width\u003d\"750\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 68. Result Display Box\u003c/i\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. A new help window appears."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f69_helpwindow.png\" width\u003d\"700\" height\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 69. Help Window\u003c/i\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by Yun Qing_"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.6 Exit Covigent: `exit`"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "You can use this command to exit from Covigent."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Format:** `exit`"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Step By Step Usage:**\u003cbr /\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Key in the command into the Command Box as shown below."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cimg src\u003d\"images/ug/f70_exitcommand.png\" width\u003d\"750\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cbr /\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003ci\u003eFigure 70. \u003ccode\u003eexit\u003c/code\u003e Command in Command Box\u003c/i\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Press Enter to run the command."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. Covigent exits and closes."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "_Written by: MingDe_"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### 5.7 Autosave"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 6. Command Summary "
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This section provides a quick summary of the commands for [Patient](#61-patient), [Room](#62-room), [Task](#63-task) and [General](#64-general). For the detailed explanation of the usage of each command, head on to the [Features](#5-features) section to find out more."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 6.1 Patient"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Add Patient** | `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]` \u003cbr /\u003e e.g., addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Delete Patient** | `deletepatient NAME` \u003cbr /\u003e e.g., deletepatient Mary Doe"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Edit Patient** | `editpatient NAME [n/NAME] [t/TEMPERATURE] [d/PERIOD_OF_STAY] [p/PHONE_NUMBER] [a/AGE] [c/COMMENT]`\u003cbr /\u003e e.g., editpatient James Lee t/36.5"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Search Patient** | `searchpatient [n/NAME] [tr/TEMPERATURE_RANGE]` \u003cbr /\u003e e.g., searchpatient tr/36.5-36.7"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**List Patients** | `listpatient`\u003cbr /\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 6.2 Room"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Initialise Room** | `initroom NUMBER_OF_ROOMS` \u003cbr /\u003e e.g., initroom 123"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Allocate Patient to Room** | `allocateroom ROOM_NUMBER n/NAME` \u003cbr /\u003e e.g., allocateroom 5 n/David Li"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Search by Room Number** | `searchroom r/ROOM_NUMBER`\u003cbr /\u003e e.g., searchroom r/15"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Search for Room with Patient** | `searchroom n/NAME`\u003cbr /\u003e e.g., searchroom n/Jane Doe"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**List Rooms** | `listroom` \u003cbr /\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Find Empty Room** | `findemptyroom` \u003cbr /\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 6.3 Task"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Add Task to Room** | `addtask r/ROOM_NUMBER d/DESCRIPTION [dd/DUE_DATE]` \u003cbr /\u003e e.g., addtask d/Running low on masks and needs to be restocked. r/5 dd/12/1/2021 "
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Delete Task from Room** | `deletetask r/ROOM_NUMBER t/TASK_NUMBER` \u003cbr /\u003e e.g., deletetask r/5 t/1"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Edit Task Description or Due Date** | `edittask r/ROOM_NUMBER t/TASK_NUMBER [d/DESCRIPTION] [dd/DUE_DATE]` \u003cbr /\u003e e.g., edittask r/5 t/1 dd/12/1/2021 1500"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Remove Due Date from a Task** | `edittask r/ROOM_NUMBER t/TASK_NUMBER dd/-` \u003cbr /\u003e e.g., edittask r/5 t/1 dd/-"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Search Task** | `searchtask dd/DUE_DATE` \u003cbr /\u003e e.g., searchtask dd/12/1/2021"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**List Tasks** | `listtask` \u003cbr /\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 6.4 General"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "_Written by: Yun Qing_"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## 7. FAQ"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Q**: Why does the output sometimes appear red and sometimes black?\u003cbr /\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**A**: If the command input is given in the wrong format, then the output is given in red. Also the correct format for the particular command is given.\u003cbr /\u003e "
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        "
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Example:\u003cbr /\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Invalid command format! "
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Please give the number of digits in numbers"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Example: addRooms 200"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Q**: Will data be stored in the system after closing the app?\u003cbr /\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**A**: The data is stored in the hard disk and therefore would not be deleted even if you close the app"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Q**: How do I look at all the rooms and patient when only one is being displayed after commands such as `findroom`?\u003cbr /\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**A**: Use the command `listroom` for rooms and `listpatient` for patients."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Q**: What should I do if nothing happens when I double click the Jar file?\u003cbr /\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**A**: Open Terminal(Mac)/Command Prompt(Windows) . Type `cd [PATH TO DIRECTORY CONTAINING .JAR FILE]` . Type java `-jar covigent.jar` to run the application."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "_Written by: Noorul Azlina_\u003cbr /\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 616,
      "LeeMingDe": 115,
      "chiamyunqing": 190,
      "-": 112,
      "raymondge": 104,
      "itssodium": 65
    }
  },
  {
    "path": "docs/diagrams/plantuml/AddPatientSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \":CovigentAppParser\" as CovigentAppParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \":AddPatientCommandParser\" as AddPatientCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \"d:AddPatientCommand\" as AddPatientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[-\u003e LogicManager : execute(\"addpatient n/Alex a/36\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "LogicManager -\u003e CovigentAppParser : parseCommand(\"addpatient n/Alex a/36\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate CovigentAppParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "create AddPatientCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "CovigentAppParser -\u003e AddPatientCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate AddPatientCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommandParser --\u003e CovigentAppParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate AddPatientCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "CovigentAppParser -\u003e AddPatientCommandParser : parse(\"n/Alex a/36\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate AddPatientCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "create AddPatientCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommandParser -\u003e AddPatientCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate AddPatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommand --\u003e AddPatientCommandParser :"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate AddPatientCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommandParser --\u003e CovigentAppParser :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate AddPatientCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommandParser -[hidden]-\u003e CovigentAppParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "destroy AddPatientCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "CovigentAppParser --\u003e LogicManager :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate CovigentAppParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "LogicManager -\u003e AddPatientCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate AddPatientCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommand -\u003e Model : hasPatient(Patient)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Model --\u003e AddPatientCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommand -\u003e Model : addPatient(Patient)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Model --\u003e AddPatientCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "CommandResult --\u003e AddPatientCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "AddPatientCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate AddPatientCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "chiamyunqing": 74
    }
  },
  {
    "path": "docs/diagrams/plantuml/AllocateRoomActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "skinparam activity {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  BackgroundColor 176CC1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  FontName Calibri"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  FontColor White"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  BorderColor 176CC1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "skinparam activityDiamond {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    BackgroundColor 176CC1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    BorderColor 176CC1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ":user inputs allocateroom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if () then ([\"-\" is input as patient name])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    if () then ([No Patient in Room])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    :Show error message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    :Remove patient from room;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    if () then ([Patient name is valid])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    :Allocate patient to room;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    :Show error message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 34
    }
  },
  {
    "path": "docs/diagrams/plantuml/AllocateRoomSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":CovigentAppParser\" as CovigentAppParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":AllocateRoomCommandParser\" as AllocateRoomCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \"d:AllocateRoomCommand\" as AllocateRoomCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[-\u003e LogicManager : execute(\"allocateroom 1 n/Alex\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "LogicManager -\u003e CovigentAppParser : parseCommand(\"allocateroom 1 n/Alex\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate CovigentAppParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create AllocateRoomCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser -\u003e AllocateRoomCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate AllocateRoomCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommandParser --\u003e CovigentAppParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate AllocateRoomCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser -\u003e AllocateRoomCommandParser : parse(\"1 n/Alex\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate AllocateRoomCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create AllocateRoomCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommandParser -\u003e AllocateRoomCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate AllocateRoomCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommand --\u003e AllocateRoomCommandParser : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate AllocateRoomCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommandParser --\u003e CovigentAppParser : d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate AllocateRoomCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommandParser -[hidden]-\u003e CovigentAppParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "destroy AllocateRoomCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate CovigentAppParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "LogicManager -\u003e AllocateRoomCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate AllocateRoomCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommand -\u003e Model : setSingleRoom(roomToEdit, editedRoom)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Model --\u003e AllocateRoomCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CommandResult --\u003e AllocateRoomCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "AllocateRoomCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate AllocateRoomCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 70
    }
  },
  {
    "path": "docs/diagrams/plantuml/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"deletepatient Alex Yeoh\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"deletepatient Alex Yeoh\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePatient(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : savePatientRecords(covigentApp)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/plantuml/DeletePatientSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":CovigentAppParser\" as CovigentAppParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":DeletePatientCommandParser\" as DeletePatientCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \"d:DeletePatientCommand\" as DeletePatientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[-\u003e LogicManager : execute(\"deletepatient alex\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "LogicManager -\u003e CovigentAppParser : parseCommand(\"deletepatient 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate CovigentAppParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create DeletePatientCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser -\u003e DeletePatientCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate DeletePatientCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommandParser --\u003e CovigentAppParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate DeletePatientCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser -\u003e DeletePatientCommandParser : parse(\"alex\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate DeletePatientCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create DeletePatientCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommandParser -\u003e DeletePatientCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate DeletePatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommand --\u003e DeletePatientCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate DeletePatientCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommandParser --\u003e CovigentAppParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate DeletePatientCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommandParser -[hidden]-\u003e CovigentAppParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "destroy DeletePatientCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate CovigentAppParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "LogicManager -\u003e DeletePatientCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate DeletePatientCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommand -\u003e Model : deletePatient(alex)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Model --\u003e DeletePatientCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CommandResult --\u003e DeletePatientCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "DeletePatientCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate DeletePatientCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 69
    }
  },
  {
    "path": "docs/diagrams/plantuml/EditTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "participant \":EditTaskCommandParser\" as EditTaskCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "participant \":EditTaskCommand\" as EditTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[-\u003e EditTaskCommandParser : parse(\"r/2 t/1 d/HelloWorld\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate EditTaskCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "create EditTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommandParser -\u003e EditTaskCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate EditTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand --\u003e EditTaskCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate EditTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[\u003c-- EditTaskCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate EditTaskCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommandParser -[hidden]-\u003e["
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "destroy EditTaskCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[-\u003e EditTaskCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate EditTaskCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand -\u003e Model : getRoomWithRoomNumber(2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Model --\u003e EditTaskCommand : room2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand -\u003e Model : getTaskFromRoomWithTaskIndex(1, room2)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Model --\u003e EditTaskCommand : task1OfRoom2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand -\u003e EditTaskCommand : createEditedTask(\"HelloWorld\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate EditTaskCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand --\u003e EditTaskCommand : editedTask"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate EditTaskCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand -\u003e Model : setTaskToRoom(task1OfRoom2, editedTask, room2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Model --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "EditTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "CommandResult --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[\u003c-- EditTaskCommand : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deactivate EditTaskCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 66
    }
  },
  {
    "path": "docs/diagrams/plantuml/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Class CovigentAppParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "LogicManager --\u003e\"1\" CovigentAppParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "CovigentAppParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 4,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/plantuml/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Interface ReadOnlyUserPrefs\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package PatientRecords {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class PatientRecords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package RoomList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package RoomTaskRecords {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomTaskRecords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "ModelManager o--\u003e \"1\" PatientRecords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "ModelManager o--\u003e \"1\" RoomList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "ModelManager o--\u003e \"1\" RoomTaskRecords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 14,
      "-": 25
    }
  },
  {
    "path": "docs/diagrams/plantuml/PatientRecordsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package PatientRecords \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class PatientRecords"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Interface ReadOnlyList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package Patient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Age"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class PeriodOfStay"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Temperature"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Comment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class UniquePatientList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "HiddenOutside ..\u003e PatientRecords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "PatientRecords .left.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "PatientRecords *--\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "UniquePatientList o--\u003e \"*\" Patient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"1\" Age"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"1\" PeriodOfStay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"1\" Temperature"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Patient *--\u003e \"0..1\" Comment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Phone -[hidden]right-\u003e Age"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Age -[hidden]right-\u003e PeriodOfStay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "PeriodOfStay -[hidden]right-\u003eTemperature"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Temperature -[hidden]right-\u003eComment"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 43
    }
  },
  {
    "path": "docs/diagrams/plantuml/RoomListClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package RoomList \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Interface ReadOnlyList\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package Room {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Room"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class UniqueRoomList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomTasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class DateTimeDue"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class TaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "HiddenOutside ..\u003e RoomList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomList .left.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomList *--\u003e \"1\" UniqueRoomList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "UniqueRoomList o--\u003e \"*\" Room"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Room *--\u003e \"0..1\" Patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Room *--\u003e \"1\" RoomTasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTasks .left.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTasks *--\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "TaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Task *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Task *--\u003e \"0..1\" DateTimeDue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 41
    }
  },
  {
    "path": "docs/diagrams/plantuml/RoomTaskRecordsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package RoomTaskRecords \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomTaskRecords"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Interface ReadOnlyList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Package RoomTaskRecords {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomTaskRecords"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class RoomTaskAssociation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Class Room"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTaskRecords .left.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTaskRecords *--\u003e \"*\" RoomTaskAssociation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTaskAssociation *--\u003e\"1\" Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "RoomTaskAssociation *--\u003e \"1\" Room"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 25
    }
  },
  {
    "path": "docs/diagrams/plantuml/TaskAlternativeClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Interface ReadOnlyList \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    getReadOnlyList(): ObservableList\u003cT\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Package Room \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Room {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +addtask(Task)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +deleteTask(Task)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +setTask(Task, editedTask: Task)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Package Task \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class TaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class DateTimeDue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "TaskList -.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Room *--r\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "TaskList *--\u003e \"*\" Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Task *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Task *--\u003e \"0..1\" DateTimeDue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Description -[hidden]right-\u003e DateTimeDue"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 35
    }
  },
  {
    "path": "docs/diagrams/plantuml/TaskClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Interface ReadOnlyList \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    getReadOnlyList(): ObservableList\u003cT\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Package Room \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Room"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class RoomTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +addTask(Task)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +removeTask(Task)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        +setTask(Task, editedTask: Task)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Room *--r\u003e \"1\" RoomTasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "RoomTasks -.|\u003e ReadOnlyList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Package Task \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class Description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Class DateTimeDue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "RoomTasks ..\u003e Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "RoomTasks *--l\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "TaskList *--\u003e \"*\" Task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Task *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Task *--\u003e \"0..1\" DateTimeDue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Description -[hidden]right-\u003e DateTimeDue"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 38
    }
  },
  {
    "path": "docs/diagrams/plantuml/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class PatientListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomDetailsPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomTaskListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomTaskDetailsPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class PatientCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "MainWindow *-down-\u003e PatientListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "MainWindow *-down-\u003e RoomTaskListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "MainWindow *-down-\u003e RoomListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "PatientListPanel .right-\u003e PatientCard : defined by \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomTaskListPanel *.left-\u003e TaskCard : defined by \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomTaskListPanel *.right-\u003e RoomTaskDetailsPanel : defined by \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomListPanel *.left-\u003e RoomCard : defined by \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomListPanel *.right-\u003e RoomDetailsPanel : defined by \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomDetailsPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "PatientListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomTaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "PatientCard --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "PatientListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "raymondge": 25
    }
  },
  {
    "path": "docs/diagrams/plantuml/UiClassDiagram1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class RoomCard"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class PatientCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "RoomCard -down-\u003e Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "TaskCard -down-\u003e Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "PatientCard -down-\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Model -[hidden]left- UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "raymondge": 25
    }
  },
  {
    "path": "docs/diagrams/plantuml/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    AttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    AttributeIconSize 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "-": 74
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "title: Covigent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities**. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "-": 12
    }
  },
  {
    "path": "docs/team/chiamyunqing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "title: Chiam Yun Qing\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## Project: Covigent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop application that is used to aid hotel staff handle the Covid-19 situation better. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **New Feature**: Added the ability to add a patient to Covigent and the attributes of the patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * What it does: allows the user to create a new patient with attributes (name, period of stay, temperature, age, phone and an optional comment) in Covigent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Justification: This feature is highly necessary because the user will not be able to manage the quarantine facility with Covigent if new patient cannot be added. The attributes of the patient such as temperature and period of stay are also central and important in the context of a quarantine facility."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Highlights: This enhancement affects patient-related commands to be added in future. In particular, if the attributes of the patient are not properly designed in an OOP fashion to be extensible, future developers may find it difficult to make any updates to the attributes of patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **New Feature**: Added the ability to delete a patient from Covigent."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * What it does: allows the user to remove a patient from Covigent when the patient is no longer staying in the quarantine facility."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Justification: This feature improves the product significantly because the user may no longer want to keep track of the data of patient that are no longer staying in the quarantine facility. This allows the user to focus only on patients residing in the quarantine facility."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **New Feature**: Added the ability to search for a room in Covigent."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * What it does: allows the user to search for a room that a particular patient is residing in or search for a room with a given room number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Justification: This feature improves the user experience of the product significantly because it makes it easier for the user to search for a room to get the room details easily without having to scroll through the room list manually."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dchiamyunqing\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Managed release [v1.3](https://github.com/AY2021S1-CS2103T-W12-1/tp/releases) on GitHub."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Modified the GUI from AB3 to get a basic structure for the GUI of Covigent. (Pull request [\\#24](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/24))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Improved the GUI by adding in a panel to display patient information. (Credit: Code reused from LeeMingDe)(Pull requests [\\#110](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/110))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Wrote unit tests for `addpatient`, `deletepatient`, `searchroom`, `allocateroom` and `listroom` commands and patient attributes.(Pull requests [\\#10](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/10), [\\#59](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/59), [\\#60](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/60), [\\#99](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/99))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Refactored the codebase to reflect the functionalities of classes clearly. (Pull request [\\#80](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/80))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * Added documentation for the features `addpatient`, `deletepatient`, `searchroom`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `help`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * Added a command summary section for user to refer to easily."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * Updated the implementation of `Model Component`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    * Added the implementation details for Patient and its CRUD operations."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/12), [\\#26](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/26), [\\#27](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/27), [\\#79](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/79), [#115](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/115)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  * Reported bugs and provided suggestions for another team, Homerce: [Link](https://github.com/chiamyunqing/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "chiamyunqing": 54
    }
  },
  {
    "path": "docs/team/itssodium.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "title: Noorul Azlina\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "## Project: Covigent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Covigent is a desktop application that is used to aid hotel staff handle the Covid-19 situation better. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **New Feature**: Added the ability to search for an empty room."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * What it does: allows user to find out an empty room, if there are any. This information can be used to add in the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Justification: This feature allows the user to check the room number for an empty room, then inserting the patient there."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **New Feature**: Added the ability to initialise the a certain number of rooms."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * What it does: allows user to define a certain number of rooms to exist in the hotel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Justification: This feature allows the user to continuously define the number of rooms as needed as the users can make a mistake in defining them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Highlights: This feature retains the information that is previously stored in the rooms and does not delete them. However, if user were to define the number of rooms less than existing number of occupied rooms, then error is thrown as it is not practical for visitors to leave hotel."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **New Feature**: Added the ability to list all rooms defined by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * What it does: allows user to look at all rooms defined by user as the UI can change when displaying an empty room."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ditssodium)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **Enhancement to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * move tab panel from top to the left [\\#105](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/105)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * wrote unit test cases for `initroom` and `findemptyroom` commands and room attributes. [\\#21](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/21)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **Additional Code to aid Feature**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Added most of the classes for rooms [\\#26](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/26)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Handled storage in Json format for Rooms and Tasks. [\\#64](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/64), [\\#84](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/84)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    * Added documentation for features `initroom`, `findemptyroom` and `listroom`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    * Add FAQ section for UG to answer common questions asked my users"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    * Updated the implementation for Storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    * Added implementation details for Room"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * Reported Bugs and suggestions for another team, TrackIt [link](https://github.com/itssodium/ped/issues)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#69](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/69), [\\#85](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/85) and [\\#90](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/90)"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "itssodium": 42
    }
  },
  {
    "path": "docs/team/leemingde.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "title: Lee Ming De\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "## Project: Covigent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Covigent is a desktop application that is used to aid hotel staff handle the Covid-19 situation better. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **New Feature**: Added the ability to edit a patient\u0027s information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * What it does: allows the user to change a patient\u0027s information (eg, name, temperature, age) after a patient has been added to Covigent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in typing in the details of the patient and the application should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **New Feature**: Added the ability for a user to allocate a patient to a room."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * What it does: allows the user to allocate a patient to a room or remove a patient from a room."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Justification: This feature improves the product because it allows the user to keep track of the room the patient is in which fulfills the functional requirements of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dleemingde)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Updated the GUI color scheme"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Improved the GUI by adding in a panel to display information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Added CSS file for the details panel which was later reused by others."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Testing**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Added unit tests for the `allocateRoomParser`, `editPatientCommand`, and `editPatientCommandParser` features."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Added integration tests for `allocateRoomCommand`, `editPatientCommand`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    * Added documentation for the features `editpatient` and `allocateroom` [\\#44](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/44)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Added introduction for Covigent [\\#44](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/44)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    * Added implementation details of the `allocateroom` and `logging` features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    * Added implementation details of GUI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    * Added/updated UML diagrams for `Logic Component`, `allocateroom`, `UI` implementation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    * Helped with formatting for the entire developer guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#10](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/10),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  [\\#26](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/26), [\\#27](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/27),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  [\\#69](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/69), [\\#80](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/80),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  [\\#84](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/84), [\\#99](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/99)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  * Reported bugs and provided suggestions for StonksBook, a project by another teams in the class: [link](https://github.com/leemingde/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 44
    }
  },
  {
    "path": "docs/team/raymondge.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "title: Ge Wai Lok\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "## Project: Covigent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Covigent is a desktop application that is used to aid hotel staff handle the Covid-19 situation better. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **New Feature**: Added the ability to search for patients based on name or temperature range."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * What it does: allows user to search for patient based on the input, it can be either a sub-name of the patient\u0027s name, or a temperature range. All patients matching the criteria will be displayed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Justification: This feature improves the product by providing the user to find the patients in mind in a more efficient way."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **New Feature**: Added the ability to search for tasks based on due date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * What it does: allows user look for tasks before a given due date(deadline)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Justification: This feature improves the product by providing the user to prioritise the tasks. The users may use the search result to decide what task to complete first."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Highlights: This feature displays the search result based on the Room number, tasks are grouped to be displayed under room number in the task tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **New Feature**: Added the ability to list all tasks defined by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * What it does: allows user to look at all tasks defined by user as the UI can change when adding, searching or deleting tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003draymondge)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Wrote additional test cases for temperatureRange class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **Enhancements Code to aid Feature**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Added most of the implementation of the UI and storage for task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * Improved css for task to make the UI for tasks show one scollbar only instead of showing two scollbar, the problem was due to the implementation of task UI using the room UI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      * Added documentation for the features `searchpatient` , `listpatient`, `searchtask` and `listtask`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      * Added documentation for the section `About this Guide`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      * Added implementation details of the `searchpatient` , `listpatient`, `searchtask` and `listtask` feature."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      * Added documentation and UML diagram for the section `UI`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    * PRs reviewed (with non-trivial review comments): [\\#72](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/72), [\\#79](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/79), [\\#80](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/80)"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "raymondge": 40
    }
  },
  {
    "path": "docs/team/w-yeehong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "title: Wee Yee Hong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "## Project: Covigent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Covigent is a desktop application that is used to aid hotel staff handle the Covid-19 situation better. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **New Feature**: Added the ability to add a task to a room."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * What it does: allows the user to create a new task with description and due date in any room in Covigent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Justification: This feature improves the product significantly because a user may want to keep track of time-critical tasks related to patients in each of the rooms."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **New Feature**: Added the ability to delete a task from a room."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * What it does: allows the user remove any tasks that she has completed or does not need from a room."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Justification: This feature improves the product significantly because too many tasks in a room can clutter the user interface and make it more difficult for the user to organize her tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **New Feature**: Added the ability to edit the information of a task in a room."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * What it does: allows the user to change the description or due date after a task has been added to a room in Covigent."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   * Justification: This feature improves the product significantly because a user can make mistakes in typing in the details of a task and the application should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **New Feature**: Added the ability to view a list of tasks in the user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * What it does: allows the user to see in which rooms the tasks can be found and get an overview of all tasks that are in Covigent, without needing to know the room number of the room in which the task has been added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Justification: This feature improves the product significantly because a user may forget which room she has added a task to and wants a quick way to look up the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **New Feature**: Allowed commands to support different date-time formats."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * What it does: allows the user to select their preferred date-time formats when using commands that have a date or time component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Justification: This feature improves the product because it allows the user to comfortably use a common and familiar date-time format (e.g. dd/MM/YYYY) in her country without memorizing a specific format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dw-yeehong)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Updated GUI color scheme and separate CSS into multiple files based on the names of the views for easier lookup (Pull request [\\#101](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/101))."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Refactored and repackaged the codebase for better organization of files based on the model type handled (Pull requests [\\#22](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/22), [#107](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/107))."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Reduced code duplication (Pull request [\\#154](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/154))."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Testing**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Added unit tests to test and validate that the description and due date of a task should conform to a specified format. (Pull requests [\\#27](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/27), [\\#228](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/228))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Added unit tests for the `addtask`, `deletetask`, and `edittask` features (Pull requests [\\#27](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/27), [\\#78](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/78), [\\#89](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/89), [\\#242](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/242))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Added documentation for the features `addtask`, `deletetask`, and `edittask`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Improved \"Getting Started\" section for Covigent"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Added the implementation details for `Task` and its CRUD operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Added the section on planned features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    * Updated to reflect the high-level view of the architecture of Covigent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#10](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/10),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   [\\#12](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/12), [\\#26](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/26),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   [\\#60](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/60), [\\#64](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/64),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   [\\#72](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/72), [\\#100](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/100),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "   [\\#105](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/105), [\\#244](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/244)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Reported bugs and provided suggestions for Jarvis, a project by another teams in the class: [link](https://github.com/w-yeehong/ped/issues)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * Integrated a third party library (Mockito) to the project ([\\#104](https://github.com/AY2021S1-CS2103T-W12-1/tp/pull/104))"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 61
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.7-bin.zip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.PatientRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.RoomRecordsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CovigentApp ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecordsStorage patientRecordsStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new JsonPatientRecordsStorage(userPrefs.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomRecordsStorage roomOccupancyStorage \u003d new JsonRoomOccupancyStorage("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                userPrefs.getRoomsOccupiedFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        storage \u003d new StorageManager(patientRecordsStorage, roomOccupancyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s covigent app and RoomList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * The data from the sample covigent app and covigentApp will be used instead if {@code storage}\u0027s covigent app is"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * not found,or an empty covigent app will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cReadOnlyList\u003cPatient\u003e\u003e patientRecordsOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ReadOnlyList\u003cPatient\u003e initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ReadOnlyList\u003cRoom\u003e initialRoomList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            readOnlyRoomOccupancy \u003d storage.readOnlyRoomOccupancy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d readOnlyRoomOccupancy.orElseGet(SampleDataUtil::getSampleRoomList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"Room Data file not in the correct format. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            patientRecordsOptional \u003d storage.readPatientRecords();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (!patientRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CovigentApp\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d patientRecordsOptional.orElseGet(SampleDataUtil::getSampleCovigentApp);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"Patient Data file not in the correct format. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d new PatientRecords();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d new PatientRecords();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new ModelManager(initialData, initialRoomList, userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.info(\"Starting CovigentApp \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "LeeMingDe": 11,
      "-": 163,
      "raymondge": 9,
      "itssodium": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 750;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String LOG_FILE \u003d \"covigentapp.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // common"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_COMMANDS \u003d \"Too many commands entered!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // patients"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_NAME \u003d \"The patient name provided \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"cannot be found in Covigent.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_LISTED_OVERVIEW \u003d \"%1$d patient listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // rooms"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_NUMBER \u003d \"The room number provided \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"cannot be found in Covigent.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_ALREADY_ASSIGNED \u003d \"Patient has already been assigned a room.\\nPlease\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \" clear patient from the room first.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_PATIENT_NO_ROOM \u003d \"Patient is not assigned to any room yet.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_INDEX \u003d \"The task number provided \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"cannot be found in the room.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_EDITED \u003d \"Task has not been edited.\\nPlease ensure that at least\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" one valid and different value has been provided.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 18,
      "LeeMingDe": 3,
      "chiamyunqing": 2,
      "-": 11,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.TemporalQuery;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Helper functions for handling date and date-time objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date formats"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_YEAR_MONTH_DAY \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date-time formats"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 or 20200920 2359 */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"yyyyMMdd\", \" HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 (time defaults to 0000) or 20 Sep 2020 2359 */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d MMM yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 (time defaults to 0000) or 20/09/2020 2359 */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d/M/yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the text into a date-time object (e.g. {@code LocalDate} or {@code LocalDateTime})"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * using all given {@code DateTimeFormatter} and returns the first successful result."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The text is parsed using each formatter in turn. No output is generated if a formatter fails to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse the text. However, a {@code DateTimeParseException} is thrown if all formatters fail."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code TemporalQuery\u003cT\u003e} is typically a method reference to a"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code from(TemporalAccessor)} method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *     LocalDate date \u003d DateTimeUtil.parseFirstMatching(text, LocalDate::from, formatter1, formatter2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003c/pre\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For more details, refer to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse-java.lang.CharSequence-java.time.temporal.TemporalQuery-"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text The text to parse, cannot be null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param query A way to retrieve information from a temporal-based object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param formatters Formatters to parse the text with, cannot be null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param \u003cT\u003e A date-time class, usually a {@code TemporalAccessor}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The date-time object parsed from text."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws DateTimeParseException if text cannot be parsed with any of the formatters or no formatters provided."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static \u003cT\u003e T parseFirstMatching("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            CharSequence text, TemporalQuery\u003cT\u003e query, DateTimeFormatter... formatters) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(text, query, formatters);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return formatter.parse(text, query);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Current formatter is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Proceed to test next formatter."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String exceptionMessage \u003d String.format(\"Unable to parse %s\", text);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int errorIndex \u003d 0; // index in parsed text that was invalid, set to 0 to indicate entirety of text"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new DateTimeParseException(exceptionMessage, text, errorIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DateTimeFormatter} with default values of time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If a time conforms to the time format, the {@code DateTimeFormatter} sets the parsed date-time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * to that value. Otherwise, the hour and minute of the parsed date-time are set to 0."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dateFormat The pattern for the date portion of a string parsed by  a{@code DateTimeFormatter}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param timeFormat The pattern for the time portion of a string parsed by a {@code DateTimeFormatter}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DateTimeFormatter} that defaults the hour and minute to 0 if time does not conform to format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static DateTimeFormatter createFormatterWithOptionalTime(String dateFormat, String timeFormat) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalStart()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(timeFormat)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalEnd()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)})}},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns Covigent."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @see seedu.address.model.Model#getPatientRecords()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ReadOnlyList\u003cPatient\u003e getCovigentApp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Returns an unmodifiable view of the list of rooms. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rooms. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of room-task associations. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoomTaskAssociation\u003e getFilteredRoomTaskRecords();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the user prefs\u0027 Covigent file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "LeeMingDe": 3,
      "chiamyunqing": 1,
      "-": 43,
      "raymondge": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.CovigentAppParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final CovigentAppParser covigentAppParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        covigentAppParser \u003d new CovigentAppParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Command command \u003d covigentAppParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            storage.saveRoomsInformation(model.getModifiableRoomList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            storage.savePatientRecords(model.getPatientRecords());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cPatient\u003e getCovigentApp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getPatientRecords();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getRoomListObservableList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return model.getCovigentAppFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getFilteredRoomList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoomTaskAssociation\u003e getFilteredRoomTaskRecords() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getFilteredRoomTaskRecords();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "LeeMingDe": 8,
      "chiamyunqing": 3,
      "-": 71,
      "raymondge": 5,
      "itssodium": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Adds a patient to the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpatient\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to Covigent. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"TEMPERATURE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENTS]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"37.0 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"20200914-20200928 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"22 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_COMMENTS + \"Vegan,asthmatic \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in Covigent.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public AddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof AddPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "chiamyunqing": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Deletes a patient identified by the patient\u0027s name from the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * If the patient resides in a room, the patient will be removed and the room will be set to unoccupied."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepatient\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Deletes the patient identified by the patient\u0027s name used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Parameters: NAME (must match exactly with the name of the patient to be deleted from the patient list)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Mary Doe\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Name nameOfPatientToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a DeleteCommand to delete the patient with the name {@code String}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param nameOfPatientToDelete name in the filtered patient list to be deleted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public DeletePatientCommand(Name nameOfPatientToDelete) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.nameOfPatientToDelete \u003d nameOfPatientToDelete;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e patientToDelete \u003d model.getPatientWithName(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (patientToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (model.isPatientAssignedToRoom(nameOfPatientToDelete)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            model.removePatientFromRoom(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient deletedPatient \u003d patientToDelete.get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.deletePatient(deletedPatient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, deletedPatient));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof DeletePatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 nameOfPatientToDelete.equals(((DeletePatientCommand) other).nameOfPatientToDelete)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 54,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@@author LeeMingDe"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Edits a patient in the app with the selected name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Input of name is case insensitive."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpatient\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"by the patient\u0027s name used in the displayed patient list. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Parameters: NAME (must match exactly with the name of the patient to be edited in the patient list) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_TEMP + \"TEMPERATURE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_AGE + \"AGE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENT] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" john \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + PREFIX_TEMP + \"36.5\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in Covigent.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Name patientToBeEdited;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs an EditCommand to edit the patient with the name {@code String}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patientToBeEdited name in the filtered patient list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand(Name patientToBeEdited, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(patientToBeEdited, editPatientDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patientToBeEdited \u003d patientToBeEdited;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Optional\u003cPatient\u003e optionalPatient \u003d model.getPatientWithName(patientToBeEdited);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (optionalPatient.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient patientToEdit \u003d optionalPatient.get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.updateRoomListWhenPatientsChanges(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patientToEdit Patient that is to be edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editPatientDescriptor Details to edit the patient with."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Patient that has been edited."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert editPatientDescriptor !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Temperature updatedTemperature \u003d editPatientDescriptor.getTemperature().orElse(patientToEdit.getTemperature());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Age updatedAge \u003d editPatientDescriptor.getAge().orElse(patientToEdit.getAge());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        PeriodOfStay updatedPeriodOfStay \u003d editPatientDescriptor"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .getPeriodOfStay()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .orElse(patientToEdit.getPeriodOfStay());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Comment updatedComment \u003d editPatientDescriptor.getComment().orElse(patientToEdit.getComment());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new Patient(updatedName, updatedTemperature, updatedPeriodOfStay,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                updatedPhone, updatedAge, updatedComment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) { //short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof EditPatientCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand e \u003d (EditPatientCommand) other; // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return patientToBeEdited.equals(e.patientToBeEdited)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Temperature temperature;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * Constructs a EditPatientDescriptor object with the following fields."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * @param toCopy EditPatientDescriptor to copy the fields from."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setTemperature(toCopy.temperature);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setPeriodOfStay(toCopy.periodOfStay);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, temperature, age, periodOfStay, comment);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setTemperature(Temperature temperature) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cTemperature\u003e getTemperature() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(temperature);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setPeriodOfStay(PeriodOfStay periodOfStay) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cPeriodOfStay\u003e getPeriodOfStay() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(periodOfStay);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other; // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getTemperature().equals(e.getTemperature())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getPeriodOfStay().equals(e.getPeriodOfStay())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 27,
      "LeeMingDe": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Lists all patients in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listpatient\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All patients are listed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 1,
      "chiamyunqing": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/SearchPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRangePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Searches a patient or a list of patient according to a name or a range of temperature."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchpatient\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Searches a patient or a list of patients with only one specific criteria. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME or \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_TEMP_RANGE + \"TEMPERATURE RANGE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_TEMP_RANGE + \"36.1-37.9 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"No patient matching the criteria has been found.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SEARCH_PATIENT_LIST_SUCCESS \u003d \"Listed patient(s) matching the criteria.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final SearchPatientDescriptor searchPatientDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private TemperatureRangePredicate temperaturePredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs an SearchPatientCommand to edit the patient with the name {@code String}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor Description of the searchPatient command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientCommand(SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(searchPatientDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.searchPatientDescriptor \u003d searchPatientDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchCriteria criteriaToSearch \u003d this.confirmCriteria(searchPatientDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_NOT_FOUND) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_IS_NAME) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            updateNamePredicate(model, searchPatientDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return findPatientWithName(searchPatientDescriptor, patientList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_IS_TEMPERATURE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            updateTemperaturePredicate(model, searchPatientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return findPatientWithTemperature(searchPatientDescriptor, patientList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.TOO_MANY_CRITERIA) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TOO_MANY_COMMANDS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Update the predicate for filteredlist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param model the model."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void updateNamePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                .asList(searchPatientDescriptor.getStringName().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(namePredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Update the predicate for filteredlist."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param model the model."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void updateTemperaturePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double startingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getStartingTemperature();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double endingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getEndingTemperature();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        temperaturePredicate \u003d new TemperatureRangePredicate(startingTemperature, endingTemperature);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(temperaturePredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Return the patient\u0027s detail with specific name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientList the patient list stored."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return a CommandResult of the patients\u0027 details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws CommandException if patient is not found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult findPatientWithName(SearchPatientDescriptor searchPatientDescriptor,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                                             List\u003cPatient\u003e patientList) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String nameToSearch \u003d searchPatientDescriptor.getName().toString().trim().toLowerCase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArrayList\u003cPatient\u003e patientNameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String patientName \u003d patient.getName().toString().trim().toLowerCase();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (patientName.contains(nameToSearch)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                patientNameList.add(patient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (patientNameList.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Return the patient\u0027s detail with specific Temperature Range."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientList the patient list stored."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return a CommandResult of the patients\u0027 details."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws CommandException if no patient matching the criteria."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult findPatientWithTemperature(SearchPatientDescriptor searchPatientDescriptor,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                                             List\u003cPatient\u003e patientList) throws CommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double startingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getStartingTemperature();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double endingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getEndingTemperature();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArrayList\u003cPatient\u003e patientWithinTemperatureRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (patient.getTemperature().getValue() \u003e\u003d startingTemperature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 patient.getTemperature().getValue() \u003c\u003d endingTemperature) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                patientWithinTemperatureRange.add(patient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (patientWithinTemperatureRange.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Confirm the criteria to look for."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor Details of the searchPatient Command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return criteria to look for."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchCriteria confirmCriteria(SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (searchPatientDescriptor.getOptionalName().isEmpty()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_NOT_FOUND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (searchPatientDescriptor.getOptionalName().isPresent()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_IS_NAME;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (searchPatientDescriptor.getOptionalName().isEmpty()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_IS_TEMPERATURE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.TOO_MANY_CRITERIA;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private enum SearchCriteria {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_IS_NAME,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_IS_TEMPERATURE,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TOO_MANY_CRITERIA,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_NOT_FOUND"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Stores the details to search the patient ."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The class is used with @ConfirmArea method to confirm the area to look for."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static class SearchPatientDescriptor {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private TemperatureRange temperatureRange;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private String stringName;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public SearchPatientDescriptor() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setStringName(String stringName) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.stringName \u003d stringName;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public String getStringName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return stringName;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Optional\u003cName\u003e getOptionalName() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setTemperatureRange(TemperatureRange temperatureRange) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.temperatureRange \u003d temperatureRange;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Optional\u003cTemperatureRange\u003e getOptionalTemperatureRange() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.ofNullable(temperatureRange);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public TemperatureRange getTemperatureRange() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return temperatureRange;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (!(other instanceof SearchPatientDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            SearchPatientDescriptor e \u003d (SearchPatientDescriptor) other; // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \u0026\u0026 getTemperatureRange().equals(e.getTemperatureRange());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 32,
      "LeeMingDe": 3,
      "chiamyunqing": 9,
      "raymondge": 189,
      "itssodium": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/AllocateRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@@author LeeMingDe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Edits the details of a room identified by the room number in the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Allows setting/removing/changing patient in the room and changing the room number of the room."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class AllocateRoomCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allocateroom\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allocate a patient to a room. \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"To make an occupied room empty, the parameter for patient name should be set to \u0027-\u0027.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Parameters: ROOM NUMBER \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"PATIENT NAME]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 23 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + PREFIX_NAME + \"Mary Doe\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_ALLOCATE_ROOM_SUCCESS \u003d \"Allocated Room: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_NO_PATIENT_TO_REMOVE \u003d \"There is no patient in this room to remove.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Integer roomNumberToAllocate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final AllocateRoomDescriptor allocateRoomDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final boolean toRemove;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs an AllocateRoomCommand to edit the room with the room number {@code Integer}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomNumberToAllocate Room number to edit."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param allocateRoomDescriptor Details to edit the room with."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param toRemove Room if it is true."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomCommand(Integer roomNumberToAllocate, AllocateRoomDescriptor allocateRoomDescriptor,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                               boolean toRemove) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(roomNumberToAllocate, allocateRoomDescriptor, toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.roomNumberToAllocate \u003d roomNumberToAllocate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.allocateRoomDescriptor \u003d new AllocateRoomDescriptor(allocateRoomDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Optional\u003cRoom\u003e roomOptional \u003d model.getRoomWithRoomNumber(roomNumberToAllocate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (roomOptional.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomToAllocate \u003d roomOptional.get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomWithAllocatedPatient \u003d allocatePatientToRoom(model, roomToAllocate, allocateRoomDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!roomToAllocate.isSameRoom(roomWithAllocatedPatient) \u0026\u0026 model.hasRoom(roomWithAllocatedPatient)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.setSingleRoom(roomToAllocate, roomWithAllocatedPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ALLOCATE_ROOM_SUCCESS, roomWithAllocatedPatient));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates and returns a {@code Room} with the details of {@code roomToAllocate}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * edited with {@code allocateRoomDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param model Current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomToAllocate Room that is to be edited."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param allocateRoomDescriptor Details to edit the room with."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Room that has been edited."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Room allocatePatientToRoom(Model model, Room roomToAllocate,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                                       AllocateRoomDescriptor allocateRoomDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert (roomToAllocate !\u003d null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert (allocateRoomDescriptor !\u003d null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int roomNumber \u003d roomToAllocate.getRoomNumber();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RoomTasks roomTaskList \u003d new RoomTasks(roomToAllocate.getReadOnlyTasks());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (roomToAllocate.getPatient().isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                throw new CommandException(MESSAGE_NO_PATIENT_TO_REMOVE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new Room(roomNumber, false, Optional.empty(), roomTaskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Name patientName \u003d allocateRoomDescriptor.getPatientName().get(); //definitely has name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (model.isPatientAssignedToRoom(patientName)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Optional\u003cPatient\u003e updatedPatient \u003d model.getPatientWithName(patientName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (updatedPatient.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Room updatedRoom \u003d new Room(roomNumber, updatedPatient, roomTaskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return updatedRoom;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) { //short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof AllocateRoomCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand e \u003d (AllocateRoomCommand) other; // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomNumberToAllocate.equals(e.roomNumberToAllocate)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 allocateRoomDescriptor.equals(e.allocateRoomDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Stores the details to edit the room with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * corresponding field value of the room."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static class AllocateRoomDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Integer roomNumber;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Boolean isOccupied;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Name patientName;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public AllocateRoomDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * Constructs an AllocateRoomDescriptor object with the following fields."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * @param toCopy AllocateRoomDescriptor to copy the fields from."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public AllocateRoomDescriptor(AllocateRoomDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setOccupied(toCopy.isOccupied);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setPatientName(toCopy.patientName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return CollectionUtil.isAnyNonNull(patientName, isOccupied);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cInteger\u003e getRoomNumber() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(roomNumber);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setOccupied(Boolean isOccupied) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsOccupied() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(isOccupied);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cName\u003e getPatientName() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(patientName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!(other instanceof AllocateRoomDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            AllocateRoomDescriptor e \u003d (AllocateRoomDescriptor) other; // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return getIsOccupied().equals(e.getIsOccupied())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 getPatientName().equals(e.getPatientName());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return \"AllocateRoomDescriptor{\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \", isOccupied\u003d\" + isOccupied"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \", patientName\u003d\" + patientName"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \u0027}\u0027;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"AllocateRoomCommand{\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"roomNumberToEdit\u003d\" + roomNumberToAllocate"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \", allocateRoomDescriptor\u003d\" + allocateRoomDescriptor"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 209,
      "chiamyunqing": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/FindEmptyRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Finds the next empty room with the lowest room number"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindEmptyRoomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findemptyroom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_NO_EMPTY_ROOM \u003d \"There are unfortunately no more empty rooms!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_UNDEFINED \u003d \"Please define number of rooms\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room Number %s is empty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindEmptyRoomCommand() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms \u003d model.getRooms();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (model.getNumOfRooms() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d rooms.peek();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert room !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (room.isOccupied()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EMPTY_ROOM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d givePredicate(room);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, room.getRoomNumber()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Predicate\u003cRoom\u003e givePredicate(Room room) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e roomPredicate \u003d room1 -\u003e room1.getRoomNumber() \u003d\u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "itssodium": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/InitRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Adds the number of hotel rooms in a hotel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class InitRoomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"initroom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_ZERO_CANNOT_BE_AN_INPUT \u003d \"Please input a positive value\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT \u003d \"Please check your value! \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"You have input a negative value!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_LARGE_NUMBER_OF_ROOMS_INPUT \u003d \"Please reduce the number of rooms input.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"maximum number of rooms are 5000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_ROOMS \u003d \"There would be insufficient rooms for existing number of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"patients of %d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Initialize the number of rooms to %d rooms in the application\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Initializes the number of rooms in the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"quarantine facility to the app, if there was data given previously, they would be stored.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"Parameters: NUMBER_OF_ROOMS\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 123\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final int MAXIMUM_NUMBER_OF_ROOMS \u003d 500;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int numOfRooms;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates an AddCommand to add the number of rooms available in a hotel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public InitRoomCommand(int numOfRooms) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.setInitNumOfRooms(numOfRooms);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (numOfRooms \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_ZERO_CANNOT_BE_AN_INPUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (numOfRooms \u003c ZERO) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (numOfRooms \u003e MAXIMUM_NUMBER_OF_ROOMS) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_LARGE_NUMBER_OF_ROOMS_INPUT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (model.getNumOfRooms() \u003e numOfRooms \u0026\u0026 !model.hasSpaceForRooms()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INSUFFICIENT_ROOMS, model.getNumOfExcessOccupiedRooms()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(numOfRooms);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, numOfRooms));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        InitRoomCommand that \u003d (InitRoomCommand) o;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return numOfRooms \u003d\u003d that.numOfRooms;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return Objects.hash(numOfRooms);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "itssodium": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/ListRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ListRoomCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listroom\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All rooms are listed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_UNDEFINED \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"There is no room in the app yet. Please define the number of rooms using initRooms command.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (model.getRooms().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 5,
      "itssodium": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/SearchRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_NO_ROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Searches a room by the given room number or by the patient name who resides in the room."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchroom\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Searches the room with the given room number or with the given individual.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Only one of the parameter can be provided.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER or \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"130 or \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"John Doe\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room has been found and listed.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final SearchRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a SearchRoomCommand to look for the specified room based on the inputs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * in searchRoomDescriptor."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param descriptor Details to search the room with."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomCommand(SearchRoomDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(descriptor.hasParameter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (descriptor.getRoomNumber().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Integer roomNumber \u003d descriptor.roomNumber;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Index index \u003d model.checkIfRoomPresent(roomNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            model.updateFilteredRoomList(room -\u003e room.getRoomNumber() \u003d\u003d roomNumber);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientName \u003d descriptor.patientName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (model.getPatientWithName(patientName).isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else if (!model.isPatientAssignedToRoom(patientName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NO_ROOM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.updateFilteredRoomList(room -\u003e room.isOccupied()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 room.getPatient().get().getName().equals(patientName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof SearchRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 descriptor.equals(((SearchRoomCommand) other).descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Stores the details to search the room."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Each non-empty field value will replace the corresponding field value of the room."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static class SearchRoomDescriptor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private Integer roomNumber;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private Name patientName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public SearchRoomDescriptor() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         * Constructs a SearchRoomDescriptor object with the following fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         * @param toCopy SearchRoomDescriptor to copy the fields from."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public SearchRoomDescriptor(SearchRoomDescriptor toCopy) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            setRoomNumber(toCopy.roomNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            setPatientName(toCopy.patientName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public boolean hasParameter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return CollectionUtil.isAnyNonNull(roomNumber, patientName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cInteger\u003e getRoomNumber() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.ofNullable(roomNumber);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cName\u003e getPatientName() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.ofNullable(patientName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (!(other instanceof SearchRoomDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            SearchRoomDescriptor e \u003d (SearchRoomDescriptor) other; // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return getRoomNumber().equals(e.getRoomNumber())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    \u0026\u0026 getPatientName().equals(e.getPatientName());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Adds a {@code Task} to a {@code Room}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to Covigent. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Remind John to return his bedsheets \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"3 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200928 2359\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"New Task added to Room %1$d. \\nDescription: %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task} to a {@code Room}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * with the {@code roomNumber}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddTaskCommand(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskToAdd \u003d task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert optionalRoom !\u003d null : \"The return value from Model#getRoomWithRoomNumber(...) should never be null.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.addTaskToRoom(taskToAdd, room);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TASK_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomNumber, taskToAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskToAdd.equals(((AddTaskCommand) other).taskToAdd)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((AddTaskCommand) other).roomNumber));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Deletes a {@code Task} from a {@code Room}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Room} is identified by its room number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Task} is identified by its one-based index in the {@code TaskList}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Room}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetask\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a task from Covigent. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"TASK NUMBER \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Task %1$d deleted from Room %2$d. \\nDescription: %3$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a DeleteTaskCommand to remove the {@code Task} with {@code taskIndex} from"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * the {@code Room} with the {@code roomNumber}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteTaskCommand(int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the room from which the user wants to delete the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert optionalRoom !\u003d null : \"The return value from Model#getRoomWithRoomNumber(...) should never be null.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the task which the user wants to delete"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d model.getTaskFromRoomWithTaskIndex(taskIndex, room);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert optionalTask !\u003d null : \"The return value from Model#getTaskFromRoomWithTaskIndex(...)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" should not be null.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task taskToDelete \u003d optionalTask.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_TASK_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.deleteTaskFromRoom(taskToDelete, room);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                taskIndex.getOneBased(), roomNumber, taskToDelete));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((DeleteTaskCommand) other).roomNumber)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex.equals((((DeleteTaskCommand) other).taskIndex)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Edits and replaces a {@code Task} in a {code Room}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Room} is identified by its index in the {@code RoomList}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Model}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Task} is identified by its index in the {@code TaskList}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Room}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittask\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a task in Covigent.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"TASK NUMBER \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"3 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200930 1700\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Task %1$d edited from Room %2$d. \\nDescription: %3$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an EditTaskCommand to replace a {@code Task} in a {@code Room} with another"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Task} described by {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditTaskCommand(int roomNumber, Index taskIndex, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskIndex, editTaskDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the room from which the user wants to delete the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert optionalRoom !\u003d null : \"The return value from Model#getRoomWithRoomNumber(...) should never be null.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the task which the user wants to edit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d model.getTaskFromRoomWithTaskIndex(taskIndex, room);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert optionalTask !\u003d null : \"The return value from Model#getTaskFromRoomWithTaskIndex(...)\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" should not be null.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task taskToEdit \u003d optionalTask.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_TASK_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (taskToEdit.equals(editedTask)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.setTaskToRoom(taskToEdit, editedTask, room);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                taskIndex.getOneBased(), roomNumber, editedTask));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskToEdit Task that is to be edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editTaskDescriptor Details to edit the task with."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return Task that has been edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue updatedDueAt \u003d editTaskDescriptor.getDateTimeDue().orElse(taskToEdit.getDueAt());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Task(updatedDescription, updatedDueAt);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof EditTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((EditTaskCommand) other).roomNumber)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((EditTaskCommand) other).taskIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(((EditTaskCommand) other).editTaskDescriptor));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Stores the details used to edit the task. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private DateTimeDue dueAt;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Prevents instantiation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * Constructs a EditTaskDescriptor object with the following fields."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * @param toCopy EditTaskDescriptor to copy the fields from."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setDateTimeDue(toCopy.dueAt);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, dueAt);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setDateTimeDue(DateTimeDue dueAt) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cDateTimeDue\u003e getDateTimeDue() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(dueAt);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    || (other instanceof EditTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getDescription().equals(((EditTaskDescriptor) other).getDescription())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getDateTimeDue().equals(((EditTaskDescriptor) other).getDateTimeDue()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ListTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Lists all Tasks in the Covigent to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtask\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tasks are listed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateTasksInFilteredRoomTaskRecords(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "raymondge": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/SearchTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DueDatePredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Searches a {@code Task} before a {@code DateTimeDue}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchtask\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches tasks in Covigent. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200928 2359\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_SEARCH_TASK_SUCCESS \u003d \"Tasks before the due date found.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"There is no task that matches your criteria.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final DateTimeDue duedate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private DueDatePredicate datePredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates an SearchTaskCommand to Search the specified {@code Task} with {@code DateTimeDue}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchTaskCommand(DateTimeDue duedate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireAllNonNull(duedate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.duedate \u003d duedate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d model.getRoomListObservableList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArrayList\u003cTask\u003e taskListWithDesirableResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        datePredicate \u003d new DueDatePredicate(duedate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Room room : rooms) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks \u003d room.getReadOnlyTasks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                if (datePredicate.test(task)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    taskListWithDesirableResult.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (taskListWithDesirableResult.size() \u003c 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            model.updateTasksInFilteredRoomTaskRecords(datePredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assert taskListWithDesirableResult.size() \u003e\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateTasksInFilteredRoomTaskRecords(datePredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SEARCH_TASK_SUCCESS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof SearchTaskCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 duedate.equals(((SearchTaskCommand) other).duedate));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "LeeMingDe": 1,
      "chiamyunqing": 1,
      "raymondge": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CovigentAppParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.AllocateRoomCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.room.FindEmptyRoomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.room.ListRoomCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.ListTaskCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.AddPatientCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.DeletePatientCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.EditPatientCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.SearchPatientCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.room.AllocateRoomCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.room.InitRoomCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.room.SearchRoomCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.task.AddTaskCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.EditTaskCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.task.SearchTaskCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CovigentAppParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // create"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new AddPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case InitRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new InitRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // update"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new EditPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case AllocateRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new AllocateRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // read"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ListPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // delete"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case DeletePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeletePatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // others"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case SearchPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new SearchPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        case SearchRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new SearchRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case SearchTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new SearchTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        case FindEmptyRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new FindEmptyRoomCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        case ListRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new ListRoomCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 43,
      "LeeMingDe": 15,
      "chiamyunqing": 9,
      "-": 53,
      "raymondge": 7,
      "itssodium": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.room.RoomCliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.TaskCliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_UNSIGNED_INT \u003d \"Please ensure that the value \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"for the field \\\"%1$s\\\" is a number between 1 and \" + Integer.MAX_VALUE + \".\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nYour current input: %2$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@author LeeMingDe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses {@code roomNumber} into an {@code Integer} and returns it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the specified room number is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Integer parseRoomNumber(String roomNumber) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedRoomNumber \u003d roomNumber.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedRoomNumber)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_UNSIGNED_INT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    RoomCliSyntax.PREFIX_ROOM_NUMBER, roomNumber));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Integer.parseInt(trimmedRoomNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@author LeeMingDe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses {@code taskIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the specified task index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Index parseTaskIndex(String taskIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedIndex \u003d taskIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_UNSIGNED_INT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    TaskCliSyntax.PREFIX_TASK_NUMBER, taskIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if exactly one prefix contains a non-empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean isExactlyOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 35,
      "LeeMingDe": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/AddPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.patient.AddPatientCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new AddPatientCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns an AddPatientCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public AddPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TEMP, PREFIX_PERIOD_OF_STAY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        PREFIX_PHONE, PREFIX_AGE, PREFIX_COMMENTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TEMP,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                PREFIX_PERIOD_OF_STAY, PREFIX_PHONE, PREFIX_AGE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name name \u003d PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Temperature temp \u003d PatientParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PeriodOfStay periodOfStay \u003d PatientParserUtil.parsePeriodOfStay("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Phone phone \u003d PatientParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Age age \u003d PatientParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Comment comment \u003d new Comment(\"-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (ParserUtil.arePrefixesPresent(argMultimap, PREFIX_COMMENTS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            comment \u003d PatientParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patient \u003d new Patient(name, temp, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new AddPatientCommand(patient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 19,
      "chiamyunqing": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/DeletePatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new DeletePatientCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns a DeletePatientCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public DeletePatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Name patientName \u003d PatientParserUtil.parseName(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new DeletePatientCommand(patientName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "chiamyunqing": 21,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/EditPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses input arguments and creates a new EditPatientCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param args that are inputted by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EditPatientCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        PREFIX_COMMENTS, PREFIX_TEMP, PREFIX_AGE, PREFIX_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Name patientTobeEdited;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            patientTobeEdited \u003d PatientParserUtil.parseName(argMultimap.getPreamble().trim().toLowerCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor editPatientDescriptor \u003d new EditPatientCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setName(PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setPhone(PatientParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEMP).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setTemperature("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setAge(PatientParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD_OF_STAY).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setPeriodOfStay("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parsePeriodOfStay(argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENTS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setComment("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(EditPatientCommand.MESSAGE_PATIENT_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new EditPatientCommand(patientTobeEdited, editPatientDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 24,
      "LeeMingDe": 35,
      "chiamyunqing": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/PatientCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple patient-related commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_TEMP \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_PERIOD_OF_STAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_COMMENTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_TEMP_RANGE \u003d new Prefix(\"tr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "-": 9,
      "raymondge": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/PatientParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains utility methods used for parsing strings in the various patient-related Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String temperature} into a {@code Temperature}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Temperature parseTemperature(String temp) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(temp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedTemp \u003d temp.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Temperature.isValidTemperature(trimmedTemp)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Temperature(trimmedTemp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String period of stay} into a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code period of stay} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static PeriodOfStay parsePeriodOfStay(String periodOfStay) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedPeriodOfStay \u003d periodOfStay.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(trimmedPeriodOfStay)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(PeriodOfStay.getErrorMessage(trimmedPeriodOfStay));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new PeriodOfStay(trimmedPeriodOfStay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(Age.getErrorMessage(trimmedAge));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses a {@code String comment} into a {@code Comment}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return an \"-\" comment if no comment is added"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static Comment parseComment(String comment) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (comment \u003d\u003d null || comment.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new Comment(\"-\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new Comment(comment.trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    //@@author raymondge"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses a {@code String temperature} into a {@code Temperature}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static TemperatureRange parseTemperatureRange(String tempRange) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(tempRange);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String trimmedTempRange \u003d tempRange.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (!TemperatureRange.isValidTemperatureRange(trimmedTempRange)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new ParseException(TemperatureRange.MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new TemperatureRange(trimmedTempRange);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    //@@author raymondge"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40,
      "chiamyunqing": 69,
      "raymondge": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/SearchPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Parses input arguments and creates a new SearchPatientCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandParser implements Parser\u003cSearchPatientCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchPatientCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * and returns an SearchPatientCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TEMP_RANGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_NAME, PREFIX_TEMP_RANGE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand.SearchPatientDescriptor searchPatientDescriptor \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientCommand.SearchPatientDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            String nameWithoutPrefix \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            searchPatientDescriptor.setStringName(nameWithoutPrefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchPatientDescriptor.setName(PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEMP_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchPatientDescriptor.setTemperatureRange("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseTemperatureRange(argMultimap.getValue(PREFIX_TEMP_RANGE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new SearchPatientCommand(searchPatientDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "raymondge": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/AllocateRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.AllocateRoomCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.PatientParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses input arguments and creates a new AllocateRoomCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class AllocateRoomCommandParser implements Parser\u003cAllocateRoomCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String INPUT_REMOVE_PATIENT \u003d \"-\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param args that are inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EditPatientCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Integer roomToBeAllocated;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean toRemove \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            roomToBeAllocated \u003d ParserUtil.parseRoomNumber(argMultimap.getPreamble().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                allocateRoomDescriptor \u003d new AllocateRoomCommand.AllocateRoomDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String patientFieldInput \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (patientFieldInput.equals(INPUT_REMOVE_PATIENT)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                toRemove \u003d true; //empty the room"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                allocateRoomDescriptor.setOccupied(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                allocateRoomDescriptor.setPatientName(PatientParserUtil.parseName(patientFieldInput));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!allocateRoomDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(AllocateRoomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new AllocateRoomCommand(roomToBeAllocated, allocateRoomDescriptor, toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 60,
      "chiamyunqing": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/InitRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Parses user input and creates new AddRoomsCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class InitRoomCommandParser implements Parser\u003cInitRoomCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_GIVEN_IN_DIGITS \u003d \"Please give the number of digits in integers\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"Example: initRoom 200\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and returns an AddRoomsCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public InitRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //if user does not give number of room"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int numberOfRooms \u003d -1; //used so that it can be used to test for NumberFormatException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            numberOfRooms \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //if user does not give number of rooms in terms of integers but gives in terms of words"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new InitRoomCommand(numberOfRooms);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 2,
      "itssodium": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/RoomCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/SearchRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.SearchRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.PatientParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new SearchRoomCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandParser implements Parser\u003cSearchRoomCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of SearchRoomCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns a SearchRoomCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ROOM_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ROOM_NUMBER)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand.SearchRoomDescriptor descriptor \u003d new SearchRoomCommand.SearchRoomDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Name patientName \u003d PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            descriptor.setPatientName(patientName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new SearchRoomCommand(descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //definitely have prefix room number if no prefix name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new SearchRoomCommand(descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/AddTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_ROOM_NUMBER, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_ROOM_NUMBER)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description description \u003d TaskParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue dueAt \u003d TaskParserUtil.parseDateTimeDue(argMultimap.getValue(PREFIX_DUE_DATE)); // optional"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new Task(description, dueAt);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new AddTaskCommand(task, roomNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index taskNumber \u003d ParserUtil.parseTaskIndex(argMultimap.getValue(PREFIX_TASK_NUMBER).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DeleteTaskCommand(roomNumber, taskNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/EditTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INPUT_REMOVE_DUE_DATE \u003d \"-\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                        PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER, PREFIX_DESCRIPTION, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Compulsory fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseTaskIndex(argMultimap.getValue(PREFIX_TASK_NUMBER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Optional fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editTaskDescriptor.setDescription(TaskParserUtil.parseDescription(description));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DUE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String dueAt \u003d argMultimap.getValue(PREFIX_DUE_DATE).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editTaskDescriptor.setDateTimeDue(TaskParserUtil.parseDateTimeDue((dueAt.equals(INPUT_REMOVE_DUE_DATE))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    ? Optional.empty()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    : Optional.of(dueAt)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Do not execute as no changes have been made"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new EditTaskCommand(roomNumber, taskIndex, editTaskDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/SearchTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Parses input arguments and creates a new SearchTaskCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandParser implements Parser\u003cSearchTaskCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * and returns an SearchTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_DUE_DATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        DateTimeDue dueAt \u003d TaskParserUtil.parseDateTimeDue(argMultimap.getValue(PREFIX_DUE_DATE)); // optional"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new SearchTaskCommand(dueAt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple task-related commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_DUE_DATE \u003d new Prefix(\"dd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_TASK_NUMBER \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains utility methods used for parsing strings in the various task-related Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given description is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e optionalDueAt} into a {@code DateTimeDue}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code optionalDueAt} can be empty but must not be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given date-time string is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static DateTimeDue parseDateTimeDue(Optional\u003cString\u003e optionalDueAt) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(optionalDueAt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean isValid \u003d optionalDueAt"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map(DateTimeDue::isValidDateTimeDue)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(true); // empty Optional considered valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DateTimeDue(optionalDueAt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns the user prefs\u0027 covigent app file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the user prefs\u0027 covigent app file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    void setCovigentAppFilePath(Path covigentAppFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Replaces patient records with the data in {@code covigentApp}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setPatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /** Returns the patient records */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ReadOnlyList\u003cPatient\u003e getPatientRecords();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces room list with the data in {@code covigentApp}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setRoomList(ReadOnlyList\u003cRoom\u003e rooms);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the room task records."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ReadOnlyList\u003cRoomTaskAssociation\u003e getRoomTaskRecords();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient records."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void setInitNumOfRooms(int numOfRooms);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the patient with the {@code nameOfPatient} if it exists. Otherwise, an empty optional"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The patient must exist in the patient records."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * {@code patient} must not already exist in the patient records."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * {@code target} must exist in the patient records."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * another existing patient in the patient records."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Checks if patient is already assigned to a room."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param name Of the patient."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return Boolean value of whether patient is already assigned."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    boolean isPatientAssignedToRoom(Name name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code UniquePatientList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns total number of rooms in the application\u0027s {@code RoomList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    int getNumOfRooms();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param num is the number of rooms to define in a hotel."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void initRooms(int num);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns whether a decrease in number of rooms would have space for existing rooms"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    boolean hasSpaceForRooms();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns number of occupied rooms whose room number is more than the number of rooms to be defined"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * using initRoom command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    int getNumOfExcessOccupiedRooms();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a room with the same identity as {@code room} exists in Covigent."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param room The room ."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return true if {@code room} is in Covigent; false otherwise."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    boolean hasRoom(Room room);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the room with the {@code roomNumber} if it exists. Otherwise, an empty optional"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * sets specified room to roomList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void setRoom(Room room);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Replaces the given room {@code target} with {@code editedRoom}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * another existing room in the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param target Of the room to be changed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param editedRoom Is the newly edited room."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void setSingleRoom(Room target, Room editedRoom);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Removes the patient with the given name {@code patientName} from the room."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void removePatientFromRoom(Name patientName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Checks if the given room number is present in the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param roomNumber to check if it is in the application."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return Index Of room that is found."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Index checkIfRoomPresent(Integer roomNumber);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Updates the room with the new edited patient."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patientToEdit Patient that is to be edited."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editedPatient Patient that is edited."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code RoomList}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomListObservableList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    RoomList getModifiableRoomList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * {@code RoomList}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Updates the filter of the filtered rooms to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns Priority Queue of rooms"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    PriorityQueue\u003cRoom\u003e getRooms();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the task with the {@code taskIndex} in {code room} if it exists."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Otherwise, an empty optional is returned."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Adds {@code task} to {@code room}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in {@code CovigentApp}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param room The room to which the task should be added."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void addTaskToRoom(Task task, Room room);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Deletes {@code task} from {@code room}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The task must exist in room."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param task The task to delete."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param room The room from which the task should be delete."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void deleteTaskFromRoom(Task task, Room room);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The task must exist in room."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param target The task to replace."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param editedTask The modified task to replace the original."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param room The room from which the task should be replaced."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void setTaskToRoom(Task target, Task editedTask, Room room);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Update the tasks in {@code filteredRoomTaskRecords} with {@code taskPredicate}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskPredicate The predicate to filter the tasks."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void updateTasksInFilteredRoomTaskRecords(Predicate\u003cTask\u003e taskPredicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code RoomTaskAssociation} backed by the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * internal list of {@code RoomTaskRecords}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoomTaskAssociation\u003e getFilteredRoomTaskRecords();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 50,
      "LeeMingDe": 19,
      "chiamyunqing": 7,
      "-": 71,
      "raymondge": 88,
      "itssodium": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final PatientRecords patientRecords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final RoomList roomList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final RoomTaskRecords roomTaskRecords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final FilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final FilteredList\u003cRoomTaskAssociation\u003e filteredRoomTaskRecords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Initializes a ModelManager with the given patient records, room records and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ModelManager(ReadOnlyList\u003cPatient\u003e patientRecords, ReadOnlyList\u003cRoom\u003e roomList,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(patientRecords, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        logger.fine(\"Initializing with Covigent App: \" + patientRecords + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.patientRecords \u003d new PatientRecords(patientRecords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.roomList \u003d new RoomList(roomList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskRecords theRoomTaskRecords;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            theRoomTaskRecords \u003d RoomTaskRecords.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (AssertionError e) { // need to first initialize RoomTasksRecords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            theRoomTaskRecords \u003d RoomTaskRecords.init(this.roomList.getReadOnlyList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTaskRecords \u003d theRoomTaskRecords;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientRecords.getReadOnlyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredRooms \u003d new FilteredList\u003c\u003e(this.roomList.getReadOnlyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredRoomTaskRecords \u003d new FilteredList\u003c\u003e(this.roomTaskRecords.getReadOnlyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return userPrefs.getCovigentAppFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path covigentAppFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(covigentAppFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(covigentAppFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.patientRecords.resetData(patientRecords);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cPatient\u003e getPatientRecords() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setRoomList(ReadOnlyList\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.roomList.resetData(rooms);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomTaskRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cRoomTaskAssociation\u003e getRoomTaskRecords() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomTaskRecords;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patients \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecords.hasPatient(patient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(nameOfPatient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords.getPatientWithName(nameOfPatient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.removePatient(target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //model\u0027s responsibility to update room list when patient is updated"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.updateRoomListWhenPatientsChanges(target, null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isPatientAssignedToRoom(Name name) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Room room : roomList.getRoomObservableList()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (room.getPatient().isPresent()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name patientNameInRoom \u003d room.getPatient().get().getName();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                if (patientNameInRoom.equals(name)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    //@@author itssodium"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfExcessOccupiedRooms() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList.getNumOfExcessOccupiedRooms();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean hasSpaceForRooms() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList.hasSpaceForRooms();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList.getNumOfRooms();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setInitNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList.setPreferredNumOfRooms(numOfRooms);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(int num) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList.initRooms(num);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setRoom(Room room) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList.setRoom(room);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    //@@author itssodium"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomList.containsRoom(room);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomList.setSingleRoom(target, editedRoom);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void removePatientFromRoom(Name patientName) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert (isPatientAssignedToRoom(patientName));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomList.removePatientFromRoom(patientName);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Index checkIfRoomPresent(Integer roomNumber) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cRoom\u003e roomObservableList \u003d this.getRoomListObservableList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d roomObservableList.size(); i++) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int roomNum \u003d roomObservableList.get(i - 1).getRoomNumber();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            boolean isValidRoom \u003d (Integer.valueOf(roomNum)).equals(roomNumber);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (isValidRoom) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(patientToEdit);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cRoom\u003e roomObservableList \u003d this.roomList.getRoomObservableList();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 0; i \u003c roomObservableList.size(); i++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Optional\u003cPatient\u003e patient \u003d roomObservableList.get(i).getPatient();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (isPatientAssignedToRoom(patientToEdit.getName()) \u0026\u0026 patient.isPresent()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 patient.get().isSamePatient(patientToEdit)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Room updatedRoom \u003d roomObservableList.get(i);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                if (editedPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    updatedRoom.setOccupied(false);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                updatedRoom.setPatient(editedPatient);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                roomObservableList.set(i, updatedRoom);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert (roomNumber \u003e 0) : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomList.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered RoomList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomListObservableList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomList.getReadOnlyList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomList getModifiableRoomList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this.getModifiableRoomList().getRooms();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return filteredRooms;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskIndex, room);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return room.getTaskWithTaskIndex(taskIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomList.containsRoom(room) : \"Room must be one of the rooms in the RoomList.\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.addTask(task);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomList.containsRoom(room) : \"Room must be one of the rooms in the RoomList.\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.deleteTask(task);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom(Task target, Task editedTask, Room room) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask, room);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomList.containsRoom(room) : \"Room must be one of the rooms in the RoomList.\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.setTask(target, editedTask);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered RoomTaskRecords Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateTasksInFilteredRoomTaskRecords(Predicate\u003cTask\u003e taskPredicate) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(taskPredicate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredRoomTaskRecords.setPredicate(roomTaskAssociation -\u003e taskPredicate.test(roomTaskAssociation.getTask()));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoomTaskAssociation\u003e getFilteredRoomTaskRecords() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return filteredRoomTaskRecords;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Miscellaneous \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patientRecords.equals(other.patientRecords)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomList.equals(other.roomList)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 filteredRooms.equals(other.filteredRooms);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 142,
      "LeeMingDe": 86,
      "chiamyunqing": 36,
      "-": 78,
      "raymondge": 14,
      "itssodium": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PatientRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Wraps all data at the app level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Duplicate patients are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientRecords implements ReadOnlyList\u003cPatient\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecords() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates an CovigentApp using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientRecords(ReadOnlyList\u003cPatient\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Resets the existing data of this {@code PatientRecords} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void resetData(ReadOnlyList\u003cPatient\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setPatients(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient records."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the patient with the input name."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param name of patient to find."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the patient with the name if it exists."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patients.getPatientWithName(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a patient to the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must not already exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Removes {@code key} from this {@code PatientRecords}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof PatientRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 patients.equals(((PatientRecords) other).patients));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 33,
      "LeeMingDe": 1,
      "chiamyunqing": 22,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Unmodifiable view of a list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public interface ReadOnlyList\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of a list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cT\u003e getReadOnlyList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains information regarding the Room information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class RoomList implements ReadOnlyList\u003cRoom\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientRecordsStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final UniqueRoomList rooms;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomList() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts data from readOnlyRoomList to roomList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomList(ReadOnlyList\u003cRoom\u003e readOnlyRoomList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        resetData(readOnlyRoomList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean hasSpaceForRooms() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms.hasSpaceForRooms();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfExcessOccupiedRooms() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms.getNumOfExcessOccupiedRooms();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Resets the existing data of this {@code RoomList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void resetData(ReadOnlyList\u003cRoom\u003e readOnlyRoomList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.resetData(readOnlyRoomList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns Priority Queue of rooms"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms.getRooms();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns number of rooms in hotel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms.getNumOfRooms();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setInitNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.setPreferredNumOfRooms(numOfRooms);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomObservableList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms.getRoomObservableList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setRoom(Room room) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.setRoom(room);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds the number of the rooms in a hotel"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param numOfRooms is the number of rooms to be added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.initRooms(numOfRooms);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds this room to the RoomList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param room is added to RoomList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(Room room) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.initRooms(room);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the room with the provided {@code roomNumber}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty optional is returned if such a room is not found in the {@code RoomList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param roomNumber The room number of the room."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return the optional-wrapped room if found, otherwise an empty optional"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert (roomNumber \u003e 0) : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Room room : getReadOnlyList()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (roomNumber \u003d\u003d room.getRoomNumber()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return Optional.of(room);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return rooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof RoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 rooms.equals(((RoomList) other).rooms));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean containsRoom(Room toCheck) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return rooms.containsRoom(toCheck);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Removes the patient with the given name {@code patientName} from the room."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void removePatientFromRoom(Name patientName) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(patientName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.clearRoom(patientName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@author LeeMingDe"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param target Room to be changed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param editedRoom Room that has been changed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.setSingleRoom(target, editedRoom);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@author LeeMingDe"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return rooms.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setPreferredNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.setPreferredNumOfRooms(numOfRooms);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setRooms(PriorityQueue\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.rooms.setRooms(rooms);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 44,
      "chiamyunqing": 52,
      "itssodium": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomTaskRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * RoomTaskRecords exists mainly for the purpose of exposing an ObservableList for the user interface of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * {@code Task} to display the list of tasks in all {@code Room}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * It stores a list of {@code RoomTaskAssociation}. {@code RoomTaskAssociation} is preferred to {@code Task}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * as it provides an API to quickly query room number and task index of a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * RoomTaskRecords follows the Singleton pattern. Solution adapted with modifications from:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * https://stackoverflow.com/questions/1050991/singleton-with-arguments-in-java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTaskRecords implements ReadOnlyList\u003cRoomTaskAssociation\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static RoomTaskRecords theOne \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RoomTaskRecords.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cRoomTaskAssociation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cRoomTaskAssociation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private RoomTaskRecords() { // set to private to ensure that creation is done through init(...) method"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the RoomTaskRecords."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws AssertionError if RoomTaskRecords has not been initialized."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static RoomTaskRecords getInstance() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new AssertionError(\"RoomTaskRecords has to be initialized first.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates and initializes the RoomTaskRecords. The information about the rooms and the tasks in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * those rooms are obtained from {@code roomList}. A listener is attached to {@code roomList} to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * ensure that the associations between rooms and tasks are synchronized even when there are"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * changes to {@code roomList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Only one instance of RoomTaskRecords can be created."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param roomList The list of rooms from which to create the associations between room and task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The singleton instance of RoomTaskRecords."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throw AssertionError if RoomTaskRecords has already been initialized"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static synchronized RoomTaskRecords init(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (theOne !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new AssertionError(\"RoomTaskRecords has already been initialized.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        logger.finer(\"Creating RoomTaskRecords and attaching a listener to refresh room-task associations...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        theOne \u003d new RoomTaskRecords();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        theOne.createRoomTaskAssociations(roomList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        theOne.updateAssociationIfChanged(roomList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        logger.finer(\"Successfully attached listener to RoomTaskRecords.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates the associations between each room and all the tasks in the rooms."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * These associations are stored into {@code internalList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void createRoomTaskAssociations(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cRoomTaskAssociation\u003e associations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Room room : roomList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            for (Task task : room.getReadOnlyTasks()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                associations.add(new RoomTaskAssociation(room, task, taskIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                taskIndex++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(associations);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a listener to {@code roomList} to recreate all {@code RoomTaskAssociation} whenever"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * there is a change."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * This ensures that the associations are properly synchronized and the task indexes are correct."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void updateAssociationIfChanged(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomList.addListener(new ListChangeListener\u003cRoom\u003e() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            public void onChanged(Change\u003c? extends Room\u003e change) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                while (change.next()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    logger.fine(\"Changes detected in list of rooms. Updating room-task associations...\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    createRoomTaskAssociations(roomList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoomTaskAssociation\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 87,
      "chiamyunqing": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Path covigentAppFilePath \u003d Paths.get(\"data\" , \"covigentapp.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path numberOfRoomsFilePath \u003d Paths.get(\"data\", \"numberOfRooms.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path roomsOccupiedFilePath \u003d Paths.get(\"data\", \"roomInformation.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Path taskFilePath \u003d Paths.get(\"data\", \"task.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setCovigentAppFilePath(newUserPrefs.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return covigentAppFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path covigentAppFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(covigentAppFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.covigentAppFilePath \u003d covigentAppFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getNumberOfRoomsFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return numberOfRoomsFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getRoomsOccupiedFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomsOccupiedFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getTaskOccupiedFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return taskFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 covigentAppFilePath.equals(o.covigentAppFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return Objects.hash(guiSettings, covigentAppFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + covigentAppFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 10,
      "-": 80,
      "raymondge": 3,
      "itssodium": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Age.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Patient\u0027s age recorded in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A valid patient age is between 0 (inclusive) and 120 (exclusive),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * as declared in {@link #isValidAge(String)}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * If the age is invalid, the corresponding error message should be retrieved"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * via {@link #getErrorMessage(String)}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_AGE_NOT_NUMBER \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Age should only contain numbers.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_INVALID_AGE_RANGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Age should be between the range 0 (inclusive) to 120 (exclusive).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final int MAX_AGE \u003d 120;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_AGE_NOT_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d Integer.parseInt(age);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string matches the validation regex."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isRegexCorrect(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is within the age range 0 (inclusive) to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * 120 (exclusive)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isWithinValidAgeRange(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(isRegexCorrect(test));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return (Integer.parseInt(test) \u003e\u003d 0) \u0026\u0026 (Integer.parseInt(test) \u003c MAX_AGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return isRegexCorrect(test) \u0026\u0026 isWithinValidAgeRange(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the precise error message according to the error that arises."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * This method should only be called if isValidAge(test) returns false."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param test the string with error in converting to age."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the exact error message that corresponds to the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static String getErrorMessage(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(!isValidAge(test));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!isRegexCorrect(test)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return MESSAGE_AGE_NOT_NUMBER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return MESSAGE_INVALID_AGE_RANGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the value of the age."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Age) other).getValue()); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value).hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Comment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents important comments of the Patient in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is an optional attribute of patient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Comment}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param comment A comment that is represented by any string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment(String comment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(comment.length() !\u003d 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d comment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Comment // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value.equals(((Comment) other).value)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a Patient\u0027s name in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"The maximum length of name is set to 150 characters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final int MAX_NAME_LENGTH \u003d 150;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 test.length() \u003c\u003d MAX_NAME_LENGTH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 2,
      "chiamyunqing": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Patient in the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Name name; //identifier field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Temperature temperature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Comment comment; // an optional field, if null is initialised to \"-\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Every field, except comment, must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Patient(Name name, Temperature temperature, PeriodOfStay periodOfStay,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                   Phone phone, Age age, Comment comment) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(name, temperature, periodOfStay, phone, age);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment \u003d\u003d null ? new Comment(\"-\") : comment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Temperature getTemperature() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return temperature;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay getPeriodOfStay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return periodOfStay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment getComment() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if both patients have the same name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getTemperature().equals(getTemperature())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getPeriodOfStay().equals(getPeriodOfStay())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getAge().equals(getAge());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Objects.hash(name, temperature, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        builder.append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Temperature: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getTemperature() + \"\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Period of stay: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getPeriodOfStay().readerFriendlyString() + \"\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Phone: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getPhone() + \"\\n\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Age: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getAge() + \"\\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Comment: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getComment() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 109,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/PeriodOfStay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Patient\u0027s period of stay in the facility."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPeriodOfStay(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * If the period of stay is invalid, the corresponding error message should be retrieved"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * via {@link #getErrorMessage(String)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStay {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_WRONG_REGEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Period of stay should be in the format YYYYMMDD-YYYYMMDD. \\nE.g. 20200911-20200924\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"The dates of the period of stay must be valid.\\nIn particular, the start date of the period of stay \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"must be before or equals the end date.\\nE.g. 20200901-20200901 or 20200901-20200914.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}[-]\\\\d{8}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param periodOfStay A valid period of stay."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isRegexCorrect(periodOfStay), MESSAGE_WRONG_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidDates(periodOfStay), MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        startDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        endDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string matches the validation regex."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isRegexCorrect(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string has valid start and end dates."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Start and end dates are valid if start date is before or equals end date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isValidDates(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(isRegexCorrect(test));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String[] dates \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            LocalDate start \u003d LocalDate.parse(dates[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            LocalDate end \u003d LocalDate.parse(dates[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return start.compareTo(end) \u003c\u003d 0; //check start date less than or equals end date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid period of stay."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidPeriodOfStay(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return isRegexCorrect(test) \u0026\u0026 isValidDates(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the precise error message according to the error that arises."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * This method should only be called if isValidPeriodOfStay(test) returns false."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param test the string with error in converting to periodOfStay."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the exact error message that corresponds to the error."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static String getErrorMessage(String test) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(!isValidPeriodOfStay(test));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!isRegexCorrect(test)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return MESSAGE_WRONG_REGEX;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns a string that is more human readable (e.g. 09 Jan 2020), meant for UI."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return reader friendly string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String readerFriendlyString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return startDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \" to \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + endDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Primarily used for storage of data."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return startDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\")) + \"-\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + endDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof PeriodOfStay // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 startDate.compareTo(((PeriodOfStay) other).startDate) \u003d\u003d 0"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 endDate.compareTo(((PeriodOfStay) other).endDate) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient\u0027s phone number in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Phone numbers should only contain numbers.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    + \"Phone numbers should be at least 3 digits long and can only be up to 20 digits (inclusive).\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final int MAX_PHONE_DIGITS_ALLOWED \u003d 20;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_PHONE_DIGITS_ALLOWED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Temperature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a Patient\u0027s temperature recorded in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A valid temperature must be to 1 decimal place and is between 32.0 (inclusive)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * to 41.0 (inclusive) degree Celsius as declared in {@link #isValidTemperature(String)}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Temperature {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Temperature should only contain numbers and it should be to one decimal place. (E.g. 36.0).\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    + \"The range of temperature should be between 32.0 (inclusive) to 41.0 (inclusive) degree Celsius.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\\\\d[.]\\\\d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final double MIN_TEMP_RANGE \u003d 32.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final double MAX_TEMP_RANGE \u003d 41.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Temperature}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param temperature A valid temperature."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Temperature(String temperature) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(temperature);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidTemperature(temperature), MESSAGE_CONSTRAINTS); //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d Double.parseDouble(temperature);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string matches the regex."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isRegexCorrect(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is within temperature range of 32.0 to 41.0 degree Celsius."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static boolean isWithinTempRange(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(isRegexCorrect(test));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Double temperature \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return temperature \u003e\u003d MIN_TEMP_RANGE \u0026\u0026 temperature \u003c\u003d MAX_TEMP_RANGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid temperature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidTemperature(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return isRegexCorrect(test) \u0026\u0026 isWithinTempRange(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the float value of the temperature reading."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Temperature // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Temperature) other).getValue()); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Double.toString(value).hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 74,
      "raymondge": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/TemperatureRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The temperature range class serves to update a list of patients that fall within the temperature range."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * A temperature range object contains two immutable temperature objects for comparison."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TEMPERATURERANGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \"Temperature range should contain temperature-temperature\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TEMPERATURE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \"Temperature should only contain numbers, and it should be to one decimal place. (E.g. 36.0)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String VALIDATION_REGEX_TEMPERATURE \u003d \"\\\\d\\\\d[.]\\\\d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String VALIDATION_REGEX_TEMPERATURERANGE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            VALIDATION_REGEX_TEMPERATURE + \"[-]\" + VALIDATION_REGEX_TEMPERATURE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final double startingTemperature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final double endingTemperature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code TemperatureRange}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param temperatureRange A valid temperature range."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TemperatureRange (String temperatureRange) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(temperatureRange);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperatureRange(temperatureRange), MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String[] temperatures \u003d temperatureRange.split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperature(temperatures[0]), MESSAGE_CONSTRAINTS_TEMPERATURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperature(temperatures[0]), MESSAGE_CONSTRAINTS_TEMPERATURE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        startingTemperature \u003d Double.parseDouble(temperatures[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        endingTemperature \u003d Double.parseDouble(temperatures[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the starting temperature for the temperature range ."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public double getStartingTemperature () {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.startingTemperature;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the ending temperature for the temperature range ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public double getEndingTemperature () {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.endingTemperature;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a given string is a valid temperature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static boolean isValidTemperature(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return test.matches(VALIDATION_REGEX_TEMPERATURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a given string is a valid temperature Range ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static boolean isValidTemperatureRange(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return test.matches(VALIDATION_REGEX_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return startingTemperature + \" to \" + endingTemperature;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof TemperatureRange // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 startingTemperature \u003d\u003d ((TemperatureRange) other).startingTemperature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 endingTemperature \u003d\u003d ((TemperatureRange) other).endingTemperature); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/TemperatureRangePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Temperature} falls within the temperature range."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRangePredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final double startingTemperature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final double endingTemperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code TemperatureRangePredicate}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param startingTemperature The start of temperature range."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param endingTemperature The end of temperature range."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TemperatureRangePredicate(double startingTemperature, double endingTemperature) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.startingTemperature \u003d startingTemperature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.endingTemperature \u003d endingTemperature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        double temperature \u003d patient.getTemperature().getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return startingTemperature \u003c\u003d temperature \u0026\u0026 endingTemperature \u003e\u003d temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof TemperatureRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 startingTemperature \u003d\u003d (((TemperatureRangePredicate) other).startingTemperature) // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 endingTemperature \u003d\u003d (((TemperatureRangePredicate) other).endingTemperature)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "raymondge": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * As such, adding and updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * that the patient being added or updated is unique in terms of identity in the UniquePatientList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * However, the removal of a patient uses Patient#equals(Object) so as to ensure that the patient with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the patient with the input name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param name of patient to find."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the patient with the name if it exists."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        for (Patient patient : internalList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (patient.getName().equals(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return Optional.of(patient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        int index \u003d internalList.indexOf(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        internalList.set(index, toAdd); //creates a change for listener"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 138,
      "chiamyunqing": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/ComparableRoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ComparableRoom implements Comparator\u003cRoom\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int compare(Room room1, Room room2) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (room1.isOccupied() \u003d\u003d room2.isOccupied()) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (room1.getRoomNumber() \u003c room2.getRoomNumber()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (room1.isOccupied()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Represents Room in the app"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Optional\u003cPatient\u003e patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private RoomTasks tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates room object where isOccupied is always false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Room(int roomNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        requireAllNonNull(roomNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isOccupied \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates room object where roomNumber and isOccupied values are values given by user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room(int roomNumber, boolean isOccupied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        requireAllNonNull(roomNumber, isOccupied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a room object containing a patient that can be found in the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomNumber Room Number of the room."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patient Patient to be added to the room."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks RoomTasks containing tasks for the room."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Room(int roomNumber, Optional\u003cPatient\u003e patient, RoomTasks tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(roomNumber, patient, tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isOccupied \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates a Room object where none of the values are pre determined by app"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Room(int roomNumber, boolean isOccupied, Optional\u003cPatient\u003e patient, RoomTasks tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(roomNumber, isOccupied, patient, tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getRoomNumber() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomNumber;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //// patient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Optional\u003cPatient\u003e getPatient() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this.patient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isOccupied() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return isOccupied;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setOccupied(boolean isOccupied) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setPatient(Patient patient) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d Optional.ofNullable(patient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //// tasks"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable version of the list of tasks in this room as an {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cTask\u003e getReadOnlyTasks() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return tasks.getReadOnlyList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable version of the list of tasks in this room as a {@code ReadOnlyList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cTask\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the task with the provided {@code taskIndex} from this room."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty optional is returned if such a task is not found in the room."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskIndex The index of the task in this room."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return the optional-wrapped task if found, otherwise an empty optional"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskWithTaskIndex(Index taskIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.getTaskWithTaskIndex(taskIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a task to the task list of this room."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds tasks in {@code roomTasks} to this room."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param roomTasks The tasks to add."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTasks(List\u003cTask\u003e roomTasks) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.addTasks(roomTasks);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes a task from the task list of this room."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must be in this room."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to delete."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if task is not found in the task list of this room."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks.removeTask(task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces a task from the task list of this room with {@code editedTask}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must be in this room."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param target The task to replace."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editedTask The modified task to replace the original."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if task is not found in the task list of this room."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Enumerates the tasks in this room, numbering and specifying the details of each task."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A print-friendly summary for the tasks in this room."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getPrintFriendlyTaskSummary() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if both rooms of the same number have at least one other identity field that is the same."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * This defines a weaker notion of equality between two rooms."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isSameRoom(Room otherRoom) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherRoom !\u003d null"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 Integer.valueOf(otherRoom.getRoomNumber()).equals(getRoomNumber());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true if both rooms have the same identity and data fields."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * This defines a stronger notion of equality between two rooms."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d (Room) o;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (patient.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 room.patient.isEmpty()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 tasks.equals(room.tasks);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u0026\u0026 patient.equals(room.getPatient())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 tasks.equals(room.tasks);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Objects.hash(roomNumber, isOccupied, tasks);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String noPatientText \u003d \"-\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String patientDetails \u003d getPatient().map(Patient::toString).orElse(noPatientText);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        builder.append(\"Room Number: \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(getRoomNumber() + \"\\n\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(\"Patient: \")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(patientDetails + \"\\n\")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(\"Tasks: \")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(tasks.toString() + \"\\n\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 115,
      "LeeMingDe": 32,
      "raymondge": 3,
      "itssodium": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/RoomTaskAssociation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * An association class between {@code Room} and {@code Task}. This class serves 2 primary purposes:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * i) stores critical information related to {@code Room} (e.g. room number) to be displayed on the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Task user interface without creating a direct association between {@code Room} and {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * ii) provides a convenient way to retrieve the index of a task in room in constant time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTaskAssociation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Room room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an association between {@code room} and {@code task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room in which the task is found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskIndex The index of the task in the room."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomTaskAssociation(Room room, Task task, int taskIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(room, task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert taskIndex \u003e 0 : \"Task index must be greater than 0.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int getRoomNumber() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return room.getRoomNumber();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the total number of tasks in the room."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int getTotalTasksInRoom() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return room.getReadOnlyTasks().size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof RoomTaskAssociation)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskAssociation otherRoomTaskAssociation \u003d (RoomTaskAssociation) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return room.equals(otherRoomTaskAssociation.room)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 task.equals(otherRoomTaskAssociation.task)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex \u003d\u003d otherRoomTaskAssociation.taskIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/RoomTasks.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Wraps a {@code TaskList}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents the tasks in a room."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTasks implements ReadOnlyList\u003cTask\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an empty list of tasks in the room."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a list of tasks in the room and populates it with the tasks in {@code roomTasks}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomTasks(List\u003cTask\u003e tasksToAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(tasksToAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.setTasks(tasksToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the task with the provided {@code taskIndex} from the room."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty optional is returned if such a task is not found in the room."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskIndex The index of the task in the room."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return the optional-wrapped task if found, otherwise an empty optional"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskWithTaskIndex(Index taskIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e tasks \u003d getReadOnlyList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (taskIndex.getZeroBased() \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Optional.of(tasks.get(taskIndex.getZeroBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a task to the room."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds all tasks in {@code roomTasks} to the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTasks(List\u003cTask\u003e tasksToAdd) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(tasksToAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.add(tasksToAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the room."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Removes {@code key} from {@code RoomTasks}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code key} must exist in the room."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if a the room has no task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cTask\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(\"-\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return builder.toString().trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Task task : getReadOnlyList()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Results in \"1. \u003ctask\u003e\\n2. \u003ctask\u003e...\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(taskIndex++);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(\". \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString().trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof RoomTasks // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 tasks.equals(((RoomTasks) other).tasks));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/UniqueRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int numOfRooms;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private PriorityQueue\u003cRoom\u003e rooms \u003d new PriorityQueue\u003c\u003e(new ComparableRoom());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList((Room room) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Observable[] updatedTasks \u003d new Observable[]{room.getReadOnlyTasks()};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return updatedTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Resets the existing data of this {@code RoomList} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void resetData(ReadOnlyList\u003cRoom\u003e readOnlyRoomList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        requireAllNonNull(readOnlyRoomList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ObservableList\u003cRoom\u003e roomLists \u003d readOnlyRoomList.getReadOnlyList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.addAll(roomLists);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.addAll(roomLists);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Used it test cases to set rooms with a higher room number which can be more than number of rooms existing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * in hotel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param room is the room to be input into data"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setRoom(Room room) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int roomNumber \u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (room.getRoomNumber() \u003e internalList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setRoomForRoomNumberLessThanNumberOfRooms(room);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setRoomForRoomNumberMoreThanNumberOfRooms(room);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setRoomForRoomNumberLessThanNumberOfRooms(Room room) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int roomNumber \u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d internalList.size(); i \u003c roomNumber - 1; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Index index \u003d Index.fromOneBased(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room roomToAdd \u003d new Room(index.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            internalList.add(roomToAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms.add(room);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setRoomForRoomNumberMoreThanNumberOfRooms(Room room) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int roomNumber \u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Index index \u003d Index.fromOneBased(roomNumber);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room currRoom \u003d internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.remove(currRoom);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.add(index.getZeroBased(), room);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.add(room);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns Priority Queue of rooms"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this.rooms;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns number of rooms in hotel"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomObservableList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds this room to the RoomList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param room is added to RoomList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(Room room) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.add(room);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.add(room);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds the number of the rooms in a hotel"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param numOfRooms is the number of rooms to be added"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        initRooms();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void initRooms() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (numOfRooms \u003c\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (numOfRooms \u003e internalList.size()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setRoomsInHotel_increaseInNumberOfRooms();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (numOfRooms \u003c internalList.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setRoomsInHotel_decreaseInNumberOfRooms();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //would not reach this block, exists to improve code quality"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setRoomsInHotel_increaseInNumberOfRooms() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ArrayList\u003cRoom\u003e roomArrayList \u003d new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms \u003d new PriorityQueue\u003c\u003e(new ComparableRoom());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms \u003d new PriorityQueue\u003c\u003e(new ComparableRoom()); //remove all the rooms in the PQ"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d internalList.size(); i \u003c numOfRooms; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d new Room(i + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms.add(room);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            roomArrayList.add(room);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        internalList.setAll(roomArrayList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setRoomsInHotel_decreaseInNumberOfRooms() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ArrayList\u003cRoom\u003e roomArrayList \u003d new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms \u003d new PriorityQueue\u003c\u003e(new ComparableRoom());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e occupiedRooms \u003d occupiedRooms();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e unoccupiedRooms \u003d unOccupiedRooms();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (occupiedRooms.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            combinedStream(occupiedRooms, unoccupiedRooms);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms \u003d new PriorityQueue\u003c\u003e(new ComparableRoom()); //remove all the rooms in the PQ"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfRooms; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d internalList.get(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms.add(room);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int size \u003d internalList.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d numOfRooms; i \u003c size; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomArrayList.remove(numOfRooms);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.setAll(roomArrayList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives list of empty rooms in the region which exists after shrinkage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cRoom\u003e unOccupiedRooms() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfRooms; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (!internalList.get(i).isOccupied()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                rooms.add(internalList.get(i));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives list of occupied rooms in the region which does not exist after shrinkage."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cRoom\u003e occupiedRooms() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d numOfRooms; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (internalList.get(i).isOccupied()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                rooms.add(internalList.get(i));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return rooms;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void combinedStream(List\u003cRoom\u003e occupiedRooms, List\u003cRoom\u003e unoccupiedRooms) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Room room : occupiedRooms) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room empty \u003d unoccupiedRooms.get(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            unoccupiedRooms.remove(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            empty.setOccupied(true);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            empty.setPatient(room.getPatient().get());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            empty.addTasks(room.getReadOnlyTasks());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean hasSpaceForRooms() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return getNumOfExcessOccupiedRooms() \u003c\u003d numOfEmptyRooms();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives the number of rooms that are occupied in the hotel facility beyond shrinkage"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfExcessOccupiedRooms() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return (int) IntStream.rangeClosed(numOfRooms, internalList.size() - 1)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .mapToObj(x -\u003e internalList.get(x)).filter(Room::isOccupied).count();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives the number of rooms that are empty for room numbers after shrinkage."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int numOfEmptyRooms() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return (int) IntStream.rangeClosed(0, numOfRooms - 1)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .mapToObj(x -\u003e internalList.get(x)).filter(room -\u003e !room.isOccupied()).count();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return equals(new PriorityQueue\u003c\u003e(rooms), new PriorityQueue\u003c\u003e(((UniqueRoomList) other).rooms))"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Tests whether 2 PriorityQueues are equal by checking whether at each relative position they contain the equal"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * rooms"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(PriorityQueue\u003cRoom\u003e rooms1, PriorityQueue\u003cRoom\u003e rooms2) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (rooms1.size() !\u003d rooms2.size()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            int size \u003d rooms1.size();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if (!rooms1.poll().equals(rooms2.poll())) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean containsRoom(Room toCheck) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRoom);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Clears the room which contains the patient with the given name."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Tasks should still remain in the room."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param patientName to clear the room from."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void clearRoom(Name patientName) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(patientName);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d internalList.size(); i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (!internalList.get(i - 1).isOccupied()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Name patientNameInRoom \u003d internalList.get(i - 1).getPatient().get().getName();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (patientName.equals(patientNameInRoom)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Room roomToClear \u003d internalList.get(i - 1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                setSingleRoom(roomToClear, new Room(roomToClear.getRoomNumber(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        false, Optional.empty(), new RoomTasks(roomToClear.getReadOnlyTasks())));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param target Room to be changed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param editedRoom Room that has been changed."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!target.isSameRoom(editedRoom) \u0026\u0026 containsRoom(editedRoom)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.remove(target); // this and the next LOC is to replace the room in the priority queue"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.add(editedRoom);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int result \u003d Objects.hash(numOfRooms, rooms, internalList);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        result \u003d 31 * result;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setPreferredNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setRooms(PriorityQueue\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms \u003d rooms;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 4,
      "chiamyunqing": 27,
      "itssodium": 295
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Signals that the operation will result in duplicate Rooms (Rooms are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/RoomNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified room."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTimeDue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents the date-time when a Task is due."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: immutable; is an optional attribute of task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * is valid as declared in {@link #isValidDateTimeDue(String)}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeDue implements Comparable\u003cDateTimeDue\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Due dates should adhere to one of the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"following formats:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"1. yyyyMMdd (e.g. 20201230)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"2. yyyyMMdd HHmm (e.g. 20201230 2359)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"3. d/M/yyyy (e.g. 30/12/2020)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"4. d/M/yyyy HHmm (e.g. 30/12/2020 2359)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Format 3 and 4 allow a single digit for day and month (e.g. 1/1/2020); \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Format 1 and 2 do not.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter[] ALLOWED_DATETIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String NULL_VALUE_TO_STRING \u003d \"-\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final Optional\u003cLocalDateTime\u003e value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private String val;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DateTimeDue}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code optionalDueAt} must be non-null (but can be empty)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If the date-time string is empty, the value defaults to {@code Optional.empty()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If the date-time string is present and valid, the value parsed into is a {@code LocalDateTime}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and wrapped in an {@code Optional}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param optionalDueAt A valid optional date-time string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue(Optional\u003cString\u003e optionalDueAt) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(optionalDueAt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d optionalDueAt"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map((dueAt) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    String trimmedDueAt \u003d dueAt.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    checkArgument(isValidDateTimeDue(trimmedDueAt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    val \u003d trimmedDueAt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    return Optional.of(DateTimeUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                            .parseFirstMatching(trimmedDueAt, LocalDateTime::from, ALLOWED_DATETIME_FORMATS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                })"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(Optional.empty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DateTimeDue}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code dueAt} must be non-null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dueAt A valid date-time string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue(String dueAt) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(dueAt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedDueAt \u003d dueAt.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        checkArgument(isValidDateTimeDue(trimmedDueAt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d Optional.of(DateTimeUtil"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseFirstMatching(trimmedDueAt, LocalDateTime::from, ALLOWED_DATETIME_FORMATS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        val \u003d trimmedDueAt;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cLocalDateTime\u003e getValue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getVal() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return val;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns if a given string is a valid date-time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean isValidDateTimeDue(String test) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.parseFirstMatching(test, LocalDateTime::from, ALLOWED_DATETIME_FORMATS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map((dueAt) -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    dueAt.format(DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(NULL_VALUE_TO_STRING);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof DateTimeDue // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 value.equals(((DateTimeDue) other).value)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int compareTo(DateTimeDue other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // empty vs other empty -\u003e returns 0"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (value.isEmpty() \u0026\u0026 other.value.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // empty vs other not empty -\u003e returns -1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (value.isEmpty() \u0026\u0026 other.value.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // not empty vs other empty -\u003e returns 1"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (value.isPresent() \u0026\u0026 other.value.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // not empty vs not empty -\u003e returns 1 if date comes after, 0 if same date, -1 if date comes before"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert (value.isPresent() \u0026\u0026 other.value.isPresent()) : \"Both date-time values are present here.\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dueAt \u003d value.get();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime otherDueAt \u003d other.value.get();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (dueAt.isEqual(otherDueAt)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else if (dueAt.isAfter(otherDueAt)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a description of a Task in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final int MINIMUM_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final int MAXIMUM_LENGTH \u003d 4000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The description of a task must be between \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + MINIMUM_LENGTH + \" and \" + MAXIMUM_LENGTH + \" characters long.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description A description of the Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert isValidDescription(description) : MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return test.length() \u003e\u003d MINIMUM_LENGTH \u0026\u0026 test.length() \u003c\u003d MAXIMUM_LENGTH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTimeDue} falls within the range."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class DueDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final DateTimeDue duedate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code DueDatePredicate}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param duedate The start of temperature range."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public DueDatePredicate(DateTimeDue duedate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert duedate.value.isPresent();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.duedate \u003d duedate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof DueDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 duedate \u003d\u003d (((DueDatePredicate) other).duedate)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (task.getDueAt().value.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (duedate.compareTo(task.getDueAt()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "LeeMingDe": 1,
      "raymondge": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Task that can be assigned to a room."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Data fields (i.e. values entered by user)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final DateTimeDue dueAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Every field apart must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task(Description description, DateTimeDue dueAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(description, dueAt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue getDueAt() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return dueAt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if both tasks have the same data and metadata fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherTask.getDueAt().equals(getDueAt());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Objects.hash(description, dueAt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(\"Due Date: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(getDueAt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A list of tasks that does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds all tasks in {@code tasks} to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.addAll(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list is empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Task task : internalList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            builder.append(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return builder.toString().trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 118,
      "raymondge": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains utility methods for populating {@code CovigentApp} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static Patient[] getSamplePatient() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Temperature(\"36.7\"), new PeriodOfStay(\"20200908-20200918\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"87438807\"), new Age(\"23\"), null),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Temperature(\"37.0\"), new PeriodOfStay(\"20200808-20200819\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"99272758\"), new Age(\"37\"), null),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Temperature(\"38.0\"), new PeriodOfStay(\"20200301-20200309\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"93210283\"), new Age(\"87\"), null),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Temperature(\"35.8\"), new PeriodOfStay(\"20201001-20201014\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"91031282\"), new Age(\"13\"), null),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Temperature(\"37.7\"), new PeriodOfStay(\"20200901-20200915\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"92492021\"), new Age(\"65\"), null)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static ReadOnlyList\u003cPatient\u003e getSampleCovigentApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords sampleAb \u003d new PatientRecords();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Patient samplePatient : getSamplePatient()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static Room[] getSampleRoom() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Room[] {};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static Task[] getSampleTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new Task[] {};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static ReadOnlyList\u003cRoom\u003e getSampleRoomList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Room room : getSampleRoom()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.initRooms(room);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static ReadOnlyList\u003cTask\u003e getSampleRoomTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTasks roomTasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Task task : getSampleTask()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            roomTasks.addTask(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomTasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 21,
      "LeeMingDe": 3,
      "chiamyunqing": 5,
      "-": 16,
      "raymondge": 11,
      "itssodium": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String DATE_WRONG_FORMAT \u003d \"The date is given in the wrong format.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dueAt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given Task details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"dueAt\") String dueAt) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dueAt \u003d source.getDueAt().getVal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Jackson-friendly adapted Task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        DateTimeDue dateTimeDue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (dueAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                dateTimeDue \u003d new DateTimeDue(Optional.empty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                dateTimeDue \u003d new DateTimeDue(dueAt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalArgumentException i) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(DATE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Task(new Description(description), dateTimeDue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskList} with the given tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code TaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyList\u003cTask\u003e source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.addAll(source.getReadOnlyList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Task List into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomTasks toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomTasks roomTasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomTasks.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomTasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "itssodium": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Reads data from storage data files and imports them into RoomTasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class JsonTaskStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Path task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates the TaskOccupancy object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public JsonTaskStorage() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates the TaskOccupancy object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public JsonTaskStorage(Path task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTask\u003e\u003e readOnlyTask() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return readOnlyTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns RoomTasks data as a {@code ReadOnlyList\u003cTask\u003e}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cTask\u003e\u003e readOnlyTask(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonCovigentApp \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (!jsonCovigentApp.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.of(jsonCovigentApp.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Saves the task to the {@code roomTasks}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void saveTask(RoomTasks roomTasks) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        saveTasks(roomTasks, task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Saves the task to the {@code roomTasks} with the path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void saveTasks(RoomTasks roomTasks, Path fileTask) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        FileUtil.createIfMissing(fileTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.addAll(roomTasks.getReadOnlyList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(roomTasks), fileTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 16,
      "LeeMingDe": 1,
      "raymondge": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.PatientRecordsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.RoomRecordsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public interface Storage extends PatientRecordsStorage, UserPrefsStorage, RoomRecordsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Path getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "-": 27,
      "raymondge": 1,
      "itssodium": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.PatientRecordsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.RoomRecordsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Manages storage of CovigentApp data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private PatientRecordsStorage patientRecordsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private RoomRecordsStorage roomRecordsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PatientRecordsStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public StorageManager(PatientRecordsStorage patientRecordsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        RoomRecordsStorage roomOccupancyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.patientRecordsStorage \u003d patientRecordsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomRecordsStorage \u003d roomOccupancyStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getPatientRecordsFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecordsStorage.getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return readPatientRecords(patientRecordsStorage.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecordsStorage.readPatientRecords(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        savePatientRecords(patientRecords, patientRecordsStorage.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        patientRecordsStorage.savePatientRecords(patientRecords, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy() throws DataConversionException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return readOnlyRoomOccupancy(roomRecordsStorage.getRoomsRecordsFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomRecordsStorage.readOnlyRoomOccupancy(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getRoomsRecordsFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomRecordsStorage.getRoomsRecordsFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        saveRoomsInformation(roomList, roomRecordsStorage.getRoomsRecordsFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList, Path fileRoomsOccupied) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomRecordsStorage.saveRoomsInformation(roomList, fileRoomsOccupied);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 1,
      "-": 62,
      "raymondge": 11,
      "itssodium": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/patient/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String temperature;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String periodOfStay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"temperature\") String temperature,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                              @JsonProperty(\"periodOfStay\") String periodOfStay, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                              @JsonProperty(\"age\") String age, @JsonProperty(\"comment\") String comment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature \u003d source.getTemperature().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay \u003d source.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age \u003d source.getAge().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment \u003d source.getComment().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts this Jackson-friendly adapted Patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (temperature \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    Temperature.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Temperature.isValidTemperature(temperature)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Temperature modelTemp \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (periodOfStay \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    PeriodOfStay.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(periodOfStay)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(PeriodOfStay.getErrorMessage(periodOfStay));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final PeriodOfStay modelPeriod \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Age.getErrorMessage(age));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Comment.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Comment modelComment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient(modelName, modelTemp, modelPeriod, modelPhone, modelAge, modelComment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 17,
      "chiamyunqing": 47,
      "-": 51,
      "itssodium": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/patient/JsonPatientRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access patient records data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonPatientRecordsStorage implements PatientRecordsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientRecordsStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonPatientRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getPatientRecordsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return readPatientRecords(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readPatientRecords()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializablePatientRecords\u003e jsonPatientRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializablePatientRecords.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonPatientRecords.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonPatientRecords.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        savePatientRecords(patientRecords, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@code #savePatientRecords(ReadOnlyList\u003cPatient\u003e)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(patientRecords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePatientRecords(patientRecords), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "-": 80,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/patient/JsonSerializablePatientRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable Patient Records that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"covigentapp\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializablePatientRecords {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientRecords} with the given patients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializablePatientRecords(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyPatientRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePatientRecords}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializablePatientRecords(ReadOnlyList\u003cPatient\u003e source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        patients.addAll(source.getReadOnlyList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code PatientRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecords patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (patientRecords.hasPatient(patient)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 1,
      "-": 57,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/patient/PatientRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link PatientRecords}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface PatientRecordsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns CovigentApp data as a {@code ReadOnlyList\u003cPatient\u003e}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getPatientRecordsFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readPatientRecords(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@code ReadOnlyList\u003cPatient\u003e} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param patientRecords cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #savePatientRecords(ReadOnlyList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 8,
      "-": 39,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/rooms/JsonAdaptedRoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.rooms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.JsonSerializableTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonAdaptedPatient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonAdaptedRoom {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_PRESENT_IS_OCCUPIED_FALSE \u003d \"When patient is present isOccupied cannot be false\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_ABSENT_IS_OCCUPIED_TRUE \u003d \"When patient is absent isOccupied cannot be true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String DATE_WRONG_FORMAT_IN_TASKS \u003d \"The date is given in the wrong format in tasks.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_WRONG_FORMAT \u003d \"The patient is given in the wrong format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private JsonAdaptedPatient patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private JsonSerializableTaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates JsonAdaptedRoom based on the inputs given by the user of roomNumber and isOccupied"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedRoom(@JsonProperty(\"roomNumber\") int roomNumber,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"isOccupied\") boolean isOccupied,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"patient\") JsonAdaptedPatient patient,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"tasks\") JsonSerializableTaskList tasks) throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (patient !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates JsonAdaptedRoom from Room object given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedRoom(Room source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d source.getRoomNumber();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d source.isOccupied();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (source.getPatient().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.patient \u003d new JsonAdaptedPatient(source.getPatient().get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.tasks \u003d new JsonSerializableTaskList(source.getReadOnlyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Jackson-friendly adapted Room object into the model\u0027s {@code Room} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted room."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient !\u003d null \u0026\u0026 !isOccupied) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(PATIENT_PRESENT_IS_OCCUPIED_FALSE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient \u003d\u003d null \u0026\u0026 isOccupied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(PATIENT_ABSENT_IS_OCCUPIED_TRUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (patient !\u003d null \u0026\u0026 isPatientInWrongFormat()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(PATIENT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isTaskNotInCorrectFormat()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(DATE_WRONG_FORMAT_IN_TASKS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new Room(roomNumber, isOccupied, Optional.empty(), tasks.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Room(roomNumber, isOccupied, Optional.of(patient.toModelType()), tasks.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isPatientInWrongFormat() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            patient.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalValueException i) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isTaskNotInCorrectFormat() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks.toModelType();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalValueException i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/rooms/JsonRoomOccupancyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.rooms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Reads data from storage data files and imports them into RoomList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonRoomOccupancyStorage implements RoomRecordsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path roomsOccupied;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonRoomOccupancyStorage() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates RoomOccupancyStorage object that reads the number of rooms a hotel has and the rooms which are"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * occupied"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonRoomOccupancyStorage(Path roomsOccupied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomsOccupied \u003d roomsOccupied;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getRoomsRecordsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomsOccupied;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return readOnlyRoomOccupancy(roomsOccupied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns RoomList data as a {@code ReadOnlyList\u003cRoom\u003e}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Optional\u003cJsonSerializableRoomList\u003e jsonCovigentApp \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                filePath, JsonSerializableRoomList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!jsonCovigentApp.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return Optional.of(jsonCovigentApp.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        saveRoomsInformation(roomList, roomsOccupied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Function saves the room numbers of occupied rooms"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param roomList contains information of which rooms are occupied"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param fileRoomsOccupied Path to where to write the room numbers of occupied rooms"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList, Path fileRoomsOccupied) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        FileUtil.createIfMissing(fileRoomsOccupied);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.addAll(roomList.getReadOnlyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRoomList(roomList), fileRoomsOccupied);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "itssodium": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/rooms/JsonSerializableRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.rooms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "@JsonRootName(value \u003d \"roomList\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonSerializableRoomList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String WRONG_ORDER_OF_ROOM \u003d \"Rooms are not being input in the correct order.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonProperty(\"rooms\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonSerializableRoomList} with the given rooms."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableRoomList(@JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code RoomList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRoomList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableRoomList(ReadOnlyList\u003cRoom\u003e source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms.addAll(source.getReadOnlyList().stream().map(JsonAdaptedRoom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this task list into the model\u0027s {@code RoomList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int currRoomNum \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d jsonAdaptedRoom.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (isNotInOrder(room, currRoomNum)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new IllegalValueException(WRONG_ORDER_OF_ROOM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            currRoomNum++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.initRooms(room);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNotInOrder(Room room, int currRoomNum) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return room.getRoomNumber() !\u003d currRoomNum;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 1,
      "itssodium": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/rooms/RoomRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage.rooms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public interface RoomRecordsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Path getRoomsRecordsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns CovigentApp data as a {@code ReadOnlyList\u003cRoom\u003e}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @see #readOnlyRoomOccupancy()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readOnlyRoomOccupancy(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Saves the given {@code ReadOnlyList\u003cRoom\u003e} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param roomList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @see #saveRoomsInformation(ReadOnlyList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void saveRoomsInformation(ReadOnlyList\u003cRoom\u003e roomList, Path fileRoomsOccupied) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/covigent.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    // attributes for tabs ----------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image patientImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/patientlogo.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image roomImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/roomlogo.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image taskImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tasklogo.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String patientTabContent \u003d \"PATIENTS\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String roomTabContent \u003d \"ROOMS\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String taskTabContent \u003d \"TASKS\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RoomListPanel roomListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private RoomTaskListPanel roomTaskListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ImageView logoIcon;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TabPane covigentTabs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab patientTab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab roomTab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab taskTab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private StackPane roomListPanelPlaceHolder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //set images"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.setTabContent(patientTab, patientImage, patientTabContent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.setTabContent(roomTab, roomImage, roomTabContent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.setTabContent(taskTab, taskImage, taskTabContent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private void setTabContent(Tab tab, Image image, String text) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        VBox content \u003d new VBox();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //set image"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ImageView icon \u003d new ImageView(image);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        icon.setFitHeight(70);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        icon.setFitWidth(70);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //set text"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        label.setFont(Font.font(\"American Typewriter\", FontWeight.BOLD, 15));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //manually centre-align text"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!text.equals(patientTabContent)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            label.setPadding(new Insets(0, 0, 0, 10));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        content.getChildren().addAll(icon, label);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        tab.setGraphic(content);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void displayAppIcon() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        logoIcon.setImage(logoImage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListPanelPlaceHolder.getChildren().add(roomListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTaskListPanel \u003d new RoomTaskListPanel(logic.getFilteredRoomTaskRecords());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(roomTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "LeeMingDe": 11,
      "chiamyunqing": 66,
      "-": 136,
      "raymondge": 3,
      "itssodium": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CovigentApp level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code PatientCard} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature.setText(\"Temperature: \" + patient.getTemperature().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 1,
      "chiamyunqing": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing -reused"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//Reused code from RoomDetailsPanel class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Panel containing the details of the patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String FXML \u003d \"PatientDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image imagePatient \u003d new Image(getClass().getResourceAsStream(\"/images/patient_icon.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientDetailsPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label patientHeader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label periodOfStay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label comment;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientDetailsPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the details of the patient."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //sets up the image"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitHeight(30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitWidth(30);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setGraphic(imageView);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //fill in the details"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setText(patient.getName().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientHeader.setUnderline(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature.setText(\"Temperature: \" + patient.getTemperature().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay.setText(\"Period of stay: \" + patient.getPeriodOfStay().readerFriendlyString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        phone.setText(\"Phone number: \" + patient.getPhone().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age.setText(\"Age: \" + patient.getAge().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment.setText(\"Comment: \" + patient.getComment().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        logger.log(Level.INFO, \"Displayed patient details successfully.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the details for an empty patient records."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setNoPatientDetails() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //sets up the image"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePatient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitHeight(30);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitWidth(30);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setGraphic(imageView);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //fill in the details"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setText(\"NO PATIENT PRESENT\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientHeader.setUnderline(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature.setText(\"Temperature: -\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay.setText(\"Period of stay: -\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        phone.setText(\"Phone number: -\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age.setText(\"Age: -\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment.setText(\"Comment: -\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        logger.log(Level.INFO, \"Set no patient details successfully.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author chiamyunqing-reused"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from RoomListPanel class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private PatientDetailsPanel patientDetailsPanel \u003d new PatientDetailsPanel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane patientDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setPatientDetailsPanel(patientList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        patientDetailsPanelPlaceholder.getChildren().add(patientDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        updateDetailsIfChanged(patientList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a {@code PatientDetailsPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPatientDetailsPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!patientList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            patientDetailsPanel.setPatientDetails(patientList.get(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            patientDetailsPanel.setNoPatientDetails();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Attach listener to {@code patientList} and update details panel."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fixes issue of editPatient changes not immediately reflected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param patientList to listen for changes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateDetailsIfChanged(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        patientList.addListener(new ListChangeListener\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            public void onChanged(Change\u003c? extends Patient\u003e change) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                while (change.next()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (change.wasAdded()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        int indexToChange \u003d change.getFrom();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        Patient patientToDisplay \u003d change.getList().get(indexToChange);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        patientListView.scrollTo(indexToChange);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        patientListView.getSelectionModel().select(indexToChange);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        patientListView.getFocusModel().focus(indexToChange);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        patientDetailsPanel.setPatientDetails(patientToDisplay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (change.wasRemoved()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (patientList.size() \u003e 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                            patientListView.scrollTo(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                            patientListView.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                            patientListView.getFocusModel().focus(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        setPatientDetailsPanel(patientList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles mouse click event on the patient card."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mouseEvent created by the user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleMouseClick(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patientToDisplay \u003d patientListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        patientDetailsPanel.setPatientDetails(patientToDisplay);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.log(Level.INFO, \"Patient mouse click handled.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "chiamyunqing": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@@author LeeMingDe"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * An UI component that displays information of a {@code Room}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CovigentApp level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image unoccupied \u003d new Image(this.getClass().getResourceAsStream(\"/images/green_circle.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image occupied \u003d new Image(this.getClass().getResourceAsStream(\"/images/red_circle.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ImageView showOccupancy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label occupancy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomCode} with the given {@code Room} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomCard(Room room) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //position the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        occupancy.setTranslateX(-70);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        occupancy.setTranslateY(-20);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setTranslateX(10);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(String.format(\"Room #%d\", room.getRoomNumber()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setRoomCard(room);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void setRoomCard(Room room) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (room.isOccupied()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Text text \u003d new Text(\"OCCUPIED\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            text.setFill(Color.RED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            occupancy.setGraphic(text);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            showOccupancy.setImage(occupied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Text text \u003d new Text(\"UNOCCUPIED\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            text.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            occupancy.setGraphic(text);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            showOccupancy.setImage(unoccupied);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomNumber.getText().equals(card.roomNumber.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 86,
      "itssodium": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@@author LeeMingDe"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Panel containing the room details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image imagePatient \u003d new Image(getClass().getResourceAsStream(\"/images/patient_icon.png\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image imageTask \u003d new Image(getClass().getResourceAsStream(\"/images/task_icon.png\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomDetailsPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label patientHeader;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label taskHeader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label patientDetails;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label taskDetails;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomDetailsPanel} with the given {@code Room}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomDetailsPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setIcons();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void setIcons() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePatient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitHeight(20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitWidth(20);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        patientHeader.setGraphic(imageView);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView \u003d new ImageView(imageTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitHeight(20);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitWidth(20);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskHeader.setGraphic(imageView);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the room patient and task details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param room To set the details for."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setRoomDetails(Room room) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.log(Level.INFO, \"Set non-empty room details successfully.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (room.getPatient().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            patientDetails.setText(room.getPatient().get().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            patientDetails.setText(\"No Patient Present.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(\"Room #\" + room.getRoomNumber());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskDetails.setText(room.getPrintFriendlyTaskSummary());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the details for an empty room."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setEmptyRoomDetails() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.log(Level.INFO, \"Set empty room details successfully.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(\"NO ROOM PRESENT\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        patientDetails.setText(\"-\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskDetails.setText(\"-\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@@author LeeMingDe"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Panel containing the list of rooms."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RoomDetailsPanel roomDetailsPanel \u003d new RoomDetailsPanel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private AnchorPane roomDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!roomList.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            roomDetailsPanel.setRoomDetails(roomList.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            roomDetailsPanel.setEmptyRoomDetails();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomDetailsPanelPlaceholder.getChildren().add(roomDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        updateDetailsIfChanged(roomList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListView.setItems(roomList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListViewCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles mouse click event on the items."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param mouseEvent Created by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void handleMouseClick(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomToDisplay \u003d roomListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomDetailsPanel.setRoomDetails(roomToDisplay);;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.log(Level.INFO, \"MouseClick is fired and handled\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Attach listener to {@code roomList} and update details panel."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomList RoomList to attach listener to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void updateDetailsIfChanged(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomList.addListener(new ListChangeListener\u003cRoom\u003e() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            public void onChanged(Change\u003c? extends Room\u003e change) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                while (change.next()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    if (change.wasAdded() || change.wasUpdated()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        logger.log(Level.INFO, \"OnChangeListener is fired\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        int indexToChange \u003d change.getFrom();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        Room roomToDisplay \u003d change.getList().get(indexToChange);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.scrollTo(indexToChange);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.getSelectionModel().select(indexToChange);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.getFocusModel().focus(indexToChange);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomDetailsPanel.setRoomDetails(roomToDisplay);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setGraphic(new RoomCard(room).getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Panel containing the list of room with tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String FXML \u003d \"RoomTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomTaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private ListView\u003cRoomTaskAssociation\u003e roomTaskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code RoomTaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomTaskListPanel(ObservableList\u003cRoomTaskAssociation\u003e roomTaskAssociations) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTaskListView.setItems(roomTaskAssociations);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTaskListView.setCellFactory(listView -\u003e new RoomTaskListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        logger.info(\"RoomTaskListPanel has been initialized with tasks from all rooms.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code RoomTaskAssociation} using a {@code TaskCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    class RoomTaskListViewCell extends ListCell\u003cRoomTaskAssociation\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        protected void updateItem(RoomTaskAssociation roomTaskAssociation, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            super.updateItem(roomTaskAssociation, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (empty || roomTaskAssociation \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                int roomNumber \u003d roomTaskAssociation.getRoomNumber();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                int taskIndex \u003d roomTaskAssociation.getTaskIndex();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                int totalNumberOfTasksInRoom \u003d roomTaskAssociation.getTotalTasksInRoom();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                setGraphic(new TaskCard(roomNumber, taskIndex, totalNumberOfTasksInRoom,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                        roomTaskAssociation.getTask()).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 41,
      "chiamyunqing": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final int roomNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final int totalNumberOfTasksInRoom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String roomIdText \u003d \"[Room %1$d]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String taskIdText \u003d \"Task %1$d of %2$d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String dueAtText \u003d \"Due Date: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Label roomId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Label taskId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TextField description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Label dueAt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code TaskCard} with the given {@code Task}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param roomNumber The room number of the room in which the task is found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskCard(int roomNumber, int taskIndex, int totalNumberOfTasksInRoom, Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.totalNumberOfTasksInRoom \u003d totalNumberOfTasksInRoom;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setTaskCard(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the labels in {@code TaskCard} based on the information in {@code Task}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task from which the information is retrieved to set the labels."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void setTaskCard(Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomId.setText(String.format(roomIdText, roomNumber));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskId.setText(String.format(taskIdText, taskIndex, totalNumberOfTasksInRoom));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        description.setText(task.getDescription().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dueAt.setText(String.format(dueAtText, task.getDueAt().toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomNumber \u003d\u003d ((TaskCard) other).roomNumber"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex \u003d\u003d ((TaskCard) other).taskIndex"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 totalNumberOfTasksInRoom \u003d\u003d ((TaskCard) other).totalNumberOfTasksInRoom"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 task.equals(((TaskCard) other).task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 38,
      "raymondge": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/appLogo.jpg\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            mainWindow.displayAppIcon();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"css/MainWindow.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/css/CommandBox.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".command-box {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 14
    }
  },
  {
    "path": "src/main/resources/css/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-background: #aec6cf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-radius: 3px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-radius: 3px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "chiamyunqing": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/resources/css/ListCard.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".card-pane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".label-big {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".label-small {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 25
    }
  },
  {
    "path": "src/main/resources/css/ListPanel.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: derive(#fff1f1, 20%);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff2cc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:selected .card-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-color: #78909c;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 3px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 31,
      "chiamyunqing": 1
    }
  },
  {
    "path": "src/main/resources/css/ListPanelNoHighlights.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: derive(#fff1f1, 20%);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 23
    }
  },
  {
    "path": "src/main/resources/css/MainWindow.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    background-color: #aec6cf; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 3px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 0px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 1px 8px;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 8px 1px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-logo-stack-pane {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 1px;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-tab-pane .tab {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-rotate: 90;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-pref-width: 90px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-pref-height: 90px;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-tab-pane .tab:selected {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: derive(#ff9999, 40%);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-pane-with-border {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-padding: 5px 10px;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-border-color: derive(#aec6cf, 5%);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".main-status-bar {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 105,
      "LeeMingDe": 1,
      "chiamyunqing": 2,
      "itssodium": 8
    }
  },
  {
    "path": "src/main/resources/css/PatientDetailsPanel.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ".patient-details-panel .label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#nameOfPatient {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-size: 2.2em;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-text-fill: rgb(31, 31, 31);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "#detailsHeader {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-size: 1.4em;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-padding: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-border-insets: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-background-insets: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 26
    }
  },
  {
    "path": "src/main/resources/css/ResultDisplay.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-min-height: 100px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".result-display .content {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-color: #fff1f1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 14,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/css/RoomDetailsPanel.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".room-details-panel .label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-padding: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-border-insets: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    -fx-background-insets: 20px 50px 30px 30px;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ".room-details-panel #room-number {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-font-size: 2.2em;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ".room-details-panel .label-header {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "LeeMingDe": 16,
      "chiamyunqing": 3
    }
  },
  {
    "path": "src/main/resources/css/StatusBarFooter.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-padding: 2px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-min-height: 2px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-background-color: #aec6cf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-border-color: derive(#2b5c7b, 10%);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15,
      "itssodium": 6
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box\" stylesheets\u003d\"@../css/CommandBox.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"500.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Covigent\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cImage url\u003d\"@/images/covigent.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cURL value\u003d\"@../css/MainWindow.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cURL value\u003d\"@../css/Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cHBox fx:id\u003d\"covigentLogoPlaceholder\" styleClass\u003d\"main-logo-stack-pane\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cImageView fx:id\u003d\"logoIcon\" fitHeight\u003d\"150.0\" fitWidth\u003d\"200\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \u003cInsets left\u003d\"-10\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cTabPane fx:id\u003d\"covigentTabs\" rotateGraphic\u003d\"true\" side\u003d\"LEFT\" styleClass\u003d\"main-tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cTab fx:id\u003d\"patientTab\" styleClass\u003d\"main-tab\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" styleClass\u003d\"main-logo-stack-pane\" stylesheets\u003d\"@../css/MainWindow.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cTab fx:id\u003d\"roomTab\" styleClass\u003d\"main-tab\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"roomListPanelPlaceHolder\" styleClass\u003d\"main-logo-stack-pane\" stylesheets\u003d\"@../css/MainWindow.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cTab fx:id\u003d\"taskTab\" styleClass\u003d\"main-tab\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" styleClass\u003d\"main-logo-stack-pane\" stylesheets\u003d\"@../css/MainWindow.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"main-pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"150\" prefHeight\u003d\"200\" styleClass\u003d\"main-pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" minHeight\u003d\"30.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 22,
      "chiamyunqing": 21,
      "-": 21,
      "raymondge": 4,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/view/PatientDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.paint.Color?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c!--emulates room details panel --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cScrollPane fitToWidth\u003d\"true\" styleClass\u003d\"patient-details-panel\" stylesheets\u003d\"@../css/PatientDetailsPanel.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel id\u003d\"nameOfPatient\" fx:id\u003d\"name\" text\u003d\"\\$name\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel id\u003d\"detailsHeader\" fx:id\u003d\"patientHeader\" text\u003d\"Patient Details:\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel fx:id\u003d\"temperature\" text\u003d\"\\$temperature\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel fx:id\u003d\"periodOfStay\" text\u003d\"\\$periodOfStay\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel fx:id\u003d\"age\" text\u003d\"\\$age\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cLabel fx:id\u003d\"comment\" text\u003d\"\\$comment\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003c/content\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003ceffect\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cDropShadow\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ccolor\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cColor opacity\u003d\"0.3199999928474426\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/color\u003e\u003c/DropShadow\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003c/effect\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 5,
      "chiamyunqing": 66
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label-big\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"label-big\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"temperature\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cHBox stylesheets\u003d\"@../css/ListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cVBox maxWidth\u003d\"350.0\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cListView fx:id\u003d\"patientListView\" onMouseClicked\u003d\"#handleMouseClick\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"patientDetailsPanelPlaceholder\" minWidth\u003d\"300.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003c/HBox.margin\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 17,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\"  stylesheets\u003d\"@../css/ResultDisplay.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" text\u003d\"Welcome to Covigent. Key in any command to get started.\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/RoomDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.paint.Color?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cScrollPane fitToWidth\u003d\"true\" styleClass\u003d\"room-details-panel\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel id\u003d\"room-number\" fx:id\u003d\"roomNumber\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" text\u003d\"Room Number\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel fx:id\u003d\"patientHeader\" graphicTextGap\u003d\"7.0\" style\u003d\"-fx-font-size: 1.5em; -fx-font-family: Segoe UI Semibold; -fx-font-weight: bold;\" styleClass\u003d\"room-details-panel\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" text\u003d\"Patient Details:\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel fx:id\u003d\"patientDetails\" minHeight\u003d\"-Infinity\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel fx:id\u003d\"taskHeader\" graphicTextGap\u003d\"7.0\" style\u003d\"-fx-font-size: 1.5em; -fx-font-weight: Bold; -fx-font-family: Segoe UI Semibold;\" styleClass\u003d\"r\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" text\u003d\"Tasks:\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel fx:id\u003d\"taskDetails\" minHeight\u003d\"-Infinity\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003ceffect\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cDropShadow\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003ccolor\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cColor opacity\u003d\"0.32179930806159973\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/color\u003e\u003c/DropShadow\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/effect\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 65
    }
  },
  {
    "path": "src/main/resources/view/RoomListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cImageView fx:id\u003d\"showOccupancy\" fitHeight\u003d\"22.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"-3.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomNumber\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"label-big\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cLabel fx:id\u003d\"occupancy\" alignment\u003d\"TOP_LEFT\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "LeeMingDe": 27,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/view/RoomListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cHBox stylesheets\u003d\"@../css/ListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cVBox maxWidth\u003d\"350.0\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cListView fx:id\u003d\"roomListView\" onMouseClicked\u003d\"#handleMouseClick\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"roomDetailsPanelPlaceholder\" minWidth\u003d\"300.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003c/HBox.margin\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 8,
      "chiamyunqing": 8
    }
  },
  {
    "path": "src/main/resources/view/RoomTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cVBox stylesheets\u003d\"@../css/ListPanelNoHighlights.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cListView fx:id\u003d\"roomTaskListView\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" stylesheets\u003d\"@../css/StatusBarFooter.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cVBox styleClass\u003d\"task-wrapper\" alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomId\" styleClass\u003d\"label-big\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cTextField fx:id\u003d\"description\" styleClass\u003d\"text-field\" editable\u003d\"false\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cLabel fx:id\u003d\"taskId\" styleClass\u003d\"label-small\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cLabel fx:id\u003d\"dueAt\" styleClass\u003d\"label-small\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "raymondge": 20
    }
  },
  {
    "path": "src/test/data/JsonPatientRecordsStorageTest/invalidAndValidPatientPatientRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"name\": \"Valid Patient\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"temperature\": \"36.5\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"periodOfStay\": \"20200103-20200117\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"age\": \"25\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"name\": \"Patient with Invalid PeriodOfStay Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"temperature\": \"36.5\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"periodOfStay\": \"202abc001def03\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"age\": \"25\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonPatientRecordsStorageTest/invalidPatientPatientRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"temperature\": \"36.5\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"periodOfStay\": \"20200103-20200117\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"age\": \"25\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonRoomOccupancyStorageTest/invalidAndValidRoomInRoomList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"rooms\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"roomNumber\" : 1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"isOccupied\" : false,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"patient\" : null,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"task\" : null"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"roomNumber\" : false,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"isOccupied\" : 3,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"patient\" : null,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"task\" : null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "]}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 13
    }
  },
  {
    "path": "src/test/data/JsonRoomOccupancyStorageTest/invalidRoomInRoomList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"rooms\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"roomNumber\" : false,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"isOccupied\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"patient\" : null,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"task\" : null"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "]}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientRecordsTest/duplicatePatientPatientRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"36.7\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200103-20200117\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"19\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"37.2\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200103-20200117\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"19\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 9,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientRecordsTest/invalidPatientPatientRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\" : \"36\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\" : \"20200908-20201716\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"26\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 4,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializablePatientRecordsTest/typicalPatientsPatientRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPatients#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"36.8\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200911-20200918\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"31\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"Vegan\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"38.0\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200810-20200824\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"67\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"38.3\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200910-20200917\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"17\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\": \"asthmatic\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"36.3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200808-20200809\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"55\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"37.4\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20200707-20200719\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"81\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"36.1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20201004-20201019\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"11\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"temperature\": \"36.4\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"periodOfStay\": \"20201101-20201114\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"age\": \"28\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \"comment\" : \"-\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 28,
      "-": 23
    }
  },
  {
    "path": "src/test/data/JsonSerializableRoomListTest/notCorrectOrder.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"rooms\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 3,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 5,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "]}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 25
    }
  },
  {
    "path": "src/test/data/JsonSerializableRoomListTest/notCorrectStartRooms.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"rooms\" : [{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"roomNumber\" : 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"isOccupied\" : false,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"patient\" : null,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"tasks\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"tasks\" : [ ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 3,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 4,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 5,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 6,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 7,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : true,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"temperature\": \"36.8\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"periodOfStay\": \"20200911-20200918\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"phone\" : \"94351253\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"age\": \"31\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"comment\" : \"Vegan\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 8,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : true,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"temperature\": \"38.0\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"periodOfStay\": \"20200810-20200824\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"phone\" : \"98765432\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"age\": \"67\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"comment\" : \"-\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "} ,{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 9,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\": 10,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\": false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\": null,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\": 11,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\": false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\": null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\": [{\"description\": \"Room #1 is running low on masks and needs to be restocked.\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\"dueAt\": \"20200925\"}]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 12,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 13,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 14,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "},{"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"roomNumber\" : 15,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"isOccupied\" : false,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"patient\" : null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\"tasks\" : [ ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "itssodium": 117
    }
  },
  {
    "path": "src/test/data/JsonSerializableRoomListTest/typicalRoomsInRoomList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"rooms\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 2,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 3,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 4,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 5,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 6,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"roomNumber\" : 7,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"isOccupied\" : true,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"patient\" : {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"temperature\": \"36.8\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"periodOfStay\": \"20200911-20200918\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"age\": \"31\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"comment\" : \"Vegan\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"roomNumber\" : 8,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"isOccupied\" : true,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"patient\" : {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"temperature\": \"38.0\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"periodOfStay\": \"20200810-20200824\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"age\": \"67\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"comment\" : \"-\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    } ,{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 9,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \"roomNumber\": 10,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\": false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\": null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    },"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"roomNumber\": 11,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"isOccupied\": false,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"patient\": null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \"tasks\": {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \"tasks\": [{\"description\": \"Room #1 is running low on masks and needs to be restocked.\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "          \"dueAt\": \"20200925\"}]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 12,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 13,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 14,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"roomNumber\" : 15,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"isOccupied\" : false,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"patient\" : null,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      \"tasks\" : {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \"tasks\" : [ ]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "      }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 33,
      "itssodium": 91
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/typicalTasksInTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"description\" : \"Remind Alice to change bedsheets.\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"dueAt\" : \"20201230 2359\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"description\" : \"Room #1 is running low on masks and needs to be restocked.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"dueAt\" : \"20200925\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \"description\" : \"Call the U.S. embassy for Bob.\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \"dueAt\" : \"20201014 1800\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "itssodium": 9
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \"covigentAppFilePath\": \"covigentapp.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \"covigentAppFilePath\": \"covigentapp.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/roomlogo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateTimeUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullText_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                null, LocalDate::from, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullQuery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", null, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullFormatter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, (DateTimeFormatter) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_noFormattersGiven_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_YEAR_MONTH_DAY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDateTime::from,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithCustomTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 246
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.JsonTaskStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonPatientRecordsStorage(temporaryFolder.resolve(\"covigentApp.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonRoomOccupancyStorage(temporaryFolder.resolve(\"roomsOccupied\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonTaskStorage taskOccupancyStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new JsonTaskStorage((temporaryFolder.resolve(\"task\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new StorageManager(covigentAppStorage, roomOccupancyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String deleteCommand \u003d \"deletepatient IDoNotExist\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String listCommand \u003d ListPatientCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(listCommand, ListPatientCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // Setup LogicManager with JsonPatientRecordsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonPatientRecordsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCovigentApp.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonRoomOccupancyStorage(temporaryFolder.resolve(\"roomsOccupied\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new StorageManager(covigentAppStorage, roomOccupancyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String addPatientCommand \u003d AddPatientCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + NAME_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(addPatientCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static class JsonPatientRecordsIoExceptionThrowingStub extends JsonPatientRecordsStorage {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private JsonPatientRecordsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void savePatientRecords(ReadOnlyList\u003cPatient\u003e patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 18,
      "LeeMingDe": 6,
      "chiamyunqing": 12,
      "-": 128,
      "raymondge": 6,
      "itssodium": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/AddPatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().withName(\"John Doe\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new AddPatientCommand(validPatient), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient duplicatePatient \u003d model.getPatientRecords().getReadOnlyList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(new AddPatientCommand(duplicatePatient), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11,
      "LeeMingDe": 2,
      "chiamyunqing": 4,
      "-": 26,
      "raymondge": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.stubs.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains unit tests for AddPatientCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommandTest.ModelStubAcceptingPatientAdded modelStub \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddPatientCommandTest.ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ModelStub modelStub \u003d new AddPatientCommandTest.ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                addPatientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public ReadOnlyList\u003cPatient\u003e getPatientRecords() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new PatientRecords();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 41,
      "chiamyunqing": 22,
      "-": 55,
      "itssodium": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/DeletePatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with both PatientRecords and RoomList in the Model)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * for {@code DeletePatientCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //room list -\u003e [room 7, Alice; room 8, Benson; room 10, null, room 11, null, with task]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_deletePatientInRoom_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient alice \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name aliceName \u003d alice.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(aliceName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, alice);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new ModelManager(model.getPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.removePatientFromRoom(aliceName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.deletePatient(alice);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "chiamyunqing": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/DeletePatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with only PatientRecords in the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * {@code DeletePatientCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_validNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientToDeleteName \u003d patientToDelete.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(patientToDeleteName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name invalidPatientName \u003d new Name(\"Obviously invalid name\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(invalidPatientName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name jane1 \u003d new Name(\"Jane Doe\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name jane2 \u003d new Name(\"jane doe\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name john \u003d new Name(\"John Doe\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(jane1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(john);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same names of patient -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(jane2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 2,
      "chiamyunqing": 57,
      "-": 11,
      "raymondge": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/EditPatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code EditPatientCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_editPatient_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().withName(\"John Doe\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(ALICE.getName(), descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setPatient(ALICE, editedPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient alice \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient benson \u003d model.getFilteredPatientList().get(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(alice).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(benson.getName(), descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BESON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_GEORGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains integration tests (interaction with only PatientRecords in the Model) and unit tests for"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * {@code EditPatientCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(new Name(VALID_NAME_ALICE), descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(TypicalPatients.GEORGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_GEORGE), descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(TypicalPatients.GEORGE, editedPatient);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_ALICE),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            new EditPatientDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_ALICE),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_BESON), descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Edit patient in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patientInList \u003d model.getPatientRecords().getReadOnlyList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_ALICE),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_invalidPatientNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final EditPatientCommand standardCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), DESC_AMY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same values -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), copyDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(standardCommand.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different index -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(new Name(VALID_NAME_BOB), DESC_AMY)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(new Name(VALID_NAME_AMY), DESC_BOB)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 48,
      "LeeMingDe": 112,
      "chiamyunqing": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ListPatientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 2,
      "-": 27,
      "raymondge": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/SearchPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_PATIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_SEARCH_PATIENT_LIST_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.SearchPatientDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRangePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.SearchPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains unit tests for SearchPatientCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_searchPatientName_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withName(\"Joe Khan\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Joe Khan\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Joe Khan\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS, patient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(searchPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_searchPatientTemperature_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withTemperature(\"40.0\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TemperatureRangePredicate predicate \u003d new TemperatureRangePredicate(39.9, 40.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withTemperatureRange(\"39.9-40.0\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(searchPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientInvalidSearchCriteria_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientTemperatureRange_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TemperatureRangePredicate predicate \u003d new TemperatureRangePredicate(36.9, 37.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withTemperature(\"36.0\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withTemperatureRange(\"36.9-37.0\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientName_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withName(\"Joe\").build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"koe\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"koe\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor joeDescriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Joe\").build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchPatientCommand searchCommand \u003d new SearchPatientCommand(joeDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor amyDescriptor \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Amy\").build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchPatientCommand newSearchCommand \u003d new SearchPatientCommand(amyDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(searchCommand.equals(searchCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchCommand.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotEquals(newSearchCommand, searchCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 2,
      "chiamyunqing": 2,
      "raymondge": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/AllocateRoomCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_TWO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.AllocateRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AllocateRoomCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class AllocateRoomCommandIntegrationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_allocatePatientToRoom_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.parseInt(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(CARL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room room \u003d model.getFilteredRoomList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder(editedRoom).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(Integer.parseInt(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(AllocateRoomCommand.MESSAGE_ALLOCATE_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), model.getModifiableRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setSingleRoom(room, editedRoom);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(allocateRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_removePatientFromRoom_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.parseInt(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(null)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withIsOccupied(false)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room room \u003d model.getFilteredRoomList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        room.setPatient(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder(editedRoom).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(Integer.parseInt(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(AllocateRoomCommand.MESSAGE_ALLOCATE_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), model.getModifiableRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setSingleRoom(room, editedRoom);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(allocateRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_patientAlreadyInRoom_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.parseInt(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(ALICE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withIsOccupied(false)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomWithAlice \u003d model.getFilteredRoomList().get(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room emptyRoom \u003d model.getFilteredRoomList().get(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomWithAlice.setPatient(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder(editedRoom).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(Integer.parseInt(VALID_ROOM_NUMBER_TWO),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedModel.setSingleRoom(emptyRoom, editedRoom);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(allocateRoomCommand, model, MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 98,
      "itssodium": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/AllocateRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.AllocateRoomCommand.MESSAGE_ALLOCATE_ROOM_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.AllocateRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests and unit tests for AllocateRoomCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Hardcoding getTypicalRoomList due to its unexpected behaviours"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "class AllocateRoomCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //Alice is in Room 7, Benson in Room 8, Room 11 with tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AllocateRoomCommand(null, null, false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidRoomNumber_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(-100, descriptor, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e allocateRoomCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_changePatientInRoom_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToAllocatePatient \u003d model.getRoomListObservableList().get(6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberForAllocation \u003d roomToAllocatePatient.getRoomNumber();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(roomToAllocatePatient).withPatient(CARL).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(CARL.getName()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(roomNumberForAllocation, descriptor, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new RoomList(model.getModifiableRoomList()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.setSingleRoom(roomToAllocatePatient, editedRoom);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(allocateRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_clearRoom_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToAllocatePatient \u003d model.getRoomListObservableList().get(6);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberForAllocation \u003d roomToAllocatePatient.getRoomNumber();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room allocatedRoom \u003d new RoomBuilder(roomToAllocatePatient).withIsOccupied(false).withPatient(null).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withOccupancy(false).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(roomNumberForAllocation, descriptor, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALLOCATE_ROOM_SUCCESS, allocatedRoom);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new RoomList(model.getModifiableRoomList()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.setSingleRoom(roomToAllocatePatient, allocatedRoom);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(allocateRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_allocatePatientAlreadyInAnotherRoom_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToAllocatePatient \u003d model.getRoomListObservableList().get(0); //the empty room"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberForAllocation \u003d roomToAllocatePatient.getRoomNumber();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patientInAnotherRoom \u003d model.getRoomListObservableList().get(6).getPatient().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(patientInAnotherRoom.getName()).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(roomNumberForAllocation, descriptor, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(allocateRoomCommand, model, MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidPatientAllocated_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToAllocatePatient \u003d model.getRoomListObservableList().get(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberForAllocation \u003d roomToAllocatePatient.getRoomNumber();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(BOB.getName()).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomCommand \u003d new AllocateRoomCommand(roomNumberForAllocation, descriptor, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(allocateRoomCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room allocateRoom7 \u003d model.getRoomListObservableList().get(6);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor1 \u003d new AllocateRoomDescriptorBuilder(allocateRoom7)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withRoomNumber(20).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocateRoomNumberCommand \u003d new AllocateRoomCommand(allocateRoom7.getRoomNumber(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                descriptor1, false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room allocateRoom8 \u003d model.getRoomListObservableList().get(7);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor2 \u003d new AllocateRoomDescriptorBuilder(allocateRoom8)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(CARL.getName()).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand allocatePatientInRoomCommand \u003d new AllocateRoomCommand(allocateRoom8.getRoomNumber(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                descriptor2, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(allocateRoomNumberCommand.equals(allocateRoomNumberCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AllocateRoomCommand editRoomNumberCommandCopy \u003d new AllocateRoomCommand(allocateRoom7.getRoomNumber(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                descriptor1, false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(allocateRoomNumberCommand.equals(editRoomNumberCommandCopy));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(allocateRoomNumberCommand.equals(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(allocateRoomNumberCommand.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different attributes to edit"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(allocateRoomNumberCommand.equals(allocatePatientInRoomCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 6,
      "chiamyunqing": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/FindEmptyRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class FindEmptyRoomCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRooms_notDefined() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //if there are no rooms -\u003e FindEmptyRoomCommand.NUMBER_OF_ROOMS_UNDEFINED exception is thrown"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new FindEmptyRoomCommand(), model, FindEmptyRoomCommand.NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRooms_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //if there is no occupied rooms -\u003e room number one should be given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d getFilterByRoomNumberPredicate(new Room(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(100);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(100);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(FindEmptyRoomCommand.MESSAGE_SUCCESS, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new FindEmptyRoomCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRoomsContainingOccupiedRooms_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //if there is occupied room -\u003e room number two should be given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d getFilterByRoomNumberPredicate(new Room(2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(100);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.setRoom(TypicalRooms.ROOM_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.setRoom(TypicalRooms.ROOM_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(FindEmptyRoomCommand.MESSAGE_SUCCESS, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new FindEmptyRoomCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Predicate\u003cRoom\u003e getFilterByRoomNumberPredicate(Room room) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e filterByRoomNumber \u003d room1 -\u003e room1.getRoomNumber() \u003d\u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return filterByRoomNumber;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/InitRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class InitRoomCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRooms_notDefined() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(-100), model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                InitRoomCommand.MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_middleRangeNumberOfRooms_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 250 rooms -\u003e middle value for acceptable range from 1 - 500"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 250);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(250);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(250), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_minRangeNumberOfRooms_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 1 rooms -\u003e start of acceptable range"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(1), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_maxNumberOfRooms_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 500 rooms -\u003e end of acceptable range"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 500);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(500);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(500), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_increaseNumberOfRooms_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 10 rooms first"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 10);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(10), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 50 rooms -\u003e increase number of rooms"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage2 \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 50);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(50);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(50), model, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_decreaseNumberOfRooms_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 50 rooms first"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 50);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(50);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(50), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 10 rooms -\u003e decrease number of rooms"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage2 \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 10);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(10);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(10), model, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_increaseNumberOfOccupiedRooms_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList expectedRoomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), roomList, new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientRecords(), expectedRoomList, new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 50 rooms -\u003e increase number of rooms"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage2 \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 50);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(50);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(50), model, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_decreaseNumberOfOccupiedRooms_success() throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList expectedRoomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), roomList, new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientRecords(), expectedRoomList, new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 5 rooms -\u003e decrease number of rooms"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage2 \u003d String.format(InitRoomCommand.MESSAGE_SUCCESS, 5);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(5);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(5), model, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_decreaseNumberOfOccupiedRooms_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), roomList, new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 2 rooms -\u003e decrease number of rooms"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d String.format(InitRoomCommand.MESSAGE_INSUFFICIENT_ROOMS, 2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(1), model,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_aboveMaxNumberOfRooms_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 5001 rooms -\u003e too many rooms initialised"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d InitRoomCommand.MESSAGE_LARGE_NUMBER_OF_ROOMS_INPUT;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(501), model, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_zeroNumberOfRooms_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to 0 rooms -\u003e zero rooms initialised"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d InitRoomCommand.MESSAGE_ZERO_CANNOT_BE_AN_INPUT;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(0), model, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_belowMinNumberOfRooms_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //initRoom to -1 rooms -\u003e negative number of rooms initialised"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d InitRoomCommand.MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(-1), model, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "//@@author itssodium"
      }
    ],
    "authorContributionMap": {
      "itssodium": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/InitRoomCommandTest1.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_ZERO_CANNOT_BE_AN_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class InitRoomCommandTest1 {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_addRooms_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.initRooms(100);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, 100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(100), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_addRooms_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(0), model, MESSAGE_ZERO_CANNOT_BE_AN_INPUT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.initRooms(-100);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(-100), model, MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "LeeMingDe": 8,
      "chiamyunqing": 2,
      "raymondge": 1,
      "itssodium": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/ListRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListRoomCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class ListRoomCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //note: can\u0027t have empty patient records since the room list contains the patients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPatientRecords(), model.getModifiableRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_list_showsEverything() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(new ListRoomCommand(), model, ListRoomCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "chiamyunqing": 20,
      "raymondge": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/SearchRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_NO_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.SearchRoomCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM8_PATIENT_BENSON_NO_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NUMBER_7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.SearchRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with both PatientRecords and RoomList in the Model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * for {@code SearchRoomCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //room list -\u003e [room 7, Alice; room 8, Benson; room 10, null, room 11, null, with task]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), getTypicalRoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_nullRoomNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchRoomCommand(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findInvalidRoomNumber_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(9999999);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorRoomNum.build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(searchRoomCommand, model, MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findInvalidPatientInRoom_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //patient name not in Covigent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorNameNotInApp \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorNameNotInApp.setPatientName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand noPatientSearchRoomCommand \u003d new SearchRoomCommand(descriptorNameNotInApp.build());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(noPatientSearchRoomCommand, model, MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //patient is not in any room"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorPatientNotInRoom \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorPatientNotInRoom.setPatientName(FIONA.getName().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand patientNotInRoomSearchRoomCommand \u003d new SearchRoomCommand(descriptorPatientNotInRoom.build());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(patientNotInRoomSearchRoomCommand, model, MESSAGE_PATIENT_NO_ROOM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findValidRoomNumber_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(ROOM_NUMBER_7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorRoomNum.build());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getRoomNumber() \u003d\u003d ROOM_NUMBER_7);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(searchRoomCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Arrays.asList(ROOM7_PATIENT_ALICE_NO_TASK), model.getFilteredRoomList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findValidPatientRoom_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorPatientName \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorPatientName.setPatientName(BENSON.getName().toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorPatientName.build());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.isOccupied()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 room.getPatient().get().getName().equals(BENSON.getName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(searchRoomCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Arrays.asList(ROOM8_PATIENT_BENSON_NO_TASK), model.getFilteredRoomList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptor1 \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor1.setPatientName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptor1.build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptor2 \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor2.setRoomNumber(3);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(searchRoomCommand.equals(searchRoomCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommandCopy \u003d new SearchRoomCommand(descriptor1.build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(searchRoomCommand.equals(searchRoomCommandCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different attributes to edit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(new SearchRoomCommand(descriptor2.build())));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 3,
      "chiamyunqing": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/AddTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.ArgumentMatchers.anyInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.verify;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Model modelMock;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelMock \u003d mock(Model.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_negativeRoomNumber_throwsAssertionError() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int negativeRoomNumber \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new AddTaskCommand(REMIND_PATIENT, negativeRoomNumber));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_getRoomWithRoomNumberReturnsNull_throwsAssertionError() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e addTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_roomWithRoomNumberNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ROOM_NUMBER, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                addTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room validRoom \u003d new RoomBuilder().withRoomNumber(VALID_ROOM_NUMBER_SEVEN).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN).execute(modelMock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        verify(modelMock).addTaskToRoom(REMIND_PATIENT, validRoom);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(AddTaskCommand.MESSAGE_ADD_TASK_SUCCESS, VALID_ROOM_NUMBER_SEVEN, REMIND_PATIENT),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomSeven \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomSeven));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomSevenCopy \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomSevenCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRestockSupplyToRoomSeven \u003d new AddTaskCommand(RESTOCK_SUPPLY, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(addRestockSupplyToRoomSeven));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomEight \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_EIGHT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomEight));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 103,
      "LeeMingDe": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/DeleteTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.ArgumentMatchers.anyInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.verify;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_TWO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Model modelMock;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Room validRoom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelMock \u003d mock(Model.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        validRoom \u003d new RoomBuilder(ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withRoomNumber(VALID_ROOM_NUMBER_SEVEN).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_negativeRoomNumber_throwsAssertionError() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int negativeRoomNumber \u003d -1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new DeleteTaskCommand(negativeRoomNumber, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_getRoomWithRoomNumberReturnsNull_throwsAssertionError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e deleteTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_getTaskFromRoomWithTaskIndexReturnsNull_throwsAssertionError() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom)).thenReturn(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e deleteTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_roomWithRoomNumberNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ROOM_NUMBER, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                deleteTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskWithTaskIndexNotInRoom_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_TASK_INDEX, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                deleteTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskAcceptedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .execute(modelMock);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        verify(modelMock).deleteTaskFromRoom(RESTOCK_SUPPLY, validRoom);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, VALID_TASK_INDEX_ONE.getOneBased(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, RESTOCK_SUPPLY), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomSeven \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomSeven));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomSevenCopy \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomSevenCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room index -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomEight \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_EIGHT, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomEight));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskTwoFromRoomSeven \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_TWO);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(deleteTaskTwoFromRoomSeven));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 138,
      "LeeMingDe": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.ArgumentMatchers.anyInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.verify;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DESCRIPTION_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_TWO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Model modelMock;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Room validRoom;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelMock \u003d mock(Model.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        validRoom \u003d new RoomBuilder(ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withRoomNumber(VALID_ROOM_NUMBER_SEVEN).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_negativeRoomNumber_throwsAssertionError() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int negativeRoomNumber \u003d -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(negativeRoomNumber, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, null, descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullEditTaskDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_getRoomWithRoomNumberReturnsNull_throwsAssertionError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e editTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_getTaskFromRoomWithTaskIndexReturnsNull_throwsAssertionError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom)).thenReturn(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e editTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_roomWithRoomNumberNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(anyInt())).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ROOM_NUMBER, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                editTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskWithTaskIndexNotInRoom_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_TASK_INDEX, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                editTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskDescriptorHasSameFieldsAsTask_throwsCommandException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(RESTOCK_SUPPLY.getDescription());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(RESTOCK_SUPPLY.getDueAt());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_TASK_NOT_EDITED, () -\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                editTaskCommand.execute(modelMock));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskDescriptorHasDifferentDescription_editSuccessful() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(REMIND_PATIENT));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_ORDER_BEDSHEET));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(REMIND_PATIENT.getDueAt());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ORDER_BEDSHEET)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDateTimeDue(Optional.of(VALID_DATETIME_DUE_REMIND_PATIENT)).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .execute(modelMock);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        verify(modelMock).setTaskToRoom(REMIND_PATIENT, editedTask, validRoom);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, VALID_TASK_INDEX_ONE.getOneBased(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, editedTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskDescriptionHasDifferentDateTimeDue_editSuccessful() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(REMIND_PATIENT));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(REMIND_PATIENT.getDescription());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_ORDER_BEDSHEET));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_REMIND_PATIENT)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDateTimeDue(Optional.of(VALID_DATETIME_DUE_ORDER_BEDSHEET)).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .execute(modelMock);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        verify(modelMock).setTaskToRoom(REMIND_PATIENT, editedTask, validRoom);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, VALID_TASK_INDEX_ONE.getOneBased(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, editedTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_taskDescriptionHasAllDifferentFields_editSuccessful() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getRoomWithRoomNumber(VALID_ROOM_NUMBER_SEVEN)).thenReturn(Optional.of(validRoom));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(modelMock.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, validRoom))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .thenReturn(Optional.of(REMIND_PATIENT));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_ORDER_BEDSHEET));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_ORDER_BEDSHEET));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedTask \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ORDER_BEDSHEET)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withDateTimeDue(Optional.of(VALID_DATETIME_DUE_ORDER_BEDSHEET)).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .execute(modelMock);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        verify(modelMock).setTaskToRoom(REMIND_PATIENT, editedTask, validRoom);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, VALID_TASK_INDEX_ONE.getOneBased(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, editedTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSeven \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomEight \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_EIGHT, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskTwoFromRoomSeven \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSeven));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSevenCopy \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSevenCopy));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(1));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomEight));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskTwoFromRoomSeven));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different edit task descriptor -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor modifiedDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modifiedDescriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSevenModifiedDescriptor \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, modifiedDescriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSevenModifiedDescriptor));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 233,
      "LeeMingDe": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/ListTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains unit tests for ListTaskCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model \u003d new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new ModelManager(new PatientRecords(), new RoomList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(new ListTaskCommand(), model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/SearchTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchTaskCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand searchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200105\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand correctSearchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200105\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand wrongSearchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200106\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(searchCommand.equals(correctSearchCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchCommand.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different due date -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotEquals(wrongSearchCommand, searchCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "raymondge": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CovigentAppParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CovigentAppParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final CovigentAppParser parser \u003d new CovigentAppParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parseCommand_addPatient() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddPatientCommand(patient));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new AddPatientCommand(patient), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_addTask() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                TaskUtil.getAddTaskCommand(task, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(new AddTaskCommand(task, VALID_ROOM_NUMBER_SEVEN), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_editPatient() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + patient.getName() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(new EditPatientCommand(patient.getName(), descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_editTask() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(task.getDueAt());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand command \u003d (EditTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskUtil.getEditTaskCommand(task, VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parseCommand_deletePatient() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                DeletePatientCommand.COMMAND_WORD + \" \" + VALID_NAME_AMY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(new DeletePatientCommand(new Name(VALID_NAME_AMY)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_deleteTask() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parseCommand_searchRoom() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(parser.parseCommand(SearchRoomCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + ROOM_NUMBER_DESC_ONE) instanceof SearchRoomCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(parser.parseCommand(SearchRoomCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + NAME_DESC_AMY) instanceof SearchRoomCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 47,
      "LeeMingDe": 9,
      "chiamyunqing": 23,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseRoomNumber_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRoomNumber(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseRoomNumber_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomNumber(\"10 a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseRoomNumber_negativeInteger_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomNumber(\"-1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseRoomNumber_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.parseRoomNumber(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseRoomNumber_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, ParserUtil.parseRoomNumber(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, ParserUtil.parseRoomNumber(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTaskIndex_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTaskIndex(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTaskIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTaskIndex(\"10 a\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTaskIndex_negativeInteger_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTaskIndex(\"-1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTaskIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.parseTaskIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTaskIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(VALID_TASK_INDEX_ONE, ParserUtil.parseTaskIndex(\"1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(VALID_TASK_INDEX_ONE, ParserUtil.parseTaskIndex(\"  1  \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void arePrefixesPresent() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixOnePresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixTwoPresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixThreeMissing \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimapMock \u003d mock(ArgumentMultimap.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixOnePresent)).thenReturn(Optional.of(\"one\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixTwoPresent)).thenReturn(Optional.of(\"two\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixThreeMissing)).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One missing prefix - returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.arePrefixesPresent(argMultimapMock, prefixThreeMissing));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present and one missing prefixes - returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.arePrefixesPresent(argMultimapMock, prefixOnePresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No prefixes - returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.arePrefixesPresent(argMultimapMock));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present prefixes - returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.arePrefixesPresent(argMultimapMock, prefixOnePresent, prefixTwoPresent));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isExactlyOnePrefixPresent() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixOnePresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixTwoPresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixThreeMissing \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimapMock \u003d mock(ArgumentMultimap.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixOnePresent)).thenReturn(Optional.of(\"one\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixTwoPresent)).thenReturn(Optional.of(\"two\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimapMock.getValue(prefixThreeMissing)).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No prefixes - returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimapMock));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present prefixes - returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimapMock, prefixOnePresent, prefixTwoPresent));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present and one missing prefixes - returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimapMock,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                prefixOnePresent, prefixTwoPresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present prefix - returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.isExactlyOnePrefixPresent(argMultimapMock, prefixOnePresent));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present and one missing prefixes - returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.isExactlyOnePrefixPresent(argMultimapMock, prefixOnePresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 85,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/AddPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains unit tests for AddPatientCommandParser."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple temperature - last temp accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_AMY + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple period of stay - last period of stay accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple phone - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple age - last age accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_AMY + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // no comments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + TEMP_DESC_AMY + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_AMY + AGE_DESC_AMY, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing temperature prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_TEMP_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing period of stay prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing age prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_TEMP_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + INVALID_PHONE_DESC + AGE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid temperature"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid period of stay"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + INVALID_PERIOD_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, PeriodOfStay.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid age"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_AGE_DESC, Age.MESSAGE_INVALID_AGE_RANGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "LeeMingDe": 22,
      "chiamyunqing": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/DeletePatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains test cases for DeletePatientCommandParser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, \"Mary Doe\", new DeletePatientCommand(new Name(\"Mary Doe\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 21,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/EditPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.patient.EditPatientCommand.MESSAGE_PATIENT_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.COMMENT_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains unit tests for EditPatientCommandParser."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_PATIENT_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No index and no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_AGE_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Age.MESSAGE_INVALID_AGE_RANGE); // invalid age"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PERIOD_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                PeriodOfStay.MESSAGE_INVALID_DATE); // invalid period"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_TEMP_DESC,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Temperature.MESSAGE_CONSTRAINTS); // invalid temperature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Invalid phone followed by valid age"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC + AGE_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AGE_DESC + VALID_PERIOD_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + TEMP_DESC_AMY + PERIOD_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Age"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Period"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Temperature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTemperature(VALID_TEMP_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Comment"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withComment(COMMENT_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No other valid values specified"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_BOB + INVALID_PHONE_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "//@author LeeMingDe"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 19,
      "LeeMingDe": 165,
      "chiamyunqing": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/PatientParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_AGE \u003d \"twenty-two\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_TEMPERATURE \u003d \"37.h\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_PERIOD_OF_STAY \u003d \"20201919-20191817\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_TEMP_RANGE \u003d \"37.x-3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_AGE \u003d \"22\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_TEMPERATURE \u003d \"36.7\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_PERIOD_OF_STAY \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_TEMP_RANGE \u003d \"36.7-37.0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String COMMENT \u003d \"Is asthmatic\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedName, PatientParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedName, PatientParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseAge((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseAge(INVALID_AGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_validValueWithoutWhitespace_returnsAge() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age expectedAge \u003d new Age(VALID_AGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedAge, PatientParserUtil.parseAge(VALID_AGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_validValueWithWhitespace_returnsTrimmedAge() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String ageWithWhitespace \u003d WHITESPACE + VALID_AGE + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age expectedAge \u003d new Age(VALID_AGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedAge, PatientParserUtil.parseAge(ageWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseTemperatureRange((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseTemperatureRange(INVALID_TEMP_RANGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_validValueWithoutWhitespace_returnsTempRange() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TemperatureRange expectedTempRange \u003d new TemperatureRange(VALID_TEMP_RANGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTempRange, PatientParserUtil.parseTemperatureRange(VALID_TEMP_RANGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_validValueWithWhitespace_returnsTrimmedTempRange() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String tempRangeWithWhitespace \u003d WHITESPACE + VALID_TEMP_RANGE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TemperatureRange expectedTempRange \u003d new TemperatureRange(VALID_TEMP_RANGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTempRange, PatientParserUtil.parseTemperatureRange(tempRangeWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseTemperature(INVALID_TEMPERATURE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_validValueWithoutWhitespace_returnsTemperature() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature expectedTemperature \u003d new Temperature(VALID_TEMPERATURE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTemperature, PatientParserUtil.parseTemperature(VALID_TEMPERATURE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_validValueWithWhitespace_returnsTrimmedTemperature() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String tempWithWhitespace \u003d WHITESPACE + VALID_TEMPERATURE + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature expectedTemperature \u003d new Temperature(VALID_TEMPERATURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTemperature, PatientParserUtil.parseTemperature(tempWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseTemperature((String) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPhone, PatientParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPhone, PatientParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parsePeriodOfStay((String) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parsePeriodOfStay(INVALID_PERIOD_OF_STAY));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_validValueWithoutWhitespace_returnsPeriodOfStay() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay expectedPeriodOfStay \u003d new PeriodOfStay(VALID_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPeriodOfStay, PatientParserUtil.parsePeriodOfStay(VALID_PERIOD_OF_STAY));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_validValueWithWhitespace_returnsTrimmedPeriodOfStay() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String periodOfStayWithWhitespace \u003d WHITESPACE + VALID_PERIOD_OF_STAY + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay expectedPeriodOfStay \u003d new PeriodOfStay(VALID_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPeriodOfStay, PatientParserUtil.parsePeriodOfStay(periodOfStayWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseComment_null_returnsEmptyComment() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Comment emptyComment \u003d new Comment(\"-\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(emptyComment, PatientParserUtil.parseComment(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseComment_validComment_returnsComment() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Comment expectedComment \u003d new Comment(COMMENT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedComment, PatientParserUtil.parseComment(COMMENT));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/SearchPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchPatientCommandParser parser \u003d new SearchPatientCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String invalidTempearature \u003d \" \" + PREFIX_TEMP_RANGE + \"36.0-37\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid temperatureRange"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, invalidTempearature, TemperatureRange.MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidPrefix_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid temperature Prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, TEMP_DESC_AMY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid period of stay Prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, PERIOD_DESC_AMY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid phone Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_AMY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 4,
      "raymondge": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/AllocateRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.model.patient.Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_JAMES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_JAMES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.REMOVE_PATIENT_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_TWO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.AllocateRoomCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.AllocateRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class AllocateRoomCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateRoomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private AllocateRoomCommandParser parser \u003d new AllocateRoomCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: No field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE, AllocateRoomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: Negative integer input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: Non-integer input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: Non-number input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: No index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidPatientName_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                MESSAGE_CONSTRAINTS); // invalid patient name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: Valid patient name and room number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_ONE + NAME_DESC_JAMES;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPatient(new Name(VALID_NAME_JAMES))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: valid room number and patient name as \"-\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_ONE + REMOVE_PATIENT_DESC;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withOccupancy(false)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_multipleRepeatedValue_acceptsLast() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: valid name followed by another valid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_ONE + NAME_DESC_JAMES"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_AMY))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: valid name followed by patient name as \"-\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_ONE + NAME_DESC_JAMES"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + REMOVE_PATIENT_DESC;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withOccupancy(false)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: patient name as \"-\" followed by valid name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_ONE + REMOVE_PATIENT_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + NAME_DESC_JAMES;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_JAMES))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: invalid name followed by valid patient name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_TWO + INVALID_NAME_DESC + NAME_DESC_JAMES;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_JAMES)).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_TWO),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //EP: invalid name followed by patient name as \"-\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_TWO + INVALID_NAME_DESC + REMOVE_PATIENT_DESC;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withOccupancy(false)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new AllocateRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_TWO),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            descriptor, true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptorOne \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_JAMES)).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand.AllocateRoomDescriptor descriptorTwo \u003d new AllocateRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_JAMES)).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand allocateFirstRoomCommand \u003d new AllocateRoomCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Integer.valueOf(VALID_ROOM_NUMBER_ONE), descriptorOne, false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        AllocateRoomCommand allocateSecondRoomCommand \u003d new AllocateRoomCommand("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Integer.valueOf(VALID_ROOM_NUMBER_TWO), descriptorTwo, false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(allocateFirstRoomCommand.equals(allocateFirstRoomCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(allocateFirstRoomCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(allocateFirstRoomCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(allocateFirstRoomCommand.equals(allocateSecondRoomCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/InitRoomParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.parser.room.InitRoomCommandParser.NUMBER_OF_ROOMS_GIVEN_IN_DIGITS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class InitRoomParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private InitRoomCommandParser parser \u003d new InitRoomCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String input \u003d \"123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, input, new InitRoomCommand(123));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parse_error() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertParseFailure(parser, \"two hundred\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertParseFailure(parser, \"twelve\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 6,
      "itssodium": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/SearchRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_ONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.SearchRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains unit test for SearchRoomCommandParser."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private SearchRoomCommandParser parser \u003d new SearchRoomCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //empty input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //name and room number prefixes not found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, TEMP_DESC_AMY, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple prefixes found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + ROOM_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid patient name prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid room number prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER_DESC,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT, RoomCliSyntax.PREFIX_ROOM_NUMBER,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                INVALID_NON_NUMBER_ROOM_NUMBER));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //find by patient name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorName \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorName.setPatientName(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new SearchRoomCommand(descriptorName.build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //find by room number"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(Integer.parseInt(VALID_ROOM_NUMBER_ONE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_DESC_ONE, new SearchRoomCommand(descriptorRoomNum.build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 7,
      "chiamyunqing": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/AddTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DATETIME_DUE_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DATETIME_DUE_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DESCRIPTION_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EMPTY_STRING_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EXCEED_LIMIT_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.room.RoomCliSyntax;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ORDER_BEDSHEETS + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_SEVEN_DESC + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_EIGHT_DESC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_SEVEN_DESC + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple due dates - last due date accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + DATETIME_DUE_DESC_ORDER_BEDSHEETS + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no due date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REMIND_PATIENT).withDateTimeDue(Optional.empty()).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DATETIME_DUE_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid description - empty description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_EMPTY_STRING_DESC + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid description - exceed character limit"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_EXCEED_LIMIT_DESC + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT, String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                RoomCliSyntax.PREFIX_ROOM_NUMBER, INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                RoomCliSyntax.PREFIX_ROOM_NUMBER, INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_DESC_ONE + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 102,
      "LeeMingDe": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_TASK_NUMBER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.TASK_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.room.RoomCliSyntax;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_EIGHT_DESC + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple task numbers - last task number accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_TWO + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, TASK_NUMBER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing task number prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT, RoomCliSyntax.PREFIX_ROOM_NUMBER,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid task number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT, TaskCliSyntax.PREFIX_TASK_NUMBER,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                INVALID_TASK_NUMBER));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 61,
      "LeeMingDe": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/EditTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_INDEX_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DATETIME_DUE_DESC_CLEAR_DATETIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DATETIME_DUE_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DATETIME_DUE_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DESCRIPTION_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EMPTY_STRING_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EXCEED_LIMIT_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_TASK_NUMBER_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.TASK_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.room.RoomCliSyntax;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditTaskCommandParser parser \u003d new EditTaskCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_EIGHT_DESC + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple task indexes - last task number accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_TWO + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_ORDER_BEDSHEETS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple due dates - last due date accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_ORDER_BEDSHEETS + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // due date is set to INPUT_REMOVE_DUE_DATE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(Optional.empty()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                        + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_CLEAR_DATETIME,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_ROOM_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no due date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_ROOM_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allOptionalFieldsMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no description or due date"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE, Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing task index prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid description - empty description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DESCRIPTION_EMPTY_STRING_DESC + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid description - exceed character limit"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DESCRIPTION_EXCEED_LIMIT_DESC + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT, RoomCliSyntax.PREFIX_ROOM_NUMBER,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid task number"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT, TaskCliSyntax.PREFIX_TASK_NUMBER,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                INVALID_TASK_NUMBER));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, String.format(ParserUtil.MESSAGE_INVALID_UNSIGNED_INT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskCliSyntax.PREFIX_TASK_NUMBER, INVALID_TASK_NUMBER));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 140,
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/SearchTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.RoomCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchTaskCommandParser parser \u003d new SearchTaskCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 4,
      "raymondge": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/TaskParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.GeneralCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DATETIME_DUE_VALUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EMPTY_STRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.INVALID_DESCRIPTION_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDescription(INVALID_DESCRIPTION_EMPTY_STRING)); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDescription(INVALID_DESCRIPTION_EXCEED_LIMIT)); // exceed character limit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_REMIND_PATIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDescription, TaskParserUtil.parseDescription(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String descriptionWithWhitespace \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + VALID_DESCRIPTION_REMIND_PATIENT + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_REMIND_PATIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDescription, TaskParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskParserUtil.parseDateTimeDue((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(INVALID_DATETIME_DUE_VALUE)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_dateTimeFormatNotAllowed_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(INVALID_DATETIME_DUE_FORMAT)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_validValueWithoutWhitespace_returnsDateTimeDue() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue expectedDateTimeDue \u003d new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDateTimeDue,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(VALID_DATETIME_DUE_REMIND_PATIENT)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_validValueWithWhitespace_returnsDateTimeDue() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String dateTimeDueWithWhitespace \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + VALID_DATETIME_DUE_REMIND_PATIENT + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue expectedDateTimeDue \u003d new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDateTimeDue,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(dateTimeDueWithWhitespace)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 80,
      "LeeMingDe": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_BENSON_NO_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.PatientRecordsBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertEquals(new PatientRecords(), new PatientRecords(modelManager.getPatientRecords()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(new RoomList(), new RoomList(modelManager.getModifiableRoomList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCovigentAppFilePath(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_validPath_setsCovigentAppFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.setCovigentAppFilePath(path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(path, modelManager.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPerson_personNotInCovigentApp_returnsFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPerson_personInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setPatient_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setPatient_targetAndEditedPatient_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.setPatient(ALICE, BENSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(modelManager.hasPatient(BENSON));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void isPatientAssignedToRoom_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.getRoomListObservableList().get(0).setPatient(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.isPatientAssignedToRoom(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void isPatientAssignedToRoom_personInRoom_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.getRoomListObservableList().get(0).setPatient(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(modelManager.isPatientAssignedToRoom(ALICE.getName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void isPatientAssignedToRoom_personNotInRoom_returnsFalse() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.getRoomListObservableList().get(0).setPatient(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(modelManager.isPatientAssignedToRoom(BENSON.getName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getRoomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getRoomListObservableList().remove(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRoom(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasRoom_roomInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(modelManager.hasRoom(new Room(1)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasRoom_roomNotInCovigentApp_returnsFalse() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(modelManager.hasRoom(new Room(2)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setSingleRoom_nullEditedRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            modelManager.setSingleRoom(ROOM7_PATIENT_ALICE_NO_TASK, null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setSingleRoom_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            modelManager.setSingleRoom(null, ROOM7_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setSingleRoom_targetEditedRoom_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.initRooms(8);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room room \u003d modelManager.getRoomListObservableList().get(6);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        room.setPatient(ALICE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        room.setOccupied(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.setSingleRoom(ROOM7_PATIENT_ALICE_NO_TASK, ROOM7_PATIENT_BENSON_NO_TASK);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(true, modelManager.getRoomListObservableList().get(6).equals(ROOM7_PATIENT_BENSON_NO_TASK));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(false, modelManager.getRoomListObservableList().get(6).equals(ROOM7_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateRoomListWhenPatientsChanges_nullPatientToEdit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            modelManager.updateRoomListWhenPatientsChanges(null, ALICE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //@@author LeeMingDe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void removePatientFromRoom_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        modelManager.initRooms(1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomWithPatient \u003d modelManager.getRoomListObservableList().get(0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room duplicateRoomWithoutAlice \u003d new RoomBuilder(roomWithPatient).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomWithPatient.setPatient(ALICE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomWithPatient.setOccupied(true);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        modelManager.setSingleRoom(roomWithPatient, modelManager.getRoomListObservableList().get(0));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        modelManager.removePatientFromRoom(ALICE.getName());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(modelManager.getRoomListObservableList().get(0), duplicateRoomWithoutAlice);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    //@@author itssodium"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void numOfExcessOccupiedRooms_success() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setRoomList(TypicalRooms.getTypicalRoomList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setInitNumOfRooms(0); // same number of rooms, number of occupied room is 4"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(modelManager.getNumOfExcessOccupiedRooms(), 2);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void hasSpaceForRooms_success() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setRoomList(TypicalRooms.getTypicalRoomList());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setInitNumOfRooms(2); // number of occupied rooms is 2, therefore has space"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(modelManager.hasSpaceForRooms());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setInitNumOfRooms(3); // number of occupied rooms is 2, therefore has space"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(modelManager.hasSpaceForRooms());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setInitNumOfRooms(1); // number of occupied rooms is 2, therefore has no space"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager.hasSpaceForRooms());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void numOfRooms_success() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setRoomList(TypicalRooms.getTypicalRoomList());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //the number of rooms in Typical Room List is 15 -\u003e modelManager should contain 15 rooms"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(modelManager.getNumOfRooms(), 15);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_success() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.setRoomList(TypicalRooms.getTypicalRoomList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //by adding 50 much rooms(increase) there should be 50 rooms in modelManager"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.initRooms(50);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(modelManager.getNumOfRooms(), 50);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //by adding 5 much rooms(decrease) there should be 5 rooms in modelManager"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.initRooms(5);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(modelManager.getNumOfRooms(), 5);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    //@@author itssodium"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PatientRecords patientRecords \u003d new PatientRecordsBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PatientRecords differentPatientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager \u003d new ModelManager(patientRecords, new RoomList(), userPrefs);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(patientRecords, new RoomList(), userPrefs);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different covigentApp -\u003e returns false"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .equals(new ModelManager(differentPatientRecords, new RoomList(), userPrefs)));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientRecords, new RoomList(), userPrefs)));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        differentUserPrefs.setCovigentAppFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .equals(new ModelManager(patientRecords, new RoomList(), differentUserPrefs)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 120,
      "chiamyunqing": 15,
      "-": 70,
      "raymondge": 2,
      "itssodium": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PatientRecordsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PatientRecordsTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PatientRecords patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), patientRecords.getReadOnlyList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientRecords.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyCovigentApp_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecords newData \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        patientRecords.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, patientRecords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecordsStub newData \u003d new PatientRecordsStub(newPatients);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e patientRecords.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientRecords.hasPatient(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_patientNotInCovigentApp_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(patientRecords.hasPatient(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_patientInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        patientRecords.addPatient(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(patientRecords.hasPatient(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        patientRecords.addPatient(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(patientRecords.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patientRecords.getReadOnlyList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub {@code ReadOnlyList\u003cPatient\u003e} whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PatientRecordsStub implements ReadOnlyList\u003cPatient\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecordsStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPatient\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 1,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "class RoomListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(Collections.emptyList(), roomList.getRoomObservableList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.resetData(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void numOfRoom_emptyRoomList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(0, roomList.getNumOfRooms());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getRoomWithRoomNumber_roomNotInList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP for room number: [MIN_INT...0], [1...MAX_INT]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1...MAX_INT] -\u003e returns empty optional"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e validRoom \u003d roomList.getRoomWithRoomNumber(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(validRoom.isEmpty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [MIN_INT...0] -\u003e throws AssertionError"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e roomList.getRoomWithRoomNumber(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [MIN_INT...0] -\u003e throws AssertionError"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e roomList.getRoomWithRoomNumber(-1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getRoomWithRoomNumber_roomInList_returnsRoom() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.initRooms(ROOM7_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d roomList.getRoomWithRoomNumber(7);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalRoom.map(room -\u003e room.getRoomNumber() \u003d\u003d 7).orElse(false));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //@@author w-yeehong"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 29,
      "chiamyunqing": 8,
      "itssodium": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCovigentAppFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AgeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Test cases for the attribute age of patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String emptyString \u003d \"\"; //EP: empty strings"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(emptyString));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String nonIntegerAge \u003d \"twenty\"; //EP: non-integer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(nonIntegerAge));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidAge \u003d \"1000\"; //EP: invalid age"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null age"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // EP: empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // EP: spaces only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"twenty\")); //EP: non-numeric"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"-1\")); //EP: negative age"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"120\")); //EP: \u003e\u003d 120 years old"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid age"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"0\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"30\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"119\")); //still possible"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void invalidAge_getErrorMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Age.getErrorMessage(\"twenty\"), Age.MESSAGE_AGE_NOT_NUMBER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Age.getErrorMessage(\"120\"), Age.MESSAGE_INVALID_AGE_RANGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //names are equal as long as they have the same spelling"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary1 \u003d new Name(\"Mary Ann\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary2 \u003d new Name(\"mARy aNn\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary3 \u003d new Name(\"mary ann\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary4 \u003d new Name(\"MARY ANN\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name notMaryAnn \u003d new Name(\"Mary Anne\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(mary1.equals(notMaryAnn));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 15,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Test cases for patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isSamePatient() { //patient is same as long as they have same name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different name -\u003e false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //different phone but other attributes same -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //different period of stay but other attributes same -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withAge(VALID_AGE_BOB).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //differnet temperature but other attributes same -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTemperature(VALID_TEMP_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //diff comments but all attributes same -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different period of stay -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "LeeMingDe": 6,
      "chiamyunqing": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PeriodOfStayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Test cases for the attribute period of stay of patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStayTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PeriodOfStay(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidPeriodOfStay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidPeriodOfStay \u003d \"20200101-20209999\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PeriodOfStay(invalidPeriodOfStay));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidPeriodOfStay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null period of stay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PeriodOfStay.isValidPeriodOfStay(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid period of stay"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"stay\")); //non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200709\")); //no end date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090p-20201009\")); //alphabets within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200101 - 20200202\")); //spaces in input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090120201009\")); //missing dash"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200901-20201038\")); //no such date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20201801-20201001\")); //no such month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200902-20200901\")); //end date before start date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid period of stay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20190308-20190506\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20200913-20200914\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20200909-20200909\")); //1 day stay"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void invalidPeriodOfStay_getErrorMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(PeriodOfStay.getErrorMessage(\"2020abc-203\"), PeriodOfStay.MESSAGE_WRONG_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(PeriodOfStay.getErrorMessage(\"20200304-20200101\"), PeriodOfStay.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/TemperatureRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRangeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String invalidTemperatureRange \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TemperatureRange(invalidTemperatureRange));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void isValidTemperatureRange() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null temperatureRange"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TemperatureRange.isValidTemperatureRange(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid temperatureRange"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"\")); //empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"37.0\")); //only 1 temperature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"37.8-37\")); //second temperature invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // valid temperatureRange"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(TemperatureRange.isValidTemperatureRange(\"36.7-37.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(TemperatureRange.isValidTemperatureRange(\"36.0-38.0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "raymondge": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/TemperatureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Test cases for the attribute temperature of patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class TemperatureTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String emptyString \u003d \"\"; //EP: empty strings"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Temperature(emptyString));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidTemperature \u003d \"37\"; //EP: invalid temperature"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Temperature(invalidTemperature));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidTemperature() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null temperature"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Temperature.isValidTemperature(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid temperature"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"\")); //EP: empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\" \")); //EP: spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37\")); //EP: not 1 decimal place"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"temp\")); //EP: non-numeric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.a\")); //EP: alphabets within digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.\")); //EP: no digit after decimal"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"3 7.6\")); //EP: spaces within digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"31.9\")); //Boundary value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"41.1\")); //Boundary value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // valid temperature"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"32.0\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"36.0\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"41.0\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.getPatientWithName(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_patientInList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e expectedPatient \u003d uniquePatientList.getPatientWithName(ALICE.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(expectedPatient.isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(ALICE, expectedPatient.get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_patientNotInList_returnsNull() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e expectedPatient \u003d uniquePatientList.getPatientWithName(BOB.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(expectedPatient.isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, ()-\u003e uniquePatientList.getPatientWithName(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_nameNotInList_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(uniquePatientList.getPatientWithName(ALICE.getName()), Optional.empty());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_nameInList_returnsOptionalName() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(uniquePatientList.getPatientWithName(ALICE.getName()), Optional.of(ALICE));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //@@author chiamyunqing"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 165,
      "chiamyunqing": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains integration tests for the interactions between {@code Room} and {@code Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Room room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Task nullTask \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.addTask(nullTask));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask_validTask_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.addTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, room);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.deleteTask(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e room.deleteTask(REMIND_PATIENT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_taskInTaskList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.deleteTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_NO_TASK, room);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.setTask(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.setTask(null, REMIND_PATIENT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e room.setTask(REMIND_PATIENT, RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_taskInTaskList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.setTask(REMIND_PATIENT, RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room expectedRoom \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).withTasks(RESTOCK_SUPPLY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedRoom, room);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 82,
      "itssodium": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTaskAssociationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTaskAssociationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final RoomTaskAssociation roomTaskAssociation \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new RoomTaskAssociation(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, REMIND_PATIENT, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RoomTaskAssociation(null, REMIND_PATIENT, 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new RoomTaskAssociation(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, null, 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_taskIndexLesserThanOne_throwsAssertionError() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new RoomTaskAssociation(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                REMIND_PATIENT, 0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new RoomTaskAssociation(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                REMIND_PATIENT, -1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskAssociation roomTaskAssociationCopy \u003d new RoomTaskAssociation("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, REMIND_PATIENT, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(roomTaskAssociation.equals(roomTaskAssociationCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(roomTaskAssociation.equals(roomTaskAssociation));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(roomTaskAssociation.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(roomTaskAssociation.equals(5));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskAssociation roomTaskAssociationDifferentRoom \u003d new RoomTaskAssociation("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY, REMIND_PATIENT, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(roomTaskAssociation.equals(roomTaskAssociationDifferentRoom));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskAssociation roomTaskAssociationDifferentTask \u003d new RoomTaskAssociation("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, RESTOCK_SUPPLY, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(roomTaskAssociation.equals(roomTaskAssociationDifferentTask));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTaskAssociation roomTaskAssociationDifferentTaskIndex \u003d new RoomTaskAssociation("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, REMIND_PATIENT, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(roomTaskAssociation.equals(roomTaskAssociationDifferentTaskIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTasksTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomTasksTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final RoomTasks roomTasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Collections.emptyList(), roomTasks.getReadOnlyList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskWithTaskIndex_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomTasks.getTaskWithTaskIndex(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskWithTaskIndex_taskNotInList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index index \u003d mock(Index.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(index.getZeroBased()).thenReturn(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d roomTasks.getTaskWithTaskIndex(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalTask.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskWithTaskIndex_taskInList_returnsTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index index \u003d mock(Index.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(index.getZeroBased()).thenReturn(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTasks.addTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d roomTasks.getTaskWithTaskIndex(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Optional.of(REMIND_PATIENT), optionalTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_emptyTaskList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedString \u003d \"-\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(roomTasks.toString(), expectedString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_taskListWithTasks_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTasks.addTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTasks.addTask(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedString \u003d \"1. \" + REMIND_PATIENT.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedString +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedString +\u003d \"2. \" + RESTOCK_SUPPLY.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(roomTasks.toString(), expectedString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class RoomTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isOccupied() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1 \u003d new Room(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //default value of room1 is false -\u003e returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.isOccupied());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //change value of isOccupied to true -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        room1.setOccupied(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.isOccupied());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1 \u003d new Room(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room2 \u003d new Room(2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1Copy \u003d new Room(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.equals(room1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different object, same fields -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.equals(room1Copy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(room2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different isOccupied value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        room1Copy.setOccupied(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(room1Copy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 1,
      "itssodium": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/UniqueRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class UniqueRoomListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final UniqueRoomList uniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.initRooms(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_roomInList_returnsTrue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(Collections.emptyList(), uniqueRoomList.getRoomObservableList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_numOfRooms_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRoom_returnTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 5);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void test_multipleAddRoom_returnTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(uniqueRoomList.getNumOfRooms(), 10);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void test_roomOccupied_returnTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(5);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_occupiedRooms_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(5);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(uniqueRoomList.containsRoom(ROOM_PATIENT_ALICE_NO_TASK));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_listOfOccupiedRooms_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e expectedOccupiedRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        IntStream.iterate(1, x -\u003e x \u003c\u003d 10, x -\u003e x + 2).forEach(x -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (x \u003e\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                expectedOccupiedRooms.add(new Room(x, true));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            uniqueRoomList.getRoomObservableList().get(x - 1).setOccupied(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.setPreferredNumOfRooms(4);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e actualOccupiedRooms \u003d uniqueRoomList.occupiedRooms();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(actualOccupiedRooms.get(0).equals(expectedOccupiedRooms.get(0)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(actualOccupiedRooms, expectedOccupiedRooms);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_listOfUnoccupiedRooms_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e expectedUnoccupiedRooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        IntStream.iterate(1, x -\u003e x \u003c\u003d 10, x -\u003e x + 2).forEach(x -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (x \u003c 4) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                expectedUnoccupiedRooms.add(new Room(x + 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            uniqueRoomList.getRoomObservableList().get(x - 1).setOccupied(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.setPreferredNumOfRooms(4);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e actualOccupiedRooms \u003d uniqueRoomList.unOccupiedRooms();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(actualOccupiedRooms.get(0).equals(expectedUnoccupiedRooms.get(0)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(actualOccupiedRooms, expectedUnoccupiedRooms);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_numOfOccupiedRooms_returnsTrue() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        IntStream.iterate(1, x -\u003e x \u003c\u003d 10, x -\u003e x + 2).forEach(x -\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                uniqueRoomList.getRoomObservableList().get(x - 1).setOccupied(true));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.setPreferredNumOfRooms(5);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(2, uniqueRoomList.getNumOfExcessOccupiedRooms());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms_numOfUnoccupiedRooms_returnsTrue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.initRooms(10);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        IntStream.iterate(1, x -\u003e x \u003c\u003d 10, x -\u003e x + 2).forEach(x -\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                uniqueRoomList.getRoomObservableList().get(x - 1).setOccupied(true));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        uniqueRoomList.setPreferredNumOfRooms(5);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(2, uniqueRoomList.numOfEmptyRooms());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void testPriorityQueueEquals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        UniqueRoomList roomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms1 \u003d new PriorityQueue\u003c\u003e(new ComparableRoom());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms2 \u003d new PriorityQueue\u003c\u003e(new ComparableRoom());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //same PriorityQueue -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 empty PriorityQueue of rooms -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d new Room(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(room);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(room);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of rooms with same content -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d new Room(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(room);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(room);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d rooms2.poll();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of different size -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room r \u003d new Room(i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(r);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(r);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms2.add(room);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms1.poll();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms1.add(new Room(100));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of different content -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "itssodium": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DateTimeDueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeDueTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTimeDue((String) null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullOptional_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTimeDue((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(emptyString));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_emptyStringOptional_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cString\u003e emptyStringOptional \u003d Optional.of(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(emptyStringOptional));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_invalidDateTimeString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String invalidDateTimeString \u003d \"aaa\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(invalidDateTimeString));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_invalidDateTimeStringOptional_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cString\u003e invalidDateTimeStringOptional \u003d Optional.of(\"aaa\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(invalidDateTimeStringOptional));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getValue_emptyOptional_returnEmptyOptional() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Optional.empty(), new DateTimeDue(Optional.empty()).getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isValidDateTimeDue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null date-time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeDue.isValidDateTimeDue(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // blank date-time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"\")); // empty string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\" \")); // spaces only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid date-time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"//\")); // only hyphens"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"2345 Oct 2020\")); // invalid day"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"aa\")); // gibberish text"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-conforming date-time (i.e. not in allowed formats)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"5-1-2020\")); // d-M-yyyy"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"05-01-2020 2359\")); // dd-MM-yyyy HHmm"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // valid and conforming date-time (i.e. in allowed formats)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"20200105\")); // yyyyMMdd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"20200105\")); // yyyyMMdd HHmm"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"5/1/2020\")); // d/M/yyyy"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"05/01/2020\")); // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"5/1/2020 2359\")); // d/M/yyyy HHmm"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"05/01/2020 2359\")); // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue emptyDateTime \u003d new DateTimeDue(Optional.empty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue validDateTime \u003d new DateTimeDue(Optional.of(\"20200101 0000\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP for date-time: [empty vs empty], [empty vs not empty], [not empty vs empty]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        //          [1st date same as 2nd date], [1st date before 2nd date], [1st date after 2nd date]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [empty vs empty] -\u003e returns 0"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(0, emptyDateTime.compareTo(new DateTimeDue(Optional.empty())));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [empty vs not empty] -\u003e returns -1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(-1, emptyDateTime.compareTo(validDateTime));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [not empty vs empty] -\u003e returns 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, validDateTime.compareTo(emptyDateTime));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1st date same as 2nd date] -\u003e returns 0"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(0, validDateTime.compareTo(new DateTimeDue(Optional.of(\"20200101 0000\"))));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1st date before 2nd date] -\u003e returns -1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(-1, validDateTime.compareTo(new DateTimeDue(Optional.of(\"20200101 0001\"))));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1st date after 2nd date] -\u003e returns 1"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, validDateTime.compareTo(new DateTimeDue(Optional.of(\"20191231 2359\"))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP for description: [null], [string length \u003c 1], [string length \u003e 4000]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        //                     [1 \u003c\u003d string length \u003c\u003d 4000]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [null] -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [string length \u003c 1] -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [string length \u003e 4000] -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String invalidString \u003d \".\".repeat(4001);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(invalidString.length() \u003e 4000);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(Description.isValidDescription(invalidString));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1 \u003c\u003d string length \u003c\u003d 4000], BV 1 -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(Description.isValidDescription(\".\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [1 \u003c\u003d string length \u003c\u003d 4000], BV 4000 -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String validString \u003d \".\".repeat(4000);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(validString.length() \u003d\u003d 4000);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(Description.isValidDescription(validString));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(taskList.contains(REMIND_PATIENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(taskList.contains(REMIND_PATIENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_sameTaskInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(taskList.contains(editedRemindPatient));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task nullTask \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(nullTask));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_listWithNullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Only null task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e listWithOnlyNullTask \u003d Collections.singletonList(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(listWithOnlyNullTask));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Multiple valid tasks, with one null task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e listWithOneNullTask \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                REMIND_PATIENT, null, RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(listWithOneNullTask));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_listWithOnlyValidTasks_allTasksAdded() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e listWithValidTasks \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                REMIND_PATIENT, RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(listWithValidTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(null, REMIND_PATIENT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.setTask(REMIND_PATIENT, REMIND_PATIENT));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTask(REMIND_PATIENT, REMIND_PATIENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_editedTaskIsDifferentTask_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTask(REMIND_PATIENT, RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.remove(REMIND_PATIENT));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.remove(REMIND_PATIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((TaskList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_taskList_replacesOwnListWithProvidedTaskList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(expectedTaskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e singleTaskList \u003d Collections.singletonList(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(singleTaskList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isEmpty() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP for empty task list: [empty], [not empty]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [empty]: returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP [not empty]: returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            -\u003e taskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_emptyTaskList_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedString \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(taskList.toString(), expectedString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_taskListWithTasks_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedString \u003d REMIND_PATIENT.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedString +\u003d \"\\n\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedString +\u003d RESTOCK_SUPPLY.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(taskList.toString(), expectedString);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "//@@author w-yeehong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task remindPatientCopy \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(REMIND_PATIENT.equals(remindPatientCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(REMIND_PATIENT.equals(REMIND_PATIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).withDescription(\"hi\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(editedRemindPatient));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different date-time due -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).withDateTimeDue(Optional.of(\"20200101\")).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(editedRemindPatient));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.storage.patient.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonAdaptedPatient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_TEMP \u003d \"39.p\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"20200011-20209900\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_AGE \u003d \"1000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_TEMP \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String COMMENT \u003d \"Vegan\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Temperature.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_PERIOD,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Temperature.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, INVALID_PERIOD,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d PeriodOfStay.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PeriodOfStay.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        INVALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                null, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, INVALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_AGE_NOT_NUMBER;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, null, COMMENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 35,
      "chiamyunqing": 46,
      "-": 40,
      "itssodium": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_NO_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonAdaptedPatient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonAdaptedRoom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Test cases for JsonAdaptedRoom"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonAdaptedRoomTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d REMIND_PATIENT.getDescription().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_DUE_DATE \u003d REMIND_PATIENT.getDueAt().getVal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_DUE_DATE \u003d \"two thirty\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_TEMP \u003d \"39.p\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"20200011-20209900\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_AGE \u003d \"1000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_TEMP \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String COMMENT \u003d \"Vegan\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final int VALID_ROOM_NUM \u003d ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT.getRoomNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final boolean VALID_IS_OCCUPIED \u003d ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT.isOccupied();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Room ROOM_INVALID_PATIENT_PRESENT_OCCUPIED_FALSE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).withIsOccupied(false).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Room ROOM_INVALID_PATIENT_ABSENT_OCCUPIED_TRUE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new RoomBuilder(ROOM_NO_PATIENT_NO_TASK).withIsOccupied(true).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsEmptyRoom() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedRoom room1 \u003d new JsonAdaptedRoom(ROOM_NO_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_NO_PATIENT_NO_TASK, room1.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsOccupiedRoom_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_NO_TASK, room.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidDueDate_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, INVALID_DUE_DATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList taskList \u003d new JsonSerializableTaskList(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD, VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(VALID_ROOM_NUM, VALID_IS_OCCUPIED, patient, taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.DATE_WRONG_FORMAT_IN_TASKS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidPatient_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, VALID_DUE_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList taskList \u003d new JsonSerializableTaskList(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, INVALID_TEMP, INVALID_PERIOD, INVALID_PHONE, INVALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(VALID_ROOM_NUM, VALID_IS_OCCUPIED, patient, taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_WRONG_FORMAT;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsOccupiedRoom_error() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_INVALID_PATIENT_PRESENT_OCCUPIED_FALSE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_PRESENT_IS_OCCUPIED_FALSE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsNotOccupiedRoom_error() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_INVALID_PATIENT_ABSENT_OCCUPIED_TRUE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_ABSENT_IS_OCCUPIED_TRUE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "itssodium": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CALL_EMBASSY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Test cases for JsonAdaptedTask"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d REMIND_PATIENT.getDescription().value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String INVALID_DUE_DATE \u003d \"two thirty\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_remindPatient() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        task.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(REMIND_PATIENT, task.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_restockSupply() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(RESTOCK_SUPPLY, task.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_callEmbassy() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CALL_EMBASSY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(CALL_EMBASSY, task.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidDueDate_throwsIllegalValueException() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, INVALID_DUE_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedTask.DATE_WRONG_FORMAT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "itssodium": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPatientRecordsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonPatientRecordsStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientRecordsStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readCovigentApp_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCovigentApp(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyList\u003cPatient\u003e\u003e readCovigentApp(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonPatientRecordsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .readPatientRecords(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readCovigentApp(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"notJsonFormatPatientRecords.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readCovigentApp_invalidPatientCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"invalidPatientPatientRecords.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readCovigentApp_invalidAndValidPatientCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"invalidAndValidPatientPatientRecords.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveCovigentApp_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCovigentApp.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecords original \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonPatientRecordsStorage jsonPatientRecordsStorage \u003d new JsonPatientRecordsStorage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyList\u003cPatient\u003e readBack \u003d jsonPatientRecordsStorage.readPatientRecords(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonPatientRecordsStorage.readPatientRecords(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonPatientRecordsStorage.readPatientRecords().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveCovigentApp_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCovigentApp(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code covigentApp} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveCovigentApp(ReadOnlyList\u003cPatient\u003e covigentApp, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonPatientRecordsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    .savePatientRecords(covigentApp, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveCovigentApp_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCovigentApp(new PatientRecords(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 18,
      "chiamyunqing": 3,
      "-": 91,
      "itssodium": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRoomOccupancyStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonRoomOccupancyStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            \"JsonRoomOccupancyStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void readRoomList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRoomList(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Optional\u003cReadOnlyList\u003cRoom\u003e\u003e readRoomList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new JsonRoomOccupancyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .readOnlyRoomOccupancy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(readRoomList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidRoomCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRoomList(\"invalidRoomInRoomList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidAndValidRoomCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRoomList(\"invalidAndValidRoomInRoomList.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveRoomList_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"roomsOccupied.jason\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(new RoomList(), null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Saves {@code covigentApp} at the specified {@code filePath}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void saveRoomListRoomsOccupied(RoomList roomList, String roomsOccupied) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new JsonRoomOccupancyStorage(Paths.get(roomsOccupied))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    .saveRoomsInformation(roomList, addToTestDataPathIfNotNull(roomsOccupied));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readAndSaveCovigentApp_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCovigentApp.json\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList original \u003d getTypicalRoomList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage jsonRoomOccupancyStorage \u003d new JsonRoomOccupancyStorage(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveRoomsInformation(original, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ReadOnlyList\u003cRoom\u003e readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy(filePath).get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList(readBack);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(original, roomList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        original.initRooms(ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveRoomsInformation(original, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy(filePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, new RoomList(readBack));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        original.initRooms(ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveRoomsInformation(original); // file path not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy().get(); // file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, new RoomList(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveCovigentApp_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "LeeMingDe": 7,
      "chiamyunqing": 3,
      "itssodium": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePatientRecordsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonSerializablePatientRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializablePatientRecordsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientRecordsTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsPatientRecords.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientPatientRecords.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientPatientRecords.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecords covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        PatientRecords typicalPatientsCovigentApp \u003d TypicalPatients.getTypicalPatientRecords();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalPatientsCovigentApp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePatientRecords.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 2,
      "-": 46,
      "itssodium": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonSerializableRoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonSerializableRoomListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRoomListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TYPICAL_ROOM_LIST \u003d TEST_DATA_FOLDER.resolve(\"typicalRoomsInRoomList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path WRONG_ORDER_ROOM_LIST \u003d TEST_DATA_FOLDER.resolve(\"notCorrectOrder.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path START_ROOM_NUMBER_NOT_ONE \u003d TEST_DATA_FOLDER.resolve(\"notCorrectStartRooms.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_typicalRoomFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableRoomList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ROOM_LIST,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableRoomList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RoomList covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList typicalRoomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalRoomList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_roomListWrongOrder_failure() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableRoomList dataFromFile \u003d JsonUtil.readJsonFile(WRONG_ORDER_ROOM_LIST,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableRoomList.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonSerializableRoomList.WRONG_ORDER_OF_ROOM;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_roomListWrongStartNumber_failure() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableRoomList dataFromFile \u003d JsonUtil.readJsonFile(START_ROOM_NUMBER_NOT_ONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableRoomList.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonSerializableRoomList.WRONG_ORDER_OF_ROOM;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3,
      "chiamyunqing": 4,
      "itssodium": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TypicalRoomTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TYPICAL_TASk_LIST \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksInTaskList.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_typicalRoomFile_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASk_LIST,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTasks covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTasks typicalRoomTasks \u003d TypicalRoomTasks.getTypicalRoomTasks();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalRoomTasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "itssodium": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"covigentapp.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.patient.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.rooms.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d new JsonPatientRecordsStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d new JsonRoomOccupancyStorage(getTempFilePath(\"ro\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        //files ro is short form for roomsOccupied."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        storageManager \u003d new StorageManager(covigentAppStorage, roomOccupancyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void covigentAppReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "         * {@link JsonPatientRecordsStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientRecordsStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords original \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        storageManager.savePatientRecords(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ReadOnlyList\u003cPatient\u003e retrieved \u003d storageManager.readPatientRecords().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertEquals(original, new PatientRecords(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotNull(storageManager.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomOccupancyStorage() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList original \u003d getTypicalRoomList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storageManager.saveRoomsInformation(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ReadOnlyList\u003cRoom\u003e readOnlyRoomList \u003d storageManager.readOnlyRoomOccupancy().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, readOnlyRoomList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 2,
      "-": 54,
      "raymondge": 10,
      "itssodium": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AllocateRoomDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.AllocateRoomCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.AllocateRoomCommand.AllocateRoomDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * A utility class to help with building AllocateRoomDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class AllocateRoomDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private AllocateRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder(AllocateRoomCommand.AllocateRoomDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.descriptor \u003d new AllocateRoomCommand.AllocateRoomDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns an {@code AllocateRoomDescriptor} with fields containing {@code room}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder(Room room) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new AllocateRoomDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setRoomNumber(room.getRoomNumber());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setOccupied(room.isOccupied());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPatientName(room.getPatient().map(Patient::getName).orElse(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code roomNumber} of the {@code AllocateRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder withRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code isOccupied} of the {@code AllocateRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder withOccupancy(Boolean isOccupied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setOccupied(isOccupied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code patient} of the {@code AllocateRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptorBuilder withPatient(Name name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPatientName(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public AllocateRoomDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"AllocateRoomDescriptorBuilder{\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"descriptor\u003d\" + descriptor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \u0027}\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.descriptor \u003d new EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setAge(patient.getAge());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPeriodOfStay(patient.getPeriodOfStay());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setComment(patient.getComment());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setTemperature(patient.getTemperature());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code age} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setAge(new Age(age));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code periodOfStay} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPeriodOfStay(new PeriodOfStay(periodOfStay));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code comment} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code temperature} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setTemperature(new Temperature(temperature));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 84,
      "LeeMingDe": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_TEMPERATURE \u003d \"36.8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"37\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Temperature temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature \u003d new Temperature(DEFAULT_TEMPERATURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        periodOfStay \u003d new PeriodOfStay(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature \u003d patientToCopy.getTemperature();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        periodOfStay \u003d patientToCopy.getPeriodOfStay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        age \u003d patientToCopy.getAge();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        comment \u003d patientToCopy.getComment();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Temperature} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.temperature \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code PeriodOfStay} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.periodOfStay \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Age} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withAge(String age) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Comment} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient(name, temperature, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientRecordsBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AB3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building CovigentApp objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code CovigentApp ab \u003d new PatientRecordsBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PatientRecordsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private PatientRecords patientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientRecordsBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientRecordsBuilder(PatientRecords covigentApp) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patientRecords \u003d covigentApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Patient} to the {@code CovigentApp} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientRecordsBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PatientRecords build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an add command string for adding the {@code Patient}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getAddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Patient}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_TEMP + patient.getTemperature().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_PERIOD_OF_STAY + patient.getPeriodOfStay().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_AGE + patient.getAge().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getTemperature().ifPresent(temperature -\u003e sb.append(PREFIX_TEMP).append(temperature.getValue())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                    .append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getPeriodOfStay().ifPresent(periodOfStay -\u003e sb.append(PREFIX_PERIOD_OF_STAY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                    .append(periodOfStay.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getAge().ifPresent(age -\u003e sb.append(PREFIX_AGE).append(age.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getComment().ifPresent(comment -\u003e sb.append(PREFIX_COMMENTS).append(comment.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 42,
      "chiamyunqing": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final int DEFAULT_ROOM_NUMBER \u003d 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final boolean DEFAULT_IS_OCCUPIED \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Patient DEFAULT_PATIENT \u003d TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private RoomTasks roomTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomNumber \u003d DEFAULT_ROOM_NUMBER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        isOccupied \u003d DEFAULT_IS_OCCUPIED;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        patient \u003d DEFAULT_PATIENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Initializes the RoomBuilder with the data of {@code roomToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code RoomTasks} is a shallow copy of the original (i.e. the {@code Task} within"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * the list are not copied)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder(Room roomToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomNumber \u003d roomToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        isOccupied \u003d roomToCopy.isOccupied();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        patient \u003d roomToCopy.getPatient().orElse(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomTasks \u003d new RoomTasks(roomToCopy.getReadOnlyTasks()); // shallow copy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code roomNumber} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code isOccupied} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withIsOccupied(boolean isOccupied) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code patient} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code RoomTasks} of the {@code Room} that we are building"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * with the provided tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomBuilder withTasks(Task... tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTasks roomTasks \u003d new RoomTasks(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomTasks \u003d roomTasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code RoomTasks} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomBuilder withTasks(RoomTasks roomTasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomTasks \u003d roomTasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Room(roomNumber, isOccupied, Optional.ofNullable(patient), roomTasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 24,
      "LeeMingDe": 1,
      "itssodium": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SearchPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand.SearchPatientDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * A utility class to help with building SearchPatientDescriptor objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor \u003d new SearchPatientDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Sets the {@code Name} of the {@code SearchPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setStringName(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Sets the {@code Temperature} of the {@code SearchPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder withTemperatureRange(String temperatureRange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setTemperatureRange(new TemperatureRange(temperatureRange));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptor build() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "raymondge": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SearchRoomDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand.SearchRoomDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "//@@author chiamyunqing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Builds SearchRoomDescriptor for testing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private SearchRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor \u003d new SearchRoomDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Name} of the {@code SearchRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder setPatientName(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setPatientName(new Name(name));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Room Number} of the {@code SearchRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptor build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Remind John to clean bedsheets.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_DATETIME_DUE \u003d \"20201014 2359\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DateTimeDue dueAt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dueAt \u003d new DateTimeDue(DEFAULT_DATETIME_DUE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dueAt \u003d taskToCopy.getDueAt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code DateTimeDue} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder withDateTimeDue(Optional\u003cString\u003e optionalDueAt) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.dueAt \u003d new DateTimeDue(optionalDueAt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Task(description, dueAt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.task.DateTimeDue.ALLOWED_DATETIME_FORMATS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an add command string for adding the {@code Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getAddTaskCommand(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task, roomNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an edit command string for editing the {@code Task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getEditTaskCommand(Task task, int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return EditTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task, roomNumber, taskIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(PREFIX_DESCRIPTION + task.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        task.getDueAt().getValue().ifPresent((dueAt) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // DateTimeDue.toString() may return a different string that does not correspond to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // an allowed date-time format. Here, dueAt is formatted with the first allowed date-time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // format to obtain a proper command string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // ALLOWED_DATETIME_FORMATS.length \u003e 0 or a compiler-time error will occur."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String formattedDueAt \u003d dueAt.format(ALLOWED_DATETIME_FORMATS[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(PREFIX_DUE_DATE + formattedDueAt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Includes a valid room number given by {@code roomIndex} in the command string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getTaskDetails(task));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use any valid room number as room number not stored in task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\" \" + PREFIX_ROOM_NUMBER + roomNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Includes a valid room number given by {@code roomIndex} and a valid task number"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * given by {@code taskIndex} in the command string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task, int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getTaskDetails(task, roomNumber));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use any valid task number as task number not stored in task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\" \" + PREFIX_TASK_NUMBER + String.valueOf(taskIndex.getOneBased()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.COMMENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.PatientCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.8\").withPeriodOfStay(\"20200911-20200918\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"94351253\").withAge(\"31\").withComment(\"Vegan\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.0\").withPeriodOfStay(\"20200810-20200824\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"98765432\").withAge(\"67\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.3\").withPeriodOfStay(\"20200910-20200917\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"95352563\").withAge(\"17\").withComment(\"asthmatic\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.3\").withPeriodOfStay(\"20200808-20200809\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"87652533\").withAge(\"55\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.4\").withPeriodOfStay(\"20200707-20200719\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482224\").withAge(\"81\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.1\").withPeriodOfStay(\"20201004-20201019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482427\").withAge(\"11\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.4\").withPeriodOfStay(\"20201101-20201114\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482442\").withAge(\"28\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.0\").withPeriodOfStay(\"20200913-20200920\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482424\").withAge(\"90\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.6\").withPeriodOfStay(\"20200404-20200414\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482131\").withAge(\"54\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_AMY).withComment(COMMENT_AMY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns an {@code PatientRecords} with all the typical patients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static PatientRecords getTypicalPatientRecords() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords ab \u003d new PatientRecords();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15,
      "LeeMingDe": 15,
      "chiamyunqing": 26,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRoomTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class containing a list of {@code Task} objects found in {@code Room} to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TypicalRoomTasks {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalRoomTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static RoomTasks getTypicalRoomTasks() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomTasks roomTasks \u003d new RoomTasks();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Task task : TypicalTasks.getTypicalTasks()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            roomTasks.addTask(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A utility class containing a list of {@code Room} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * The patients present in getTypicalRooms() of TypicalRooms class must be present"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * in getTypicalPatientRecords() of TypicalPatients class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Integer ROOM_NUMBER_1 \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_7 \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_8 \u003d 8;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_11 \u003d 11;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Integer ROOM_NUMBER_16 \u003d 16;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Integer ROOM_NUMBER_17 \u003d 17;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Room ROOM_PATIENT_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            .withRoomNumber(ROOM_NUMBER_1).withIsOccupied(true).withPatient(CARL).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_1 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            .withIsOccupied(false).withPatient(null).withRoomNumber(ROOM_NUMBER_16).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_NO_TASK_ROOM_CORRECT_ORDER_2 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            .withIsOccupied(false).withPatient(null).withRoomNumber(ROOM_NUMBER_17).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withIsOccupied(false).withPatient(null).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(false).withPatient(null).withRoomNumber(ROOM_NUMBER_11)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTasks(RESTOCK_SUPPLY).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_PATIENT_ALICE_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Room ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).withTasks(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Room ROOM7_PATIENT_ALICE_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).withRoomNumber(ROOM_NUMBER_7).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Room ROOM7_PATIENT_BENSON_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        .withIsOccupied(true).withPatient(BENSON).withRoomNumber(ROOM_NUMBER_7).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Room ROOM8_PATIENT_BENSON_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(true).withPatient(BENSON).withRoomNumber(ROOM_NUMBER_8).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalRooms() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static RoomList getTypicalRoomList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList.initRooms(15);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Room room : getTypicalRooms()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.setRoom(room);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static List\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //do not change, used in integration tests"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOM7_PATIENT_ALICE_NO_TASK, ROOM8_PATIENT_BENSON_NO_TASK,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ROOM_NO_PATIENT_NO_TASK, ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11,
      "LeeMingDe": 2,
      "chiamyunqing": 20,
      "itssodium": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.command.TaskCommandTestUtil.VALID_DESCRIPTION_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task REMIND_PATIENT \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Remind Alice to change bedsheets.\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201230 2359\")).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task RESTOCK_SUPPLY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Room #1 is running low on masks and needs to be restocked.\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20200925\")).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task CALL_EMBASSY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Call the U.S. embassy for Bob.\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201014 1800\")).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task FIX_SHOWER \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Fix the shower in Room #4.\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201212 2359\")).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task ORDER_BEDSHEET \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_ORDER_BEDSHEET)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(VALID_DATETIME_DUE_ORDER_BEDSHEET)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(REMIND_PATIENT, RESTOCK_SUPPLY, CALL_EMBASSY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 41,
      "LeeMingDe": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/command/GeneralCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public abstract class GeneralCommandTestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    // General"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        PatientRecords expectedCovigentApp \u003d new PatientRecords(actualModel.getPatientRecords());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(expectedCovigentApp, actualModel.getPatientRecords());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/command/PatientCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class PatientCommandTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_ALICE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_GEORGE \u003d \"George Best\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_BESON \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_NAME_JAMES \u003d \"james\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_TEMP_AMY \u003d \"36.7\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_TEMP_BOB \u003d \"37.0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_PERIOD_AMY \u003d \"20200912-20200918\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_PERIOD_BOB \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"22\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"45\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_AMY \u003d \"Down with flu\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String NAME_DESC_JAMES \u003d \" \" + PREFIX_NAME + VALID_NAME_JAMES;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String TEMP_DESC_AMY \u003d \" \" + PREFIX_TEMP + VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String TEMP_DESC_BOB \u003d \" \" + PREFIX_TEMP + VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PERIOD_DESC_AMY \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PERIOD_DESC_BOB \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_DESC_AMY \u003d \" \" + PREFIX_COMMENTS + COMMENT_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_TEMP_DESC \u003d \" \" + PREFIX_TEMP + \"36.P\"; //non-numeric not allowed in temperature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD_OF_STAY + \"20200913-20201838\"; //invalid date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"999\"; //cannot be so old"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String NO_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT \u003d \"History of heart attack\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withAge(VALID_AGE_AMY).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withAge(VALID_AGE_BOB).withComment(NO_COMMENT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/command/RoomCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomCommandTestUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final int VALID_ROOM_NUMBER_SEVEN \u003d 7;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final int VALID_ROOM_NUMBER_EIGHT \u003d 8;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final int VALID_ROOM_NUMBER_TEN \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Index VALID_ROOM_INDEX_ONE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Index VALID_ROOM_INDEX_TWO \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_ROOM_NUMBER \u003d \"-1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_NUMBER_ROOM_NUMBER \u003d \"a\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_INTEGER_ROOM_NUMBER \u003d \"1.1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String ROOM_NUMBER_DESC_ONE \u003d \" \" + PREFIX_ROOM_NUMBER + \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String ROOM_NUMBER_DESC_TWO \u003d \" \" + PREFIX_ROOM_NUMBER + \"2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String ROOM_NUMBER_SEVEN_DESC \u003d \" \" + PREFIX_ROOM_NUMBER + \"7\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String ROOM_NUMBER_EIGHT_DESC \u003d \" \" + PREFIX_ROOM_NUMBER + \"8\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_NUMBER_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + INVALID_NON_NUMBER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_INTEGER_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + INVALID_NON_INTEGER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String REMOVE_PATIENT_DESC \u003d \" \" + PREFIX_NAME + \"-\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/command/TaskCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.EditTaskCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class TaskCommandTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_DESCRIPTION_REMIND_PATIENT \u003d \"Remind Alice to change bedsheets.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_DESCRIPTION_ORDER_BEDSHEET \u003d \"Order new bedsheets for Room #3.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_DATETIME_DUE_REMIND_PATIENT \u003d \"20201230 2359\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String VALID_DATETIME_DUE_ORDER_BEDSHEET \u003d \"20201023 1930\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Index VALID_TASK_INDEX_ONE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Index VALID_TASK_INDEX_TWO \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DESCRIPTION_EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DESCRIPTION_EXCEED_LIMIT \u003d \"a\".repeat(Description.MAXIMUM_LENGTH + 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_VALUE \u003d \"aaa\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_FORMAT \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_TASK_NUMBER \u003d \"-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DESCRIPTION_DESC_REMIND_PATIENT \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DESCRIPTION_DESC_ORDER_BEDSHEETS \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DATETIME_DUE_DESC_REMIND_PATIENT \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DATETIME_DUE_DESC_ORDER_BEDSHEETS \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DATETIME_DUE_DESC_CLEAR_DATETIME \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + EditTaskCommandParser.INPUT_REMOVE_DUE_DATE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String TASK_NUMBER_DESC_ONE \u003d \" \" + PREFIX_TASK_NUMBER + \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String TASK_NUMBER_DESC_TWO \u003d \" \" + PREFIX_TASK_NUMBER + \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DESCRIPTION_EMPTY_STRING_DESC \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_DESCRIPTION_EMPTY_STRING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DESCRIPTION_EXCEED_LIMIT_DESC \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_DESCRIPTION_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_VALUE_DESC \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + INVALID_DATETIME_DUE_VALUE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_FORMAT_DESC \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + INVALID_DATETIME_DUE_FORMAT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_TASK_NUMBER_DESC \u003d \" \" + PREFIX_TASK_NUMBER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "LeeMingDe": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/stubs/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.RoomTaskAssociation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatientRecords(ReadOnlyList\u003cPatient\u003e newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cPatient\u003e getPatientRecords() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setRoomList(ReadOnlyList\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyList\u003cRoomTaskAssociation\u003e getRoomTaskRecords() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setInitNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isPatientAssignedToRoom(Name name) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initRooms(int num) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean hasSpaceForRooms() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfExcessOccupiedRooms() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setRoom(Room room) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void removePatientFromRoom(Name patientName) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Index checkIfRoomPresent(Integer roomNumber) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomListObservableList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomList getModifiableRoomList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom(Task target, Task taskToEdit, Room room) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateTasksInFilteredRoomTaskRecords(Predicate\u003cTask\u003e taskPredicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoomTaskAssociation\u003e getFilteredRoomTaskRecords() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 141,
      "LeeMingDe": 29,
      "chiamyunqing": 26,
      "raymondge": 9,
      "itssodium": 25
    }
  }
]
