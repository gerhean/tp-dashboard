[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "# CS2103T-F13-3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "If you would like to know more [about us](https://ay2021s1-cs2103t-f13-3.github.io/tp/AboutUs.html)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## MediBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![ug](docs/images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBook is a desktop app for managing patient details, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBook aims to increase efficiency in a clinical setting by providing a convenient interface for clinical staff to record and keep track of patient details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you are interested in using MediBook, head over to our [User Guide](https://ay2021s1-cs2103t-f13-3.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you are interested in further developing MediBook, head over to our [Developer Guide](https://ay2021s1-cs2103t-f13-3.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Acknowledgement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "wang-jun-hao": 14,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "mainClassName \u003d \u0027seedu.medibook.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    archiveName \u003d \u0027medibook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 5,
      "divakarmal": 2,
      "-": 69
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "You can reach us at wangjunhao@u.nus.edu, foojingyi@u.nus.edu, E0415577@u.nus.edu, divakar@u.nus.edu, e0425943@u.nus.edu."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "## Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Wang Jun Hao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/wang-jun-hao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/wang-jun-hao)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Leader**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Team Lead"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Deliverables and Deadlines"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Divakar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/divakarmal.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](http://github.com/divakarmal)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Wong Zheng Zhi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/wong-zz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/Wong-ZZ)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Integration"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Foo Jing Yi"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/foojingyi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/foojingyi)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Code Quality"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Preston Toh"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/prestontyr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](http://github.com/PrestonTYR)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 35,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PatientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "A JavaFx TableView is used for the PatientListPanel. Styling for the TableView is done using the `TableView.css` file which is also in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. `Logic` uses the `MediBookParser` class to parse the user command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a patient)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagramUpdated.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* stores the medi book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPatient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Patient**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The `Patient`,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* stores `IC`, `Name`, `DateOfBirth` and `Phone` objects that represent the patient\u0027s IC number, name, date of birth and phone number respectively."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* stores `Optionals` of `Address`, `Email`, `Height`, `Weight`, `Bmi` and `BloodType` objects."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `Bmi` is automatically computed and stored within Optional if both `Height` and `Weight` are present."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* can save the medi book data in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Adding medical notes to patients"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Each medical note is stored as a `MedicalNote` object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Every `patient` has a `MedicalNoteList` object that represents the list of medical notes belonging to that `patient`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `NoteCommandParser` parses user\u0027s string input into a `NoteCommand`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Target `patient` is retrieved from `ModelManager#getPatientToAccess()`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The following sequence diagram shows how note adding operation works:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![NoteSequenceDiagramMain](images/NoteSequenceDiagramFocusLogic.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![NoteSequenceDiagramSD](images/NoteSequenceDiagramSDUpdatePatientInModel.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 1. The user launches the application and `find` the patient to access. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Note: Every `patient` in the `model` has a `MedicalNoteList` that is initialised as an empty list at "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "program start-up to optimise start-up time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 2. The user then `access`es the patient using the index of the patient in the filtered list. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Note: `LogicManager` will load the list of medical notes of the `patient` from storage into program\u0027s memory via"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`LogicManager#handleMedicalNoteListIo`. `LogicManager` then calls `Patient#setMedicalNoteList()` on the `patient` object to load"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "the list of medical notes onto the `patient` object in memory."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 3. While on the patient\u0027s profile page, the user inputs `note n/Dr John c/Patient...`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The user input is handled by `LogicManager`, which then passes it to `MediBookParser` to be parsed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 4. `MediBookParser` creates an instance of `NoteCommandParser` to parse the user input as a `NoteCommand`. It returns "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "a `NoteCommand` object to `LogicManager`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 5. `LogicManager` then executes the `NoteCommand` via `NoteCommand#execute()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 6. `NoteCommand#execute()` identifies the target `patient` object via `ModelManager#getPatientToAccess()`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "It then updates the model with the new medical note added to the patient using `Patient#addMedicalNote()`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`note` command can only be called when viewing a `patient`\u0027s profile (after an `access` command)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "We have decided to implement `note` command this way for 2 reasons:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. When user starts MediBook, not all `patient`s\u0027 list of medical notes would have been loaded into the program\u0027s memory. "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Only allowing `note` after `access` ensures that the patient\u0027s list of medical notes would have been loaded at the point of adding new medical notes."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. It allows for a shorter `note` command as the user does not need to specify a target `patient`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Elaboration on point 1:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* A medical records software contains many `patients`, each with potentially many `medical note`s."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `MedicalNoteList` of every patient is properly loaded only when necessary (`access` on patient)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `access`-ing a `patient` loads the stored medical note list and sets the `MedicalNoteList` of the `patient` to the retrieved list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Hence, `note` command can only be called when viewing a `patient`\u0027s profile as it ensures that the `MedicalNoteList` has already been properly loaded by executing `access` command beforehand"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### \\[Proposed\\] Account creation and login"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "#### Proposed implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The proposed account creation feature is facilitated by a new `CreateAccountCommand`. It extends `Command`, similar to how all the other commands currently work."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![CreateAccountSequenceDiagram](images/CreateAccountSequenceDiagram.png)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 1. The user launches the application and executes `create u/example_username p/example_password`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 2. `Logic#execute(String commandText)` creates a new `CreateAccountCommand` and calls `Storage#saveNewAccountDetails()`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 3. `Storage#saveNewAccountDetails()` converts the new account\u0027s username and password into json format and saves it a `AccountDetails.json` file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The following activity diagram summarises what happens when a user executes a new command to create account."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![CreateAccountActivityDiagram](images/CreateAccountActivityDiagram.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The proposed login feature is facilitated by a new `LoginWindow` class in the UI."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![LoginSequenceDiagram](images/LoginSequenceDiagram.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 1. The user inputs his/her login information."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 2. The UI calls `Logic#login()` with the login information as input."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 3. `Logic#login()` then calls `Storage#checkAccountDetails()` on the login information, to check if the information matches any of the account details saved."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 4. If there is no match, an error is thrown. If there is a match, the UI then changes from `LoginWindow` to `MainWindow`, which signifies that the user has succesfully logged in."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### Enhanced find command"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommand` supports searching by substring for multiple fields with multiple keywords."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommand` is facilitated by `FindCommandParser` which creates one or more `FieldContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "(which implements the `Predicate\u003cPatient\u003e` interface) based on the user input."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Through the `FieldContainsKeywordsPredicate` objects that were created, `FindCommand` then calls "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`Model#updateFilteredPatientList(predicate)` to filter the list of patient in `Model` based on the user\u0027s input search query."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "The sequence diagram below illustrates how the `FindCommand` works."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `FindCommandParser` "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "and `FindCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "the end of diagram."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 1. The user launches the application and inputs `find n/Steve Johnny i/S95 T00 d/2000 1995`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "This causes the `LogicManager#execute(String input)` method to be called."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 2. `MediBookParser#parseCommand(String input)` is then called, creating a new `FindCommandParser`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommandParser#Parse(String arguments)` is then called and in the process, it creates one or more"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` instances(not shown in the sequence diagram). In this example, `FindCommandParser`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "creates three `FieldContainsKeywordsPredicate` instance, corresponding to the three fields to be searched for."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 3. `FindCommand` is initialized with `List\u003cPredicate\u003cPatient\u003e\u003e` containing the `FieldContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "instances that were created in the previous step. This `FindCommand` instance in then finally returned as the result for"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "the `MediBookParser#parseCommand(String input)` method call."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 4. `FindCommand#execute(Model model)` is called and in turn, `FindCommand` calls the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`Model#updateFilteredPatientList(Predicate\u003cPatient\u003e predicate)` method which filters the list of"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "patient in `Model` based on user\u0027s input search query."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "The diagram below illustrates the class diagram of the relevant classes for the find feature."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "![FindClassDiagram](images/FindClassDiagram.png)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` implements the `Predicate\u003cPatient\u003e` interface."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` is initialized with a `List\u003cString\u003e` containing the keywords to search for and `Prefix`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "which determines which field of the patient to search for. When `FieldContainsKeywordsPredicate#test(Patient patient)`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "is called, it will check if each keyword is a substring of the specified field of the patient. So long as at least one"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "of the keyword passes the check, `FieldContainsKeywordsPredicate#test(Patient patient)` will return true."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* has a need to keep track of a significant number of patients"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Helps users manage a central database for keeping track of patients\u0027 records efficiently."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Manage patients\u0027 records quickly through a simple and intuitive UI."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Eliminates the need for physical copies of patients\u0027 records."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Efficient sharing of data of patients between hospital staff i.e. administrators, nurses, doctors, specialists, etc."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | add a patient along with their details (fields)               |                                                                        |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | delete a patient\u0027s records                | remove unwanted records from the system                                  |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | search for a patient\u0027s information          | retrieve his/her details |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* *` | registration admin | edit a patient\u0027s details"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "(For all use cases below, the **System** is the `MediBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC00 Add a patient**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. User requests to add a patient along with the patient\u0027s details."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. MediBook adds the patient to it\u0027s database."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* 1a. MediBook detects an error in one/some of the fields for the patient\u0027s details."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a2. User requests to add the patient again but with edited details."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Steps 1a1-1a2 are repeated until the fields provided are correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* 1b. MediBook detects a missing compulsory field."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * 1b1. MediBook shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * 1b2. User requests to add the patient again but with compulsory field added."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Steps 1b1-1b2 are repeated until the compulsory fields are all provided."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC01 Find a patient**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. User requests to find a specific patient."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. MediBook returns the patient."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* 1a. MediBook detects an error in the syntax of the command."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    * 1a2. User requests to find the patient again but with an updated syntax."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Steps 1a1-1a2 are repeated until the syntax of the command is correct."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC02 Delete a patient**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1.  User requests to delete a specific patient."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "2.  MediBook deletes the patient."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* 1a. MediBook detects if the given IC is invalid."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a2. User requests to delete a specific patient by changing the input IC."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     Steps 1a1-1a2 are repeated until the IC provided is valid."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     Use case resumes from step 2."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2.  Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "4.  Should be simple enough for those who are not proficient in using computers to use."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* **IC**: IC in our system refers to the patient\u0027s identification numbers as provided in the NRIC or FIN."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * The National Registration Identity Card (abbreviation: NRIC) is the compulsory identity document issued to citizens and permanent residents of Singapore."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * A Foreign Identification Number, or FIN, is issued to an individual who is a permanent resident of Singapore and long-term pass holders by the Singapore government."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "### Deleting a patient"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      Expected: Patient with index 1 in the list is deleted from the program. Details of the deleted patient shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   2. Test case: `delete`\u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   3. Other incorrect delete commands to try: `delete \u003cindex outside of list range\u003e`, `delete x` \u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   1. To simulate missing data file:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      1. Delete medibook.json file located in \u003cproject_root\u003e/data."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      2. Run MediBook."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      Expected: MediBook starts up with a sample list of 6 patients."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   2. To simulate corrupted file:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      1. Locate medibook.json file located in \u003cproject_root\u003e/data."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      2. Change the field input of a patient to a wrong format. e.g. Change the IC of a patient in the json file to start with \u0027A\u0027 instead of the legal letters \u0027S,T,F,G\u0027."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      3. Run MediBook."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      Expected: MediBook starts up with no patients in the list. A warning is displayed in console \"Data file not in the correct format. Will be starting with an empty MediBook\"."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 42,
      "wang-jun-hao": 92,
      "divakarmal": 18,
      "PrestonTYR": 32,
      "-": 274
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003ch1\u003eMediBook User Guide: Everything you need to know about MediBook\u003c/h1\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBook is a **desktop app for managing patient details, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediBook can get your patient management tasks done faster than traditional methods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. Download the latest medibook.jar from https://github.com/AY2021S1-CS2103T-F13-3/tp/releases."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your MediBook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "4. Double-click the file to start the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will open the help window."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "6. Refer to the Features below for details on each command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "---------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "  e.g. in `add i/IC`, `IC` is a parameter which can be used as `add i/S91234567A`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "  e.g `n/NAME [w/WEIGHT]` can be used as `n/John Doe w/60.5` or as `n/John Doe`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.1 Viewing help : `help`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.2 Listing all patients: `list`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Shows a list of all patient\u0027s records in the system."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.3 Adding a patient: `add`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a patient to the system."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "IC, Name, Date of Birth and Phone Number are compulsory fields while the rest are optional."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`add i/IC n/NAME d/DATE_OF_BIRTH p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`add i/S9123456A n/Divakar d/29-02-2000 p/91234567`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`add i/T0123456Q n/Divakar d/29-02-2000 p/91234567 e/divakarmal@medibook.com a/NUS, Kent Ridge Drive h/178 w/75 b/O+`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.4 Editing a patient: `edit`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Edits the specified patient\u0027s information from MediBook."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The `edit` command is also used to fill in unspecified fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `edit` on a field that already exists will update it from the previous value to the new value"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `edit` on an optional field that was not specified at the point of adding patient will fill the field with the given value"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "`edit \u003cindex\u003e [i/IC] [n/NAME] [d/DATE OF BIRTH] [p/PHONE] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD TYPE][t/TAG]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`edit 1 n/Divakar` edits the name of patient with index `1` in the displayed list to `Divakar`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`edit 3 n/Divakar p/91111111 h/201` edits the name, phone number and height of patient with index `3` in the displayed list to `Divakar`, `91111111` and `201`cm  respectively."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.5 Deleting a patient : `delete`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Deletes the specified patient from MediBook."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `delete 1` deletes the patient with index `1` in the displayed list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.6 Finding a patient by IC: `find`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Finds patient records by multiple fields and multiple keywords."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Format: `find [i/IC] [n/NAME] [d/DATE_OF_BIRTH] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* At least one field must be specified for the command to be valid"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* The search is case-insensitive. e.g `S9123456A` will match `s9123456a`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* The search will match substrings e.g `S912345` will match `S9123456A`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* Search will return all records that matches any of the keywords for each field e.g `n/Alice Bob` will return the records of all patients with name containing `Alice` or `Bob`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `find i/S9123456A` returns the patient record with IC `S9123456A`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `find n/Billy Alice a/Clementi i/S99` returns the patient records with Name containing `Billy` or `Alice`, Address containing `Clementi` and IC containing `S99`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.7 Accessing a patient\u0027s profile : `access`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Accesses the specified patient in MediBook."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Format: `access \u003cindex\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Use the `list` command to return to the main list page"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.8 Adding a medical note: `note`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a medical note to a patient."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "As a doctor, you can add a medical note to a patient when viewing his/her profile. MediBook will automatically add the "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "to the patient displayed on the screen."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Format: `note [d/DATE] n/NAME_OF_DOCTOR c/CONTENT_OF_MEDICAL_NOTE`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You have to be on a patient\u0027s profile page to add a medical note. This is done by first `find`-ing the patient by IC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "when on the main list and then `access`-ing the patient\u0027s index on the filtered list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* For your convenience, the date field can be omitted. MediBook will automatically select today\u0027s date."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you specify the date of the medical note, it has to be in the past or today."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Context: while viewing the profile page of patient with IC `S9123456A`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `note n/Dr John Doe c/Patient complains of stomach ache and headache. No signs of fever. Prescribed painkillers and probiotics.`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a medical note that is dated today, by Dr John Doe with content \"Patient complains of stomach ache and headache. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "No signs of fever. Prescribed painkillers and probiotics.\" to patient with IC S9123456A"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.9 Exiting the program : `exit`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.10 Saving the data"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Patient records are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous MediBook home folder."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Add** | `add i/IC n/NAME d/DATE_OF_BIRTH p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]` \u003cbr\u003e e.g.,\u003cbr\u003e`add i/S9123456A n/Divakar d/29-02-2000 p/91234567` \u003cbr\u003e `add i/T0123456Q n/Divakar d/29-02-2000 p/91234567 e/divakarmal@medibook.com a/NUS, Kent Ridge Drive h/178 w/75 b/O+`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Edit** | `edit \u003cindex\u003e [i/IC] [n/NAME] [d/DATE OF BIRTH] [p/PHONE] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD TYPE][t/TAG]` \u003cbr\u003e e.g., \u003cbr\u003e `edit 1 n/Divakar` \u003cbr\u003e `edit 3 n/Divakar p/91111111 h/201`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Delete** | `delete \u003cindex\u003e`\u003cbr\u003e e.g., `delete 1`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Find** | `find [i/IC] [n/NAME] [d/DATE_OF_BIRTH] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]`\u003cbr\u003e e.g., \u003cbr\u003e `find i/G1234567S`\u003cbr\u003e`find n/Jack i/T00 dob/2000 h/17 a/Changi`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Access** | `access \u003cindex\u003e` \u003cbr\u003e e.g., `access 1`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Note** | `note [d/DATE] n/NAME_OF_DOCTOR c/CONTENT` \u003cbr\u003e e.g. `note n/Dr John c/Patient is having fever. Prescribed panadol.`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 16,
      "wang-jun-hao": 67,
      "PrestonTYR": 7,
      "-": 90
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "title: MediBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**MediBook is a desktop application for managing your patient record.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* If you are interested in using MediBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* If you are interested about developing MediBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 6,
      "-": 13
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.medibook.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Create a new `Remark` in `seedu.medibook.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Simply add the following to [`seedu.medibook.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 388
    }
  },
  {
    "path": "src/main/java/seedu/medibook/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/medibook/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonMediBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.JsonMedicalNoteListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.MediBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.MedicalNoteListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MediBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MediBookStorage mediBookStorage \u003d new JsonMediBookStorage(userPrefs.getMediBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteListStorage medicalNoteListStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonMedicalNoteListStorage(userPrefs.getMedicalNotesDirPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storage \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s medi book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The data from the sample medi book will be used instead if {@code storage}\u0027s medi book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * or an empty medi book will be used instead if errors occur when reading {@code storage}\u0027s medi book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Optional\u003cReadOnlyMediBook\u003e mediBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            mediBookOptional \u003d storage.readMediBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!mediBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MediBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d mediBookOptional.orElseGet(SampleDataUtil::getSampleMediBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d new MediBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d new MediBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"Starting MediBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Medi Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "wang-jun-hao": 1,
      "divakarmal": 41,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String LOG_FILE \u003d \"medibook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_PATIENT_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *   Ignores case, a full word match is not required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"Ab\") \u003d\u003d true //matches part of \"ABc\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"df\") \u003d\u003d false //does not match any word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .anyMatch(w -\u003e w.contains(preppedWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "divakarmal": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the MediBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see seedu.medibook.model.Model#getMediBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ReadOnlyMediBook getMediBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns the current patient accessed by medi book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Optional\u003cPatient\u003e getPatientToAccess();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 14,
      "PrestonTYR": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.MediBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String FILE_SAVE_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String FILE_LOAD_ERROR_MESSAGE \u003d \"Could not read data from file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBookParser mediBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBookParser \u003d new MediBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return model.getPatientToAccess();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Logging, safe to ignore"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Parse user input from String to a Command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Command command \u003d mediBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Executes the Command and stores the result"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            storage.saveMediBook(model.getMediBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Optional\u003cPatient\u003e accessPatient \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (accessPatient.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                handleMedicalNoteListIo(accessPatient.get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new CommandException(FILE_SAVE_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new CommandException(FILE_LOAD_ERROR_MESSAGE + dce, dce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void handleMedicalNoteListIo(Patient patient) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (patient.getMedicalNoteList().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            storage.readMedicalNoteList(patient.getIc())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    .ifPresent(medicalNotes -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                            patient.setMedicalNoteList(new MedicalNoteList(medicalNotes.getMedicalNoteList())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            storage.saveMedicalNoteList(patient.getMedicalNoteList(), patient.getIc());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getMediBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getMediBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 21,
      "wang-jun-hao": 8,
      "divakarmal": 22,
      "PrestonTYR": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/AccessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Accesses a patient\u0027s profile in the medi book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"access\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \": Accesses the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_ACCESS_PATIENT_SUCCESS \u003d \"Accessed Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AccessCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient patientToAccess \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess), false,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                || (other instanceof AccessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AccessCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "PrestonTYR": 54
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Adds a patient to the medi book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the medi book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + PREFIX_IC + \"IC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_HEIGHT + \"HEIGHT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_WEIGHT + \"WEIGHT \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + PREFIX_BLOOD_TYPE + \"BLOOD TYPE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + PREFIX_IC + \"S9123456A \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"04-11-1991 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_HEIGHT + \"180 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_WEIGHT + \"70.5 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + PREFIX_BLOOD_TYPE + \"A+ \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the medi book\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 5,
      "divakarmal": 27,
      "PrestonTYR": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Clears the medi book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Medi book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.setMediBook(new MediBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /** The application should change to a patient\u0027s profile. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final boolean showProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /** The application should change to the list of patients. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final boolean showList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showProfile, boolean showList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.showProfile \u003d showProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean isShowProfile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return showProfile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean isShowList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 showProfile \u003d\u003d otherCommandResult.showProfile"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 showList \u003d\u003d otherCommandResult.showList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showProfile, showList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "PrestonTYR": 22,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the medi book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Edits the details of an existing patient in the medi book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"[\" + PREFIX_IC + \"IC] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \"[\" + PREFIX_BLOOD_TYPE + \"BLOOD TYPE]\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the medi book.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d patientToEdit.getMedicalNoteList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        editedPatient.setMedicalNoteList(medicalNoteList.makeCopy());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Ic updatedIc \u003d editPatientDescriptor.getIc().orElse(patientToEdit.getIc());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPatientDescriptor.getDateOfBirth().orElse(patientToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cEmail\u003e updatedEmail \u003d editPatientDescriptor.getEmail().or(patientToEdit::getEmail);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAddress\u003e updatedAddress \u003d editPatientDescriptor.getAddress().or(patientToEdit::getAddress);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cHeight\u003e updatedHeight \u003d editPatientDescriptor.getHeight().or(patientToEdit::getHeight);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cWeight\u003e updatedWeight \u003d editPatientDescriptor.getWeight().or(patientToEdit::getWeight);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e updatedBloodType \u003d editPatientDescriptor.getBloodType()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .or(patientToEdit::getBloodType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new Patient(updatedIc, updatedName, updatedDateOfBirth, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                          updatedHeight, updatedWeight, updatedBloodType, updatedTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Ic ic;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Weight weight;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private BloodType bloodType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            setIc(toCopy.ic);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            setWeight(toCopy.weight);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            setBloodType(toCopy.bloodType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                                               bloodType, tags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setIc(Ic ic) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.ic \u003d ic;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cIc\u003e getIc() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.ofNullable(ic);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            this.weight \u003d weight;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return Optional.ofNullable(weight);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setBloodType(BloodType bloodType) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return Optional.ofNullable(bloodType);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getIc().equals(e.getIc())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    \u0026\u0026 getWeight().equals(e.getWeight())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u0026\u0026 getBloodType().equals(e.getBloodType())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9,
      "wang-jun-hao": 14,
      "divakarmal": 77,
      "foojingyi": 11,
      "PrestonTYR": 36,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MediBook as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "PrestonTYR": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Finds and lists all patients in medi book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \": Finds all patients whose fields matches with the specified keywords (case-insensitive) provided \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"and displays them as a list with index numbers.\\nAt least one search field must be specified.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_IC + \"IC... \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_NAME + \"NAME... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE OF BIRTH... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_PHONE + \"PHONE... \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_IC + \"S9123456B T1234567G \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_NAME + \"Alice Bernice Charlotte \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"28-02-2012 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_PHONE + \"98765432 69204068 93210283\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cPredicate\u003cPatient\u003e\u003e predicates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FindCommand(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.predicates \u003d Collections.singletonList(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cPatient\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e combinedPredicates \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.updateFilteredPatientList(combinedPredicates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENT_LISTED_OVERVIEW, model.getFilteredPatientList().size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 arePredicatesEqual(predicates, ((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Checks if the two lists contains the same predicates regardless of order."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean arePredicatesEqual(List\u003cPredicate\u003cPatient\u003e\u003e predicates1, List\u003cPredicate\u003cPatient\u003e\u003e predicates2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (predicates1.size() !\u003d predicates2.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashSet\u003cPredicate\u003cPatient\u003e\u003e predicatesSet \u003d new HashSet\u003c\u003e(predicates1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicatesSet.removeAll(predicates2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return predicatesSet.isEmpty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 39,
      "wang-jun-hao": 3,
      "divakarmal": 9,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "PrestonTYR": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Lists all patients in the medi book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.resetAccessedPatient();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "PrestonTYR": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/NoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Adds a patient to the medi book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class NoteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a medical note to the current patient \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"in MediBook. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_CONTENT + \"MEDICAL NOTE CONTENT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"04-11-1991 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_CONTENT + \"Patient has high fever and cough.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New medical note entry added:\\n%1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This medical note entry already exists in the system\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_NOTE_ON_LIST \u003d \"You can only add medical note to a patient when you are viewing \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"his/her patient profile. Access the patient profile before adding medical note.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote newMedicalNote;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public NoteCommand(MedicalNote newMedicalNote) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(newMedicalNote);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.newMedicalNote \u003d newMedicalNote;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Optional\u003cPatient\u003e patientOptional \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!patientOptional.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(MESSAGE_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient displayedPatient \u003d patientOptional.get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert model.hasPatient(displayedPatient) : \"Patient in context does not exist in model\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        displayedPatient.addMedicalNote(newMedicalNote);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newMedicalNote));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof NoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 newMedicalNote.equals(((NoteCommand) other).newMedicalNote));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 72
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/AccessCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Parses input arguments and creates a new AccessCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandParser implements Parser\u003cAccessCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccessCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * and returns an AccessCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AccessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return new AccessCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccessCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 28
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_BLOOD_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic ic \u003d ParserUtil.parseIc(argMultimap.getValue(PREFIX_IC).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cEmail\u003e email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAddress\u003e address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cHeight\u003e height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cWeight\u003e weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new Patient(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                                   bloodType, tagList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 5,
      "divakarmal": 26,
      "PrestonTYR": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final Prefix PREFIX_IC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Prefix PREFIX_BLOOD_TYPE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 3,
      "divakarmal": 2,
      "PrestonTYR": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_BLOOD_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IC).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setIc(ParserUtil.parseIc(argMultimap.getValue(PREFIX_IC).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            editPatientDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setHeight(ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT)).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setWeight(ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT)).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOOD_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setBloodType(ParserUtil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    .parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE)).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 6,
      "divakarmal": 26,
      "foojingyi": 1,
      "PrestonTYR": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // array of prefixes currently supported by the find command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final Prefix[] SUPPORTED_SEARCH_PREFIXES \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Prefix[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                PREFIX_NAME, PREFIX_IC, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_HEIGHT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_WEIGHT, PREFIX_ADDRESS, PREFIX_BLOOD_TYPE};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, SUPPORTED_SEARCH_PREFIXES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean isArgumentInvalid \u003d anyPrefixEmpty(argMultimap)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || noPrefixesSpecified(argMultimap)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (isArgumentInvalid) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cPredicate\u003cPatient\u003e\u003e predicates \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Arrays.stream(SUPPORTED_SEARCH_PREFIXES)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .filter(prefix -\u003e prefixNotEmpty(argMultimap, prefix))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .map(prefix -\u003e mapToPredicate(argMultimap, prefix))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if the prefixes by the user are all unsupported."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean noPrefixesSpecified(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Stream.of(SUPPORTED_SEARCH_PREFIXES).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if any of the prefixes that were specified by the user contains an empty {@code String}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * in the given * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean anyPrefixEmpty(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Stream.of(SUPPORTED_SEARCH_PREFIXES).anyMatch(prefix -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Optional\u003cString\u003e keyword \u003d argumentMultimap.getValue(prefix);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            boolean isPrefixSpecified \u003d keyword.isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (!isPrefixSpecified) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return keyword.get().isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean prefixNotEmpty(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String keyword \u003d argMultimap.getValue(prefix).orElse(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return !keyword.isEmpty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate mapToPredicate(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(argMultimap.getValue(prefix).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(keywords, prefix);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56,
      "wang-jun-hao": 2,
      "divakarmal": 14,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/MediBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        case NoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new NoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        case AccessCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return new AccessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 4,
      "divakarmal": 14,
      "PrestonTYR": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/NoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Parses input arguments and creates a new NoteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class NoteCommandParser implements Parser\u003cNoteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * and returns a NoteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public NoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_NAME, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(Date.getTodayDate()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            String content \u003d argMultimap.getValue(PREFIX_CONTENT).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            MedicalNote medicalNote \u003d new MedicalNote(date, name, content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new NoteCommand(medicalNote);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(iae.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 55
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code String ic} into a {@code Ic}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @throws ParseException if the given {@code ic} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Ic parseIc(String ic) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String trimmedIc \u003d ic.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!Ic.isValidIc(trimmedIc)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new ParseException(Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new Ic(trimmedIc);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses a {@code String dateOfBirth} into a {@code DateOfBirth}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new Date(trimmedDate, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Date.MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedAddress \u003d address.get().trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Address(trimmedAddress));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.isPresent()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedEmail \u003d email.get().trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Email(trimmedEmail));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e height} into a {@code Optional\u003cHeight\u003e}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cHeight\u003e parseHeight(Optional\u003cString\u003e height) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isPresent()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedHeight \u003d height.get().trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Height(trimmedHeight));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e weight} into a {@code Optional\u003cWeight\u003e}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cWeight\u003e parseWeight(Optional\u003cString\u003e weight) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.isPresent()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedWeight \u003d weight.get().trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Weight(trimmedWeight));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e BloodType} into a {@code Optional\u003cBloodType\u003e}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws ParseException if the given {@code BloodType} is invalid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cBloodType\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.isPresent()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedBloodType \u003d bloodType.get().trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!BloodType.isValidBloodType(trimmedBloodType)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new BloodType(trimmedBloodType));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 10,
      "wang-jun-hao": 31,
      "divakarmal": 26,
      "foojingyi": 15,
      "PrestonTYR": 55,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a date in MediBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be of the format \\\"DD-MM-YYYY\\\" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"where D, M and Y represent digits of the day, month and year of the date respectively.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_NON_FUTURE \u003d \"Date should not be in the future.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INPUT_STRING_PATTERN \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String OUTPUT_STRING_PATTERN \u003d \"d MMM yyyy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(INPUT_STRING_PATTERN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(OUTPUT_STRING_PATTERN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String inputValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String outputValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code Date} set to the given date in string form."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param dateString a valid string representing the date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param isNonFuture true if date object represents a date in the past or today"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Date(String dateString, boolean isNonFuture) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        date \u003d LocalDate.parse(dateString, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (isNonFuture) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            checkArgument(isOnOrBeforeToday(date), MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d dateString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d date.format(OUTPUT_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code Date} set to today\u0027s date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        java.util.Date todayDate \u003d new java.util.Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(INPUT_STRING_PATTERN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String todayDateInString \u003d formatter.format(todayDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        date \u003d LocalDate.parse(todayDateInString, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d todayDateInString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d date.format(OUTPUT_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            LocalDate.parse(test, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if this date is in the past or today."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean isOnOrBeforeToday(LocalDate date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return date.isBefore(todayDate) || date.isEqual(todayDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns today\u0027s date as a string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return A string representing today\u0027s date in the format dd-MM-yyyy"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static String getTodayDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        java.util.Date date \u003d new java.util.Date();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return inputValue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 102
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/MediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Wraps all data at the mediBook level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBook implements ReadOnlyMediBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates an MediBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook(ReadOnlyMediBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Resets the existing data of this {@code MediBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData(ReadOnlyMediBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the medi book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a patient to the medi book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must not already exist in the medi book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the medi book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * another existing patient in the medi book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Removes {@code key} from this {@code MediBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code key} must exist in the medi book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof MediBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 patients.equals(((MediBook) other).patients));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 44,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setMediBookFilePath(Path mediBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces medi book data with the data in {@code mediBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setMediBook(ReadOnlyMediBook mediBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns the MediBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ReadOnlyMediBook getMediBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the medi book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must exist in the medi book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patient} must not already exist in the medi book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Accesses the given patient."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * The patient must exist in the medi book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void accessPatient(Patient patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Resets the accessed patient."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void resetAccessedPatient();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Optional\u003cPatient\u003e getPatientToAccess();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the medi book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * another existing patient in the medi book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 9,
      "divakarmal": 29,
      "PrestonTYR": 5,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents the in-memory model of the medi book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBook mediBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cPatient\u003e accessedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Initializes a ModelManager with the given mediBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ModelManager(ReadOnlyMediBook mediBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(mediBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.fine(\"Initializing with MediBook: \" + mediBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook \u003d new MediBook(mediBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.mediBook.getPatientList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this(new MediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return userPrefs.getMediBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(mediBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MediBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBook(ReadOnlyMediBook mediBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook.resetData(mediBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook.hasPatient(patient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.removePatient(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void accessPatient(Patient patient) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.accessedPatient \u003d Optional.of(patient);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return this.accessedPatient;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void resetAccessedPatient() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.accessedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code versionedMediBook}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook.equals(other.mediBook)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 accessedPatient.equals(other.accessedPatient);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 44,
      "PrestonTYR": 17,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ReadOnlyMediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Unmodifiable view of an medi book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public interface ReadOnlyMediBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Path getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Path mediBookFilePath \u003d Paths.get(\"data\" , \"medibook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Path medicalNotesDirPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        setMediBookFilePath(newUserPrefs.getMediBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBookFilePath \u003d mediBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNotesDirPath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setMedicalNotesDirPath(Path medicalNotesDirPath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(medicalNotesDirPath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNotesDirPath \u003d medicalNotesDirPath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 mediBookFilePath.equals(o.mediBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Objects.hash(guiSettings, mediBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mediBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 8,
      "divakarmal": 12,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/MedicalNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a medical note entry for a Patient in MediBook, on a particular date by a particular doctor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Guarantees: details are present and not null, date and doctor\u0027s names are validated, fields are immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNote {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String NAME_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String CONTENT_MESSAGE_CONSTRAINTS \u003d \"Content should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String NAME_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Date of medical note entry. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Name of doctor entering the note. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final String doctorName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Content of the note i.e. relevant information from patient\u0027s consultation. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code MedicalNote}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param date String representation of a valid date of entry."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param doctorName A valid doctor\u0027s name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param content Contents of the note."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNote(Date date, String doctorName, String content) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(date, doctorName, content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        checkArgument(isValidDoctorName(doctorName), NAME_MESSAGE_CONSTRAINTS); // input validation for doctor\u0027s name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        checkArgument(isValidContent(content), CONTENT_MESSAGE_CONSTRAINTS); // input validation for content"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String getInputDateString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return date.inputValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String getDoctorName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns true if a given string is a valid doctor\u0027s name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static boolean isValidDoctorName(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return test.matches(NAME_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns true if a given string is a valid content for the note."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return test.length() \u003e 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return \"Date: \" + date.outputValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + \"\\nDoctor: \" + doctorName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + \"\\n\\nNotes: \" + content;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalNote)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalNote otherNote \u003d (MedicalNote) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return otherNote.date.equals(date)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherNote.doctorName.equals(doctorName)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherNote.content.equals(content);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Objects.hash(date, doctorName, content);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 12,
      "wang-jun-hao": 8,
      "divakarmal": 3,
      "foojingyi": 73
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/MedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a list of medical notes for a Patient in MediBook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class MedicalNoteList implements ReadOnlyMedicalNoteList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final List\u003cMedicalNote\u003e innerList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs an empty medical note list object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs medical note list object containing medical notes in the given list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * A new copy of the list is made to be stored as the inner list, so that operations on the argument"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * list does not affect this medical note list object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param listOfMedicalNotes list of medical notes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList(List\u003cMedicalNote\u003e listOfMedicalNotes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        List\u003cMedicalNote\u003e copyOfList \u003d new LinkedList\u003c\u003e(listOfMedicalNotes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.innerList \u003d copyOfList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Adds a new medical note to the list of medical notes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param newMedicalNote medical note to be added to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void add(MedicalNote newMedicalNote) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList.add(newMedicalNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return innerList.isEmpty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList makeCopy() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new MedicalNoteList(innerList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public List\u003cMedicalNote\u003e getMedicalNoteList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Collections.unmodifiableList(innerList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        for (MedicalNote medicalNote : innerList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            result +\u003d medicalNote.toString() + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!(other instanceof MedicalNoteList)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList otherList \u003d (MedicalNoteList) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return otherList.innerList.equals(innerList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 12,
      "wang-jun-hao": 65
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/ReadOnlyMedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Unmodifiable view of a medical notes list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface ReadOnlyMedicalNoteList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns an unmodifiable view of the patient\u0027s medical notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    List\u003cMedicalNote\u003e getMedicalNoteList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s address in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/BloodType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represent\u0027s a Patient\u0027s blood type in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class BloodType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Blood type can only be one of the 8 possible blood types\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final BloodTypeEnum bloodType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructor for BloodType object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param bloodType blood type of the patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public BloodType(String bloodType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d BloodTypeEnum.valueOfLabel(bloodType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static boolean isValidBloodType(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return !(BloodTypeEnum.valueOfLabel(test) \u003d\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return bloodType.label;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof BloodType"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 bloodType.equals(((BloodType) other).bloodType));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 40
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/BloodTypeEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public enum BloodTypeEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    A_POSITIVE(\"A+\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    A_NEGATIVE(\"A-\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    B_POSITIVE(\"B+\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    B_NEGATIVE(\"B-\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    O_POSITIVE(\"O+\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    O_NEGATIVE(\"O-\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    AB_POSITIVE(\"AB+\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    AB_NEGATIVE(\"AB-\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private BloodTypeEnum(String label) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Gets enum from string input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return required BloodTypeEnum object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static BloodTypeEnum valueOfLabel(String label) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (BloodTypeEnum e : values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (e.label.equals(label)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 31
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Bmi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Person\u0027s BMI in the medi book, whose value is defined to 1 dp (zero-padded)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBmi(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Bmi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"BMI should only contain positive numbers with 1 decimal place, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final double conversionFactor \u003d 100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final double numericValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code bmi} from known weight and height."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param weight A valid weight object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param height A valid height object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Bmi(Weight weight, Height height) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(weight, height);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericWeight \u003d weight.getNumericValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int numericHeight \u003d height.getNumericValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d computeBmiValue(numericWeight, numericHeight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d String.valueOf(numericValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code bmi}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param bmi A valid bmi."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Bmi(String bmi) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(bmi);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidBmi(bmi), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d bmi;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Double.parseDouble(bmi);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static double computeBmiValue(double numericWeight, int numericHeight) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericHeightInMetres \u003d ((double) numericHeight) / conversionFactor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericBmi \u003d numericWeight / Math.pow(numericHeightInMetres, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return ((double) Math.round(numericBmi * 10)) / 10;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if a given string is a valid bmi."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidBmi(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if valid number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Double bmi \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if specified with 1 decimal place"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!hasDotAsSecondLastCharacter(test)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (bmi \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean hasDotAsSecondLastCharacter(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!test.contains(\".\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int indexOfDot \u003d test.indexOf(\".\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (indexOfDot !\u003d test.length() - 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Bmi // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 value.equals(((Bmi) other).value)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 100,
      "divakarmal": 4
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/DateOfBirth.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s date of birth (DOB) in the medi book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date of birth (DOB) should be of the format \\\"DD-MM-YYYY\\\"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"where D, M and Y represent digits of the day, month and year of the DOB respectively.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"\\nDOB should not be in the future.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String inputValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String outputValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code DateOfBirth}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param dobString A valid date of birth."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DateOfBirth(String dobString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(dobString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        checkArgument(isValidDateOfBirth(dobString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        date \u003d new Date(dobString, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d date.inputValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d date.outputValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns true if a given string is a valid date of birth."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidDateOfBirth(String dobString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Date.isValidDate(dobString)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Date(dobString, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return inputValue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 date.equals(((DateOfBirth) other).date)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 20,
      "divakarmal": 3,
      "foojingyi": 44
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s email in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/FieldContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Tests that a {@code Patient}\u0027s field as specified by the prefix matches with the keyword given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FieldContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Creates a predicate for a patient field based on the given prefix and keywords."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FieldContainsKeywordsPredicate(List\u003cString\u003e keywords, Prefix prefix) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(getField(patient), keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || (other instanceof FieldContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 keywords.equals(((FieldContainsKeywordsPredicate) other).keywords)) // keywords check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 prefix.equals(((FieldContainsKeywordsPredicate) other).prefix); // prefix check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private String getField(Patient patient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // switch statement cannot be used since Prefix is not an enum"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_IC.equals(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getIc().ic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_NAME.equals(prefix)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (PREFIX_DATE.equals(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return patient.getDateOfBirth().inputValue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_PHONE.equals(prefix)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_EMAIL.equals(prefix)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getEmail().map(Email::toString).orElse(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_HEIGHT.equals(prefix)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getHeight().map(Height::toString).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_WEIGHT.equals(prefix)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getWeight().map(Weight::toString).orElse(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_ADDRESS.equals(prefix)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getAddress().map(Address::toString).orElse(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_BLOOD_TYPE.equals(prefix)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getBloodType().map(BloodType::toString).orElse(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 66,
      "wang-jun-hao": 3,
      "divakarmal": 11
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s height in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Height should only contain numbers, and it should be a value between 0 and 300 exclusive\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_UNIT \u003d \"cm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final int HEIGHT_MIN \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final int HEIGHT_MAX \u003d 300;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final int numericValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        value \u003d height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Integer.parseInt(height);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int height \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return height \u003c HEIGHT_MAX \u0026\u0026 height \u003e HEIGHT_MIN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int getNumericValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return numericValue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56,
      "wang-jun-hao": 6,
      "divakarmal": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Ic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s ic in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIc(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class Ic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IC should be of the format @xxxxxxx#\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"1. The @ should be a letter S, T, F or G\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"2. The xxxxxxx should be a 7-digit number\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"3. The # is should be a letter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String FIRST_CHARACTER_REGEX \u003d \"[STFG]{1,1}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String DIGITS_REGEX \u003d \"\\\\d{7,7}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String LAST_CHARACTER_REGEX \u003d \"\\\\w{1,1}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d FIRST_CHARACTER_REGEX + DIGITS_REGEX + LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public final String ic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Constructs an {@code Ic}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @param ic A valid IC number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Ic(String ic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        checkArgument(isValidIc(ic), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns if a given string is a valid IC number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static boolean isValidIc(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                || (other instanceof Ic // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 ic.equals(((Ic) other).ic)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "PrestonTYR": 55
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s name in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient in the medi book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String OPTIONAL_FIELD_EMPTY_MESSAGE \u003d \"N/A\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Compulsory fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Ic ic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cHeight\u003e height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cWeight\u003e weight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cBmi\u003e bmi;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cBloodType\u003e bloodType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Default empty fields"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private MedicalNoteList medicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Patient(Ic ic, Name name, DateOfBirth dateOfBirth, Phone phone, Optional\u003cEmail\u003e email,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cAddress\u003e address, Optional\u003cHeight\u003e height, Optional\u003cWeight\u003e weight,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cBloodType\u003e bloodType, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireAllNonNull(ic, name, dateOfBirth, phone, email, address, height, weight, bloodType, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isEmpty() || weight.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.of(new Bmi(weight.get(), height.get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Overloaded constructor of Person with an additional bmi field that has already been computed to bypass"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * unnecessary re-computation of bmi."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Patient(Ic ic, Name name, DateOfBirth dateOfBirth, Phone phone, Optional\u003cEmail\u003e email,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cAddress\u003e address, Optional\u003cHeight\u003e height, Optional\u003cWeight\u003e weight, Optional\u003cBmi\u003e bmi,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cBloodType\u003e bloodType, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(ic, name, dateOfBirth, phone, email, address, height, weight, bloodType, tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bmi \u003d bmi;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Ic getIc() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the email of the patient for the UI to display."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the email of the patient or N/A if there"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no email."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringEmail() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getEmail().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getEmail().get().toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the address of the patient for the UI to display."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the address of the patient or N/A if there"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * is no address."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringAddress() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getAddress().isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getAddress().get().toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the height of the patient for the UI to display."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the height of the patient or N/A if there"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no height."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringHeight() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getHeight().isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getHeight().get().toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the weight of the patient for the UI to display."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the weight of the patient or N/A if there"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no weight."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringWeight() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getWeight().isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getWeight().get().toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cBmi\u003e getBmi() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return bmi;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the bmi of the patient for the UI to display."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the bmi of the patient or N/A if there"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no bmi."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringBmi() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getBmi().isPresent()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getBmi().get().toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return bloodType;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the bloodtype of the patient for the UI to display."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the bloodtype of the patient or N/A if there"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no bloodtype."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringBloodType() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getBloodType().get().toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Adds medical note to the list of medical notes in this patient"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param newMedicalNote new medical note object to be added to patient"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void addMedicalNote(MedicalNote newMedicalNote) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList.add(newMedicalNote);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Sets the medical note list object within this patient to the given medical note list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param medicalNoteList new medical note list to be stored within patient."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void setMedicalNoteList(MedicalNoteList medicalNoteList) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.medicalNoteList \u003d medicalNoteList;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns the medical note list object within this patient."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList getMedicalNoteList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getIc().equals(getIc());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the IC of the patient for the UI to display."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the IC"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringIc() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getIc().toString();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Name of the patient for the UI to display."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the Name"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringName() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Date of birth of the patient for the UI to display."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the Date of birth"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringDob() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getDateOfBirth().toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Phone number of the patient for the UI to display."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the phone number"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringPhone() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getPhone().toString();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return otherPatient.getIc().equals(getIc())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getHeight().equals(getHeight())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getWeight().equals(getWeight())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 otherPatient.getBmi().equals(getBmi())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Objects.hash(ic, name, dateOfBirth, phone, email, address, height, weight, bmi,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                            bloodType, tags);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        builder.append(getIc())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(\" Name \")"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringEmail())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringAddress())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .append(\" Height: \")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringHeight())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .append(\" Weight: \")"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringWeight())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .append(\" BMI: \")"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringBmi())"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(\" Blood type: \")"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringBloodType())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 5,
      "wang-jun-hao": 61,
      "divakarmal": 78,
      "foojingyi": 8,
      "PrestonTYR": 106,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s phone number in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * As such, adding and updating of patients uses Patient#isSamePatient(Patient) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * so as to ensure that the patient being added or updated is unique in terms of identity in the UniquePatientList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * However, the removal of a patient uses Patient#equals(Object)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * so as to ensure that the patient with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 138
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Weight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s weight in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Weight (kg) should only contain positive numbers with 1 decimal place, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_UNIT \u003d \"kg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final double numericValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code weight}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Double.parseDouble(weight);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if valid number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Double weight \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if specified with 1 decimal place"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!hasDotAsSecondLastCharacter(test)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (weight \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean hasDotAsSecondLastCharacter(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!test.contains(\".\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int indexOfDot \u003d test.indexOf(\".\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (indexOfDot !\u003d test.length() - 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public double getNumericValue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return numericValue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 value.equals(((Weight) other).value)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 83,
      "divakarmal": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Tag in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Contains utility methods for populating {@code MediBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S9123456A\"), new Name(\"Alex Yeoh\"), new DateOfBirth(\"15-05-1991\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"87438807\"), Optional.of(new Email(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Geylang Street 29, #06-40\")), Optional.of(new Height(\"173\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Weight(\"67.4\")), Optional.of(new BloodType(\"A+\")), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S8786858D\"), new Name(\"Bernice Yu\"), new DateOfBirth(\"17-09-1987\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"99272758\"), Optional.of(new Email(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Height(\"166\")), Optional.of(new Weight(\"48.2\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new BloodType(\"B+\")), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"T1234567G\"), new Name(\"Charlotte Oliveiro\"), new DateOfBirth(\"28-02-2012\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"93210283\"), Optional.of(new Email(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\")), Optional.of(new Height(\"175\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Weight(\"58.5\")), Optional.of(new BloodType(\"A+\")), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"F7654321K\"), new Name(\"David Li\"), new DateOfBirth(\"20-12-1976\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"91031282\"), Optional.of(new Email(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Height(\"169\")), Optional.of(new Weight(\"64.9\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new BloodType(\"O+\")), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"G1928374R\"), new Name(\"Irfan Ibrahim\"), new DateOfBirth(\"11-04-2000\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"92492021\"), Optional.of(new Email(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 47 Tampines Street 20, #17-35\")), Optional.of(new Height(\"180\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Weight(\"80.5\")), Optional.of(new BloodType(\"AB+\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S9182736Q\"), new Name(\"Roy Balakrishnan\"), new DateOfBirth(\"14-06-1991\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"92624417\"), Optional.of(new Email(\"royb@example.com\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 45 Aljunied Street 85, #11-31\")), Optional.of(new Height(\"165\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Weight(\"60.6\")), Optional.of(new BloodType(\"A-\")), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static ReadOnlyMediBook getSampleMediBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook sampleMb \u003d new MediBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sampleMb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 28,
      "PrestonTYR": 22,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedMedicalNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Jackson-friendly version of {@link MedicalNote}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class JsonAdaptedMedicalNote {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String ERROR_MESSAGE_NULL_FIELD \u003d \"MedicalNote\u0027s fields cannot be null!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonProperty(\"doctor name\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String doctorName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalNote} with the given patient details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedMedicalNote(@JsonProperty(\"date\") String date, @JsonProperty(\"doctor name\") String doctorName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                                  @JsonProperty(\"content\") String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a given {@code MedicalNote} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedMedicalNote(MedicalNote medicalNote) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.date \u003d medicalNote.getInputDateString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.doctorName \u003d medicalNote.getDoctorName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.content \u003d medicalNote.getContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public MedicalNote toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            final Date modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new MedicalNote(modelDate, doctorName, content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(ERROR_MESSAGE_NULL_FIELD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 60
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String ic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String weight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String bmi;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final String bloodType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"ic\") String ic, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"height\") String height, @JsonProperty(\"weight\") String weight,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                              @JsonProperty(\"bmi\") String bmi, @JsonProperty(\"blood type\") String bloodType,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bmi \u003d bmi;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ic \u003d source.getIc().ic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().inputValue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            email \u003d source.getStringEmail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            email \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            address \u003d source.getStringAddress();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            address \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            height \u003d source.getStringHeight();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            height \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            weight \u003d source.getStringWeight();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            weight \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // bmi"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getBmi().isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bmi \u003d source.getStringBmi();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bmi \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // bloodtype"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bloodType \u003d source.getStringBloodType();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bloodType \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (ic \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Ic.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!Ic.isValidIc(ic)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Ic modelIc \u003d new Ic(ic);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cEmail\u003e modelEmail;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelEmail \u003d Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelEmail \u003d Optional.of(new Email(email));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cAddress\u003e modelAddress;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelAddress \u003d Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelAddress \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cHeight\u003e modelHeight;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelHeight \u003d Optional.empty();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelHeight \u003d Optional.of(new Height(height));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cWeight\u003e modelWeight;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelWeight \u003d Optional.empty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Weight.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelWeight \u003d Optional.of(new Weight(weight));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cBmi\u003e modelBmi;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bmi.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Bmi.isValidBmi(bmi)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new IllegalValueException(Bmi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBmi \u003d Optional.of(new Bmi(bmi));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cBloodType\u003e modelBloodType;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!BloodType.isValidBloodType(bloodType)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBloodType \u003d Optional.of(new BloodType(bloodType));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new Patient(modelIc, modelName, modelDateOfBirth, modelPhone, modelEmail, modelAddress, modelHeight,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                modelWeight, modelBmi, modelBloodType, modelTags);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 5,
      "wang-jun-hao": 14,
      "divakarmal": 41,
      "foojingyi": 14,
      "PrestonTYR": 91,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonMediBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A class to access MediBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonMediBookStorage implements MediBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMediBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonMediBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return readMediBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Similar to {@link #readMediBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Optional\u003cJsonSerializableMediBook\u003e jsonMediBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                filePath, JsonSerializableMediBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!jsonMediBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return Optional.of(jsonMediBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        saveMediBook(mediBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Similar to {@link #saveMediBook(ReadOnlyMediBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMediBook(mediBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 26,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonMedicalNoteListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * A class to access MedicalNoteList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonMedicalNoteListStorage implements MedicalNoteListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String NAME_DIR \u003d \"medicalnotes\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String NAME_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMedicalNoteListStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonMedicalNoteListStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return readMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Similar to {@link #readMedicalNoteList(Ic ic)}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path medicalNotesPath \u003d filePath.resolve(NAME_DIR).resolve(ic.toString() + NAME_EXTENSION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!FileUtil.isFileExists(medicalNotesPath)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Optional\u003cJsonSerializableMedicalNoteList\u003e jsonMedicalNoteList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                medicalNotesPath, JsonSerializableMedicalNoteList.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!jsonMedicalNoteList.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.of(jsonMedicalNoteList.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        saveMedicalNoteList(medicalNoteList, filePath, ic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Similar to {@link #saveMedicalNoteList(ReadOnlyMedicalNoteList, Ic ic)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(medicalNoteList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path medicalNotesPath \u003d filePath.resolve(NAME_DIR).resolve(ic.toString() + NAME_EXTENSION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileUtil.createIfMissing(medicalNotesPath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMedicalNoteList(medicalNoteList), medicalNotesPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 91
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonSerializableMediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * An Immutable MediBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "@JsonRootName(value \u003d \"medibook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "class JsonSerializableMediBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructs a {@code JsonSerializableMediBook} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonSerializableMediBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts a given {@code ReadOnlyMediBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMediBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonSerializableMediBook(ReadOnlyMediBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts this medi book into the model\u0027s {@code MediBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (mediBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonSerializableMedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * An Immutable MedicalNoteList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@JsonRootName(value \u003d \"medical notes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class JsonSerializableMedicalNoteList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonProperty(\"medical notes\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalNote\u003e medicalNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code JsonSerializableMedicalNoteList} with the given medical notes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonSerializableMedicalNoteList(@JsonProperty(\"medical notes\") List\u003cJsonAdaptedMedicalNote\u003e medicalNotes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNotes.addAll(medicalNotes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a given {@code ReadOnlyMediBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMediBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonSerializableMedicalNoteList(ReadOnlyMedicalNoteList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.addAll(source.getMedicalNoteList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .map(JsonAdaptedMedicalNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts this medi book into the model\u0027s {@code MediBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public MedicalNoteList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (JsonAdaptedMedicalNote jsonAdaptedMedicalNote : medicalNotes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            MedicalNote medicalNote \u003d jsonAdaptedMedicalNote.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            medicalNoteList.add(medicalNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNoteList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/MediBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a storage for {@link MediBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public interface MediBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns MediBook data as a {@link ReadOnlyMediBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see #getMediBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves the given {@link ReadOnlyMediBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param mediBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see #saveMediBook(ReadOnlyMediBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 46
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/MedicalNoteListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Represents a storage for {@link MedicalNoteList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface MedicalNoteListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Path getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns MedicalNoteList data as a {@link ReadOnlyMedicalNoteList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #readMedicalNoteList(Ic ic)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Saves the given {@link ReadOnlyMedicalNoteList} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param medicalNoteList cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #saveMedicalNoteList(ReadOnlyMedicalNoteList, Ic ic)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 48
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface Storage extends MediBookStorage, MedicalNoteListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Manages storage of MediBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private MediBookStorage mediBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private MedicalNoteListStorage medicalNoteListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code MediBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public StorageManager(MediBookStorage mediBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                          MedicalNoteListStorage medicalNoteListStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBookStorage \u003d mediBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNoteListStorage \u003d medicalNoteListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MediBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookStorage.getMediBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return readMediBook(mediBookStorage.getMediBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookStorage.readMediBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        saveMediBook(mediBook, mediBookStorage.getMediBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBookStorage.saveMediBook(mediBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MedicalNoteList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNoteListStorage.getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return readMedicalNoteList(medicalNoteListStorage.getMedicalNotesDirPath(), ic);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNoteListStorage.readMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        saveMedicalNoteList(medicalNoteList, medicalNoteListStorage.getMedicalNotesDirPath(), ic);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNoteListStorage.saveMedicalNoteList(medicalNoteList, filePath, ic);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 34,
      "divakarmal": 21,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a storage for {@link seedu.medibook.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves the given {@link seedu.medibook.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "         * @see seedu.medibook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"https://ay2021s1-cs2103t-f13-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.patientprofile.PatientProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private PatientProfile patientProfile;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMediBookFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleProfile(Patient patient) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientProfile \u003d new PatientProfile(patient);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientProfile.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see seedu.medibook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // Logger details, safe to ignore"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (commandResult.isShowProfile()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                handleProfile(logic.getPatientToAccess().get());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (commandResult.isShowList()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                handleList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 15,
      "foojingyi": 1,
      "PrestonTYR": 22,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label ic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private Label weight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private Label bmi;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientCode} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ic.setText(patient.getIc().ic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        dateOfBirth.setText(patient.getDateOfBirth().outputValue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        phone.setText(patient.getPhone().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            email.setText(patient.getStringEmail());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            email.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            address.setText(patient.getStringAddress());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            address.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            height.setText(patient.getStringHeight() + Height.HEIGHT_UNIT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            height.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            weight.setText(patient.getStringWeight() + Weight.WEIGHT_UNIT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            weight.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // bmi"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getBmi().isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bmi.setText(patient.getStringBmi());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bmi.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // bloodType"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bloodType.setText(patient.getStringBloodType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bloodType.setText(OPTIONAL_FIELD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 5,
      "divakarmal": 29,
      "foojingyi": 2,
      "PrestonTYR": 39,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private TableView\u003cPatient\u003e patientTableView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cTableColumn\u003cPatient, String\u003e\u003e columns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnIndex \u003d new TableColumn\u003c\u003e(\"#\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIndex.setCellValueFactory(column-\u003e new ReadOnlyObjectWrapper\u003c\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                Integer.toString(patientTableView.getItems().indexOf(column.getValue()) + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnIc \u003d new TableColumn\u003c\u003e(\"IC\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnIc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnName \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnDob \u003d new TableColumn\u003c\u003e(\"DOB\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnDob);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnPhone \u003d new TableColumn\u003c\u003e(\"Phone\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnPhone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnEmail \u003d new TableColumn\u003c\u003e(\"Email\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnEmail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnAddress \u003d new TableColumn\u003c\u003e(\"Address\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnHeight \u003d new TableColumn\u003c\u003e(\"Height\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnHeight);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnWeight \u003d new TableColumn\u003c\u003e(\"Weight\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnWeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnBmi \u003d new TableColumn\u003c\u003e(\"BMI\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnBmi);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnBloodType \u003d new TableColumn\u003c\u003e(\"Blood Type\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnBloodType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.forEach(col -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            String text \u003d col.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!text.equals(\"#\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String[] words \u003d text.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                IntStream.range(0, words.length).forEach(i -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    words[i] \u003d words[i].substring(0, 1).toUpperCase() + words[i].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String property \u003d \"string\" + String.join(\"\", words);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                col.setCellValueFactory(new PropertyValueFactory\u003c\u003e(property));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            col.setResizable(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            col.setSortable(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            patientTableView.getColumns().add(col);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIndex.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.04));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIc.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.075));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnName.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.125));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnDob.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.07));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnPhone.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.07));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnEmail.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.15));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnAddress.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.22));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnHeight.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.0625));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnWeight.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.0625));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnBmi.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.04));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnBloodType.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.075));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientTableView.getItems().addAll(patientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientList.addListener((ListChangeListener\u003cPatient\u003e) c -\u003e patientTableView.setItems(patientList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 101
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalDetailsCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays the medical details of a {@code Patient}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalDetailsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"ProfileDetailsCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label cardHeader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e detailsListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalDetailsCard} for the given {@code Patient}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalDetailsCard(Patient patient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        cardHeader.setText(\"Medical Details: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ObservableList\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e fields \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, Set\u003cTag\u003e\u003e(\"Tags: \", patient.getTags()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setItems(fields);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setCellFactory(listView -\u003e new MedicalDetailsListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalDetailsCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalDetailsCard card \u003d (MedicalDetailsCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(card.patient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a medical detail field using a {@code MedicalDetailsRow}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class MedicalDetailsListViewCell extends ListCell\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(Pair\u003cString, Set\u003cTag\u003e\u003e categoryTagsPair, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(categoryTagsPair, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || categoryTagsPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new MedicalDetailsRow(categoryTagsPair.getKey(), categoryTagsPair.getValue()).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 79
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalDetailsRow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays one of the medical details of a {@code Patient} as a row of a list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalDetailsRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalDetailsRow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox row;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label fieldName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalDetailsRow} for a medical detail of a {@code Patient} given the category and tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalDetailsRow(String fieldName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.fieldName.setText(fieldName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        tags.stream().sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                this.tags.getChildren().add(new Label(tag.tagName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 39
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalNoteCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays a {@code MedicalNote}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalNoteCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final MedicalNote medicalNote;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label doctorName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private TextArea content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalNoteCard} with the given {@code MedicalNote} to be displayed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalNoteCard(MedicalNote medicalNote) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalNote \u003d medicalNote;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // TODO: change accordingly based on visibility"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        date.setText(medicalNote.date.toString()); // TODO: Make the formatter public or make a get date method"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        doctorName.setText(medicalNote.doctorName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        content.setText(medicalNote.content);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalNoteCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalNoteCard card \u003d (MedicalNoteCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return medicalNote.equals(card.medicalNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalNotesPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Panel containing the list of {@code MedicalNote} of a {@code Patient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNotesPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalNotesPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label panelHeader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cMedicalNote\u003e medicalNotesListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalNotesPanel} with the given {@code List} of {@code MedicalNote} objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalNotesPanel(List\u003cMedicalNote\u003e medicalNotes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        panelHeader.setText(\"Medical Notes:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ObservableList\u003cMedicalNote\u003e observableMedicalNotes \u003d FXCollections.observableArrayList(medicalNotes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesListView.setItems(observableMedicalNotes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesListView.setCellFactory(listView -\u003e new MedicalNotesPanel.MedicalNotesListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code MedicalNote} using a {@code MedicalNoteCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class MedicalNotesListViewCell extends ListCell\u003cMedicalNote\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(MedicalNote medicalNote, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(medicalNote, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || medicalNote \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new MedicalNoteCard(medicalNote).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foojingyi": 56
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PatientProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component representing a patient\u0027s profile that displays all the information of a {@code Patient}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PatientProfile extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"PatientProfile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane personalDetailsCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane medicalDetailsCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane medicalNotesPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PatientProfile} for the given {@code Patient}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PatientProfile(Patient patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PersonalDetailsCard personalDetailsCard \u003d new PersonalDetailsCard(patient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.personalDetailsCard.getChildren().add(personalDetailsCard.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalDetailsCard medicalDetailsCard \u003d new MedicalDetailsCard(patient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalDetailsCard.getChildren().add(medicalDetailsCard.getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        List\u003cMedicalNote\u003e medicalNotes \u003d new ArrayList\u003c\u003e(); // TODO after implementation of MedicalNote as field"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotes.add(new MedicalNote(new Date(\"15-10-2020\", true), \"Charlotte Liew\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \"- Irregular hearbeat \\n- Breathing problems\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalNotesPanel medicalNotesPanel \u003d new MedicalNotesPanel(medicalNotes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalNotesPanel.getChildren().add(medicalNotesPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof PatientProfile)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PatientProfile profile \u003d (PatientProfile) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(profile.patient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 66
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PersonalDetailsCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays the personal details of a {@code Patient}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PersonalDetailsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"ProfileDetailsCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label cardHeader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cPair\u003cString, String\u003e\u003e detailsListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PersonalDetailsCard} for the given {@code Patient}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PersonalDetailsCard(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        cardHeader.setText(\"Personal Details: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fillListView();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private void fillListView() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ObservableList\u003cPair\u003cString, String\u003e\u003e fields \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Name: \", patient.getStringName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"IC: \", patient.getStringIc()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Date Of Birth: \", patient.getStringDob()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Phone Number: \", patient.getStringPhone()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Email: \", patient.getStringEmail()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Email: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Address: \", patient.getStringAddress()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Address: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Height: \", patient.getStringHeight() + Height.HEIGHT_UNIT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Height: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Weight: \", patient.getStringWeight() + Weight.WEIGHT_UNIT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Weight: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // bmi"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getBmi().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"BMI: \", patient.getStringBmi()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"BMI: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // bloodType"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Blood Type: \", patient.getStringBloodType()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Blood Type: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setItems(fields);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setCellFactory(listView -\u003e new PersonalDetailsListViewCell());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof PersonalDetailsCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PersonalDetailsCard card \u003d (PersonalDetailsCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(card.patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a patient field using a {@code PersonalDetailsRow}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class PersonalDetailsListViewCell extends ListCell\u003cPair\u003cString, String\u003e\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(Pair\u003cString, String\u003e fieldValuePair, boolean empty) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(fieldValuePair, empty);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || fieldValuePair \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new PersonalDetailsRow(fieldValuePair.getKey(), fieldValuePair.getValue()).getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 130
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PersonalDetailsRow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays one of the personal details of a {@code Patient} as a row of a list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PersonalDetailsRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"PersonalDetailsRow.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox row;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label fieldName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PersonalDetailsRow} for a field of a {@code Patient} with the given value of the field."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PersonalDetailsRow(String fieldName, String value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.fieldName.setText(fieldName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.value.setText(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 31
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        \u003cVBox fx:id\u003d\"patientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "          \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/MedicalDetailsRow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"row\" fx:id\u003d\"row\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"fieldName\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 15
    }
  },
  {
    "path": "src/main/resources/view/MedicalNoteCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cLabel fx:id\u003d\"doctorName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorName\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003c!-- TODO: set styleClass for content --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cTextArea fx:id\u003d\"content\" editable\u003d\"false\" styleClass\u003d\"text-field\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "src/main/resources/view/MedicalNotesPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cLabel fx:id\u003d\"panelHeader\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cListView fx:id\u003d\"medicalNotesListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 10
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003cLabel fx:id\u003d\"ic\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ic\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$height\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$weight\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      \u003cLabel fx:id\u003d\"bmi\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bmi\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 2,
      "divakarmal": 1,
      "foojingyi": 1,
      "PrestonTYR": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \u003cTableView fx:id\u003d\"patientTableView\" stylesheets\u003d\"@TableView.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003c/columnResizePolicy\u003e\u003c/TableView\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 7,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/PatientProfile.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "              \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"400.0\" prefWidth\u003d\"295.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                      \u003cAnchorPane fx:id\u003d\"personalDetailsCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                      \u003cAnchorPane fx:id\u003d\"medicalDetailsCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "          \u003cAnchorPane fx:id\u003d\"medicalNotesPanel\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 14,
      "PrestonTYR": 6
    }
  },
  {
    "path": "src/main/resources/view/PersonalDetailsRow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"row\" fx:id\u003d\"row\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"fieldName\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"value\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 14
    }
  },
  {
    "path": "src/main/resources/view/ProfileDetailsCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cLabel fx:id\u003d\"cardHeader\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cListView fx:id\u003d\"detailsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/medibook/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 2,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonMediBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.JsonMedicalNoteListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new JsonMediBookStorage(temporaryFolder.resolve(\"mediBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d new JsonMedicalNoteListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Setup LogicManager with JsonMediBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new JsonMediBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMediBook.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d new JsonMedicalNoteListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_SAVE_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static class JsonMediBookIoExceptionThrowingStub extends JsonMediBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private JsonMediBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "divakarmal": 42,
      "foojingyi": 1,
      "PrestonTYR": 1,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AccessCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient patientToAccess \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new CommandResult(String.format(AccessCommand.MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        false, false, true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(accessCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient patientToAccess \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new CommandResult(String.format(AccessCommand.MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        false, false, true, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(accessCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidOutOfBoundsIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessFirstCommand \u003d new AccessCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessSecondCommand \u003d new AccessCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(accessFirstCommand.equals(accessFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessFirstCommandCopy \u003d new AccessCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(accessFirstCommand.equals(accessFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(accessSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 118
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientInList \u003d model.getMediBook().getPatientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 19,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_nullPatient_throwsNullPatientException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void accessPatient(Patient patient) {}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void resetAccessedPatient() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setMediBook(ReadOnlyMediBook newData) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return new MediBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 55,
      "PrestonTYR": 10,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_emptyMediBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_nonEmptyMediBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setMediBook(new MediBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showProfile value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showList value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showProfile value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showList value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "PrestonTYR": 17,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALID_IC_AMY \u003d \"S9753124K\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALID_IC_BOB \u003d \"T0102030G\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_DOB_AMY \u003d \"14-02-1997\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_DOB_BOB \u003d \"11-11-2001\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String VALID_HEIGHT_AMY \u003d \"172\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String VALID_HEIGHT_BOB \u003d \"166\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_WEIGHT_AMY \u003d \"49.9\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_WEIGHT_BOB \u003d \"65.0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_BMI_AMY \u003d \"16.9\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_BMI_BOB \u003d \"23.6\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_AMY \u003d \"A+\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_BOB \u003d \"B+\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_NON_FUTURE_DATE \u003d \"15-10-2020\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_FUTURE_DATE \u003d \"15-10-2030\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_DOCTOR_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_CONTENT \u003d \"Patient is sick.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String IC_DESC_AMY \u003d \" \" + PREFIX_IC + VALID_IC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String IC_DESC_BOB \u003d \" \" + PREFIX_IC + VALID_IC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DOB_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DOB_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_DESC_AMY \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_DESC_BOB \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_DESC_AMY \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_DESC_BOB \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_AMY \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_BOB \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_NON_FUTURE_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_NON_FUTURE_DATE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_FUTURE_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_FUTURE_DATE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_DOCTOR_DESC \u003d \" \" + PREFIX_NAME + VALID_DOCTOR_NAME;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String INVALID_IC_DESC \u003d \" \" + PREFIX_IC + \"A222223HH\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DATE + \"31/12/95\"; // \u0027-\u0027 should be used instead of \u0027/\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String INVALID_HEIGHT_DESC \u003d \" \" + PREFIX_HEIGHT + \"17o\"; // \u0027o\u0027 not allowed in height"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // 2 decimal places is not allowed in weight"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_WEIGHT_DESC \u003d \" \" + PREFIX_WEIGHT + \"55.55\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String INVALID_BLOOD_TYPE_DESC \u003d \" \" + PREFIX_BLOOD_TYPE + \"C+\"; // \u0027C+\u0027 invalid blood type"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_NOTE_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2-3-2020\"; // incorrect date format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withWeight(VALID_WEIGHT_AMY).withBloodType(VALID_BLOOD_TYPE_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * - the medi book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook expectedMediBook \u003d new MediBook(actualModel.getMediBook());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedMediBook, actualModel.getMediBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code model}\u0027s medi book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.updateFilteredPatientList(new FieldContainsKeywordsPredicate(Arrays.asList(splitName[0]), PREFIX_NAME));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "wang-jun-hao": 22,
      "divakarmal": 39,
      "foojingyi": 6,
      "PrestonTYR": 7,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 40,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BMI_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_weightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Height heightOfLastPatient \u003d lastPatient.getHeight().get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Bmi expectedBmi \u003d new Bmi(new Weight(VALID_WEIGHT_BOB), heightOfLastPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withWeight(VALID_WEIGHT_BOB).withBmi(expectedBmi.value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_heightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Weight weightOfLastPatient \u003d lastPatient.getWeight().get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Bmi expectedBmi \u003d new Bmi(weightOfLastPatient, new Height(VALID_HEIGHT_BOB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withHeight(VALID_HEIGHT_BOB).withBmi(expectedBmi.value)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_weightAndHeightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .withBmi(VALID_BMI_BOB).buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditCommand.EditPatientDescriptor());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // edit patient in filtered list into a duplicate in medi book"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientInList \u003d model.getMediBook().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * but smaller than size of MediBook"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor copyDescriptor \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 62,
      "divakarmal": 89,
      "PrestonTYR": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptorWithSameValues \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different ic -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different height -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 3,
      "divakarmal": 32,
      "foojingyi": 3,
      "PrestonTYR": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "PrestonTYR": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_PATIENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_IC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute_multipleKeywordsSingleField_multiplePatientsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d prepareIcPredicate(\"S9234567A F7654321Q\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, ELLE), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute_multipleKeywordsMultipleFields_multiplePatientsFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate1 \u003d prepareNamePredicate(\"Kurz Elle Kunz Pauline\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate2 \u003d prepareIcPredicate(\"S\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate3 \u003d prepareHeightPredicate(\"162 174\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FindCommand command \u003d new FindCommand(Arrays.asList(predicate1, predicate2, predicate3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate1.and(predicate2).and(predicate3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARL), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the height field."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareHeightPredicate(String userInput) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the name field."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_NAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the ic field."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareIcPredicate(String userInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_IC);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 45,
      "wang-jun-hao": 2,
      "divakarmal": 26,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "PrestonTYR": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.resetAccessedPatient();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ListCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.resetAccessedPatient();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ListCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11,
      "PrestonTYR": 8,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/NoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.NoteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for NoteCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class NoteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_noteOnListView_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // set model to hold no optional patient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.resetAccessedPatient();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote medicalNote \u003d new MedicalNote(new Date(\"20-10-2019\", true), \"John\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \"Patient is having fever.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        NoteCommand noteCommand \u003d new NoteCommand(medicalNote);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(noteCommand, model, NoteCommand.MESSAGE_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_accessFirstPatientThenNote_successWithCorrectNoteAdded() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        //TODO: make sure medical note list is loaded first"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote medicalNote \u003d new MedicalNote(new Date(\"20-10-2019\", true), \"John\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \"Patient is having fever.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        NoteCommand noteCommand \u003d new NoteCommand(medicalNote);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient resultingPatient \u003d new PatientBuilder(targetPatient).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        resultingPatient.addMedicalNote(medicalNote);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, medicalNote);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), resultingPatient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(noteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same medical note -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote medicalNote \u003d new MedicalNote(new Date(\"20-10-2019\", true), \"John\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \"Patient is having fever.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        NoteCommand noteCommand1 \u003d new NoteCommand(medicalNote);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        NoteCommand noteCommand2 \u003d new NoteCommand(medicalNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(noteCommand1.equals(noteCommand2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different medical note -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote differentMedicalNote \u003d new MedicalNote(new Date(\"21-10-2019\", true), \"Gary\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \"Patient is having chills.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        NoteCommand differentNoteCommand \u003d new NoteCommand(differentMedicalNote);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(noteCommand1.equals(differentNoteCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(noteCommand1.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 81
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/AccessCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private AccessCommandParser parser \u003d new AccessCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parse_validArgs_returnsAccessCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AccessCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 25
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_BLOOD_TYPE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_IC_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // multiple ics - last ic accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_AMY + DOB_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple heights - last height accepted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_AMY + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // multiple weights - last weight accepted"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_AMY + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple blood type - last blood type accepted"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_AMY + BLOOD_TYPE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new AddCommand(expectedPatientMultipleTags));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing email"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withEmail(\"\").build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // missing address"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withAddress(\"\").build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing height"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withHeight(\"\").build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing weight"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withWeight(\"\").build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing bloodType"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withBloodType(\"\").build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing ic prefix"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, VALID_IC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + VALID_NAME_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // missing date of birth prefix"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + VALID_DOB_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // invalid ic"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, INVALID_IC_DESC + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + INVALID_NAME_DESC + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + INVALID_DOB_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_HEIGHT_DESC + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + INVALID_WEIGHT_DESC"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + INVALID_BLOOD_TYPE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + INVALID_NAME_DESC + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "wang-jun-hao": 12,
      "divakarmal": 80,
      "foojingyi": 47,
      "PrestonTYR": 80,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_BLOOD_TYPE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_IC_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1 l/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_IC_DESC, Ic.MESSAGE_CONSTRAINTS); // invalid ic"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_HEIGHT_DESC, Height.MESSAGE_CONSTRAINTS); // invalid height"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WEIGHT_DESC, Weight.MESSAGE_CONSTRAINTS); // invalid weight"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BLOOD_TYPE_DESC, BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + VALID_HEIGHT_AMY,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + DOB_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + BLOOD_TYPE_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withName(VALID_NAME_AMY).withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withWeight(VALID_WEIGHT_AMY).withBloodType(VALID_BLOOD_TYPE_AMY)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // ic"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // date of birth"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withDateOfBirth(VALID_DOB_AMY).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_AMY).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withWeight(VALID_WEIGHT_AMY).build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // blood type"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withBloodType(VALID_BLOOD_TYPE_AMY).build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + IC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + DOB_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_BOB)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + PHONE_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9,
      "wang-jun-hao": 9,
      "divakarmal": 103,
      "foojingyi": 14,
      "PrestonTYR": 18,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String SINGLE_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] nameKeywords \u003d new String[]{ \"Alice\", \"Bob\" };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] icKeywords \u003d new String[]{ \"T0232323I\", \"S9234567A\" };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dobKeywords \u003d new String[]{ \"14-07-2002\", \"01-03-1992\" };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] phoneKeywords \u003d new String[]{ \"94351253\", \"95352563\" };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] addressKeywords \u003d new String[]{ \"Clementi\", \"Changi\" };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] emailKeywords \u003d new String[]{ \"foo@bar.com\", \"bar@foo.com\" };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] heightKeywords \u003d new String[]{ \"178\", \"159\" };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] weightKeywords \u003d new String[]{ \"70.2\", \"54.9\" };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] bloodTypeKeywords \u003d new String[]{ \"A+\", \"B+\" };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArg \u003d generateArgument(PREFIX_NAME, nameKeywords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArg \u003d generateArgument(PREFIX_IC, icKeywords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String dobArg \u003d generateArgument(PREFIX_DATE, dobKeywords);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArg \u003d generateArgument(PREFIX_PHONE, phoneKeywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String addressArg \u003d generateArgument(PREFIX_ADDRESS, addressKeywords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String emailArg \u003d generateArgument(PREFIX_EMAIL, emailKeywords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightArg \u003d generateArgument(PREFIX_HEIGHT, heightKeywords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String weightArg \u003d generateArgument(PREFIX_WEIGHT, weightKeywords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String bloodTypeArg \u003d generateArgument(PREFIX_BLOOD_TYPE, bloodTypeKeywords);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] nameKeywordsAlt \u003d new String[]{ \"Charlie\", \"Donald\" };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] icKeywordsAlt \u003d new String[]{ \"G1812399T\", \"S8892300F\" };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dobKeywordsAlt \u003d new String[]{ \"07-08-1977\", \"19-01-1990\" };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] phoneKeywordsAlt \u003d new String[]{ \"82314003\", \"64308920\" };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] addressKeywordsAlt \u003d new String[]{ \"Woodlands\", \"Punggol\" };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] emailKeywordsAlt \u003d new String[]{ \"testing@example.org\", \"exaple@testing.org\" };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] heightKeywordsAlt \u003d new String[]{ \"171\", \"167\" };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] weightKeywordsAlt \u003d new String[]{ \"66.6\", \"63.9\" };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] bloodTypeKeywordsAlt \u003d new String[]{ \"AB-\", \"B-\" };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArgAlt \u003d generateArgument(PREFIX_NAME, nameKeywordsAlt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArgAlt \u003d generateArgument(PREFIX_IC, icKeywordsAlt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String dobArgAlt \u003d generateArgument(PREFIX_DATE, dobKeywordsAlt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArgAlt \u003d generateArgument(PREFIX_PHONE, phoneKeywordsAlt);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String addressArgAlt \u003d generateArgument(PREFIX_ADDRESS, addressKeywordsAlt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String emailArgAlt \u003d generateArgument(PREFIX_EMAIL, emailKeywordsAlt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightArgAlt \u003d generateArgument(PREFIX_HEIGHT, heightKeywordsAlt);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String weightArgAlt \u003d generateArgument(PREFIX_WEIGHT, weightKeywordsAlt);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String bloodTypeArgAlt \u003d generateArgument(PREFIX_BLOOD_TYPE, bloodTypeKeywordsAlt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e namePred \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(nameKeywords), PREFIX_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e icPred \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(icKeywords), PREFIX_IC);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e dobPred \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(dobKeywords), PREFIX_DATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e phonePred \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(phoneKeywords), PREFIX_PHONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e addressPred \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(addressKeywords), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e emailPred \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(emailKeywords), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e heightPred \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(heightKeywords), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e weightPred \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(weightKeywords), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e bloodTypePred \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(bloodTypeKeywords), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cPredicate\u003cPatient\u003e\u003e predicates \u003d Arrays.asList(namePred, icPred, dobPred, phonePred, addressPred,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                emailPred, heightPred, weightPred, bloodTypePred);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // calling with arguments in different order returns the same FindCommand"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, phoneArg + icArg + dobArg + nameArg + bloodTypeArg + emailArg"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                         + addressArg + heightArg + weightArg,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple whitespaces between, before and after keywords"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArgWithWhitespaces \u003d \"  \\t \" + nameArg.replaceAll(\" \", \" \\n \\t \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArgWithWhitespaces \u003d \"  \" + icArg.replaceAll(\" \", \" \\n   \\r \\t \") + \"  \\t \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String dobArgWithWhitespaces \u003d dobArg.replaceAll(\" \", \" \\n \\r   \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArgWithWhitespaces \u003d phoneArg.replaceAll(\" \", \"  \\r  \\t  \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArgWithWhitespaces + icArgWithWhitespaces + dobArgWithWhitespaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + phoneArgWithWhitespaces + addressArg + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArgAlt + nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple ics - last ic accepted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArgAlt + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArgAlt + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArgAlt + phoneArg + addressArg"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple address - last address accepted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArgAlt + addressArg"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple emails - last emails accepted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArgAlt + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple heights - last heights accepted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArgAlt + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple weights - last weights accepted"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArgAlt + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple blood types - last blood types accepted"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArgAlt + bloodTypeArg,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parse_fieldsMissing_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // whitespace as argument"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"       \", expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no prefixes provided"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"Alice\", expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private String generateArgument(Prefix prefix, String... keywords) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return SINGLE_WHITESPACE + prefix + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 146,
      "wang-jun-hao": 4,
      "divakarmal": 20,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/MediBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBookParser parser \u003d new MediBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseCommand_access() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand command \u003d (AccessCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                AccessCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(new AccessCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(new FindCommand(new FieldContainsKeywordsPredicate(keywords, PREFIX_NAME)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "divakarmal": 31,
      "PrestonTYR": 8,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/NoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NOTE_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_DOCTOR_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONTENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOCTOR_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NON_FUTURE_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.NoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class NoteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final NoteCommandParser parser \u003d new NoteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalNonFutureDateSpecified_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, NOTE_NON_FUTURE_DATE_DESC + NOTE_DOCTOR_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new NoteCommand(new MedicalNote(new Date(VALID_NON_FUTURE_DATE, true),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                        VALID_DOCTOR_NAME, VALID_CONTENT)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalFutureDateSpecified_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, NOTE_FUTURE_DATE_DESC + NOTE_DOCTOR_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Date.MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // missing doctor name field"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, NOTE_NON_FUTURE_DATE_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // missing content field"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, NOTE_DOCTOR_DESC,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // missing doctor name and content fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalDateMissing_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, NOTE_DOCTOR_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new NoteCommand(new MedicalNote(new Date(), VALID_DOCTOR_NAME, VALID_CONTENT)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, INVALID_NOTE_DATE_DESC + NOTE_DOCTOR_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 65
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_IC \u003d \"S99999w9Q\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_DOB \u003d \"23/09/11\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"18o\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"20.15\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String INVALID_BLOOD_TYPE \u003d \"C+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_IC \u003d \"S9999999R\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_DOB \u003d \"13-04-1999\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"178\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String VALID_WEIGHT \u003d \"65.0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BLOOD_TYPE \u003d \"O+\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIc((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIc(INVALID_IC));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_validValueWithoutWhitespace_returnsIc() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic expectedIc \u003d new Ic(VALID_IC);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedIc, ParserUtil.parseIc(VALID_IC));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_validValueWithWhitespace_returnsTrimmedIc() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String icWithWhitespace \u003d WHITESPACE + VALID_IC + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic expectedIc \u003d new Ic(VALID_IC);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedIc, ParserUtil.parseIc(icWithWhitespace));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth((String) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(INVALID_DOB));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DOB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(VALID_DOB));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String dateOfBirthWithWhitespace \u003d WHITESPACE + VALID_DOB + WHITESPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(dateOfBirthWithWhitespace));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)).get());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(addressWithWhitespace)).get());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(Optional.of(VALID_EMAIL)).get());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(Optional.of(emailWithWhitespace)).get());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(Optional.of(INVALID_HEIGHT)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(Optional.of(VALID_HEIGHT)).get());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightWithWhitespace \u003d WHITESPACE + VALID_HEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(Optional.of(heightWithWhitespace)).get());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(Optional.of(INVALID_WEIGHT)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_validValueWithoutWhitespace_returnsWeight() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedWeight, ParserUtil.parseWeight(Optional.of(VALID_WEIGHT)).get());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_validValueWithWhitespace_returnsTrimmedWeight() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String weightWithWhitespace \u003d WHITESPACE + VALID_WEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedWeight, ParserUtil.parseWeight(Optional.of(weightWithWhitespace)).get());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseBloodType_null_returnsEmptyOptional() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e expectedBloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.ofNullable(null)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(Optional.of(INVALID_BLOOD_TYPE)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOOD_TYPE);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.of(VALID_BLOOD_TYPE)).get());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOOD_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOOD_TYPE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.of(bloodTypeWithWhitespace)).get());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 17,
      "wang-jun-hao": 19,
      "divakarmal": 35,
      "foojingyi": 25,
      "PrestonTYR": 42,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null, true));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null, false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validNonFutureDate_successWithCorrectPublicValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date nonFutureDate \u003d new Date(\"19-02-2020\", true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19-02-2020\", nonFutureDate.inputValue);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19 Feb 2020\", nonFutureDate.outputValue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validFutureDate_successWithCorrectPublicValues() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date futureDate \u003d new Date(\"19-02-2021\", false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19-02-2021\", futureDate.inputValue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19 Feb 2021\", futureDate.outputValue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validFutureDateWithNonFutureAsTrue_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19-02-2021\", true));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidDate_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19/02/2021\", false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19022021\", false));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19 Feb 2021\", false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19/02/2020\", true));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19022020\", true));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19 Feb 2020\", true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(null)); // null input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"21/03/89\")); // wrong format with /"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"23-04-00\")); // wrong year format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"2 Feb 1996\")); // wrong format with letters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid date of birth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"14-09-3000\")); // future date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"23-03-2000\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-07-1995\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-1995\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 61
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/MediBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Collections.emptyList(), mediBook.getPatientList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mediBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData_withValidReadOnlyMediBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook newData \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(newData, mediBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBookStub newData \u003d new MediBookStub(newPatients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e mediBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mediBook.hasPatient(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientNotInMediBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(mediBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(mediBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(mediBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mediBook.getPatientList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A stub ReadOnlyMediBook whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static class MediBookStub implements ReadOnlyMediBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 44,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.MediBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new MediBook(), new MediBook(modelManager.getMediBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"medibook/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"new/medibook/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMediBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_validPath_setsMediBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Path path \u003d Paths.get(\"medibook/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.setMediBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(path, modelManager.getMediBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientNotInMediBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook differentMediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager \u003d new ModelManager(mediBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mediBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different mediBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMediBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        modelManager.updateFilteredPatientList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(keywords), PREFIX_NAME));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mediBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        differentUserPrefs.setMediBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mediBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "divakarmal": 37,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMediBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setMedicalNotesDirPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMedicalNotesDirPath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "divakarmal": 4,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/MedicalNoteListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class MedicalNoteListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote \u003d new MedicalNote(new Date(\"20-10-2019\", true),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"John\", \"Patient is awesome.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote2 \u003d new MedicalNote(new Date(\"25-10-2019\", true),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Gary\", \"Patient is bad.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void add_emptyMedicalNoteList_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList emptyMedicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        emptyMedicalNoteList.add(medicalNote);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList expectedMedicalNoteList \u003d new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNoteList, emptyMedicalNoteList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void add_nonEmptyMedicalNoteList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList partiallyFilledMedicalNoteList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        partiallyFilledMedicalNoteList.add(medicalNote2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList expectedMedicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote, medicalNote2)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNoteList, partiallyFilledMedicalNoteList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void makeCopy() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList testList \u003d new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList copiedList \u003d testList.makeCopy();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(testList, copiedList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(copiedList !\u003d testList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 46
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/MedicalNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "class MedicalNoteTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when date is null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new MedicalNote(null, \"Lydia Yu\", \"Patient is asymptomatic.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when doctorName is null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true), null,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    \"Patient is asymptomatic.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when content is null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true), \"Lydia Yu\", null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidDate \u003d \"15/04/20\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(invalidDate, true), \"Lydia Yu\", \"Patient is asymptomatic.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDoctorName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidDoctorName \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true), invalidDoctorName, \"Patient is asymptomatic.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidContent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidContent \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true), \"Lydia Yu\", invalidContent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    void isValidDoctorName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // null doctor name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MedicalNote.isValidDoctorName(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid doctor name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(MedicalNote.isValidDoctorName(\"\")); // empty string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(MedicalNote.isValidDoctorName(\" \")); // spaces only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(MedicalNote.isValidDoctorName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(MedicalNote.isValidDoctorName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // valid doctor name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidDoctorName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidDoctorName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidDoctorName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidDoctorName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidDoctorName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    void isValidContent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // null content"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MedicalNote.isValidContent(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(MedicalNote.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // valid content"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidContent(\"Patient is asymptomatic.\")); // any characters"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(MedicalNote.isValidContent(\"#%@\")); // any characters"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 8,
      "divakarmal": 2,
      "foojingyi": 75
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/BloodTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class BloodTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_invalidBloodType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String invalidBloodType \u003d \"E-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void isValidBloodType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"5\")); // numeric blood type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"C+\")); // invalid blood type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A\")); // invalid blood type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // valid blood type"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"B+\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"A+\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"AB-\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 36
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/BmiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class BmiTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullWeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null, new Height(VALID_HEIGHT_BOB)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullHeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(new Weight(VALID_WEIGHT_BOB), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullWeightAndNullHeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validWeightAndValidHeight_correctBmiValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"23.6\", new Bmi(new Weight(VALID_WEIGHT_BOB), new Height(VALID_HEIGHT_BOB)).value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"16.9\", new Bmi(new Weight(VALID_WEIGHT_AMY), new Height(VALID_HEIGHT_AMY)).value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidBmi_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidBmi \u003d \"-20.5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Bmi(invalidBmi));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidBmi() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid bmi"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(null)); // null input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"\")); // empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"-10.5\")); // negative bmi"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"20.49\")); // 2 decimal point bmi"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"30.y\")); // non-numeric character"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid bmi"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"20.9\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"30.0\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"19.2\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 56,
      "divakarmal": 6
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/DateOfBirthTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "class DateOfBirthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDateOfBirth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidHeight \u003d \"13/12/1989\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidHeight));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void isValidDateOfBirth() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(null)); // null input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"21/03/89\")); // wrong format with /"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"23-04-00\")); // wrong year format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2 Feb 1996\")); // wrong format with letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"14-09-3000\")); // future date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // valid date of birth"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"23-03-2000\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"01-07-1995\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"31-12-1995\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 2,
      "foojingyi": 33
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/FieldContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FieldContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\", \"third\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_IC);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, prefix -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different keywords, prefix -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different keywords, same prefix -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, different prefix -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        firstPredicateCopy \u003d new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, different prefix (test with different prefix) -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        firstPredicateCopy \u003d new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsOneKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"S9123456Z\"), PREFIX_IC);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9123456Z\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"08-09-2010\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"81234567\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"81234567\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"Clementi\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"cornelia@example.com\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"168\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"168\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"66.6\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"AB+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"AB+\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsKeywordAsSubstring_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"lic\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"3456Z\"), PREFIX_IC);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9123456Z\").build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"08-09-2010\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"8123\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"81234567\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"Clement\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"@example.com\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"16\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"168\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"6.6\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"AB+\").build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsMultipleKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Zach\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"311\", \"Street\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no tests for other fields since the other fields are not separated by spaces"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_matchesOneKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"S9123456Z\", \"S9876543C\"), PREFIX_IC);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"15-03-2002\", \"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"15-03-2002\").build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"81234567\", \"66669876\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"66669876\").build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Clementi\", \"Hougang\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"cornelia@example.com\", \"johnd@example.com\"),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"168\", \"177\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"177\").build()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"66.6\", \"80.4\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"B+\", \"AB+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_mixedCaseKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"s9876543c\"), PREFIX_IC);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"clemENTI\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"CoRnElIa@ExAmPlE.cOm\"),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"b+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no tests for dob, phone, height, weight fields since these fields are numeric."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_zeroKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_NAME);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_IC);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_DATE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withDateOfBirth(\"15-03-2002\").build()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_PHONE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withPhone(\"66669876\").build()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withHeight(\"177\").build()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_nonMatchingKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Carol\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"S9123456Z\", \"S9876543C\"), PREFIX_IC);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S8642024G\").build()));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"15-03-2002\", \"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withDateOfBirth(\"13-04-1985\").build()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"81234567\", \"66669876\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withPhone(\"94210412\").build()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Orchard\", \"Bedok\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withAddress(\"618, Newton Street 52, #01-21\").build()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\".edu\", \".org\"),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withEmail(\"test@foobar.com\").build()));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"159\", \"169\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withHeight(\"172\").build()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"77.7\", \"53.2\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withWeight(\"68.9\").build()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"A-\", \"B-\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withBloodType(\"A+\").build()));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_keywordMatchesOtherFields_returnsFalse() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except name"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new FieldContainsKeywordsPredicate(Arrays.asList(\"S9999999R\", \"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except ic"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_IC);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except date of birth"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"A+\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except phone"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // keywords match all fields except address"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except email"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alicia\", \"S9999999R\", \"12345\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alicia\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except height"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except weight"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"A+\", \"12-08-1999\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except blood type"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"12-08-1999\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 358,
      "wang-jun-hao": 8,
      "divakarmal": 18
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/HeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String invalidHeight \u003d \" 160\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-10\")); // negative height"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"300\")); // height larger than 299cm"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"17i\")); // non-numeric character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"50\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"195\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"169\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 34,
      "divakarmal": 2
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/IcTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class IcTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Ic(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void constructor_invalidIc_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String invalidIc \u003d \"S9922eq3W\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Ic(invalidIc));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void isValidIc() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // invalid ic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S123456H\")); // less than 7 digit number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"A0213487Y\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S12345g6Y\")); // letters where digits should be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"ST1234567A\")); // more than 1 letter at the start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S1234567AA\")); // more than 1 letter at the end"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // valid ic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"S1234567Y\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"T0012345Q\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"F6565653R\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "PrestonTYR": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        //different ic -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB).withBloodType(VALID_BLOOD_TYPE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // same ic, same name, same date of birth, same height, same weight, same address, different phone,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different email -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, different name, different phone, different email -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different ic -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different height -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 3,
      "divakarmal": 50,
      "foojingyi": 6,
      "PrestonTYR": 15,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 177
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/WeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidWeight \u003d \"55.55\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"-10.5\")); // negative weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"40.49\")); // 2 decimal point weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"70.y\")); // non-numeric character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"50.5\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"195.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"88.8\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 34,
      "divakarmal": 2
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedMedicalNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.model.Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.model.medicalnote.MedicalNote.CONTENT_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.model.medicalnote.MedicalNote.NAME_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedMedicalNote.ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonAdaptedMedicalNoteTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_validMedicalNotesDetails_returnsMedicalNote() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNote medicalNote \u003d VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d new JsonAdaptedMedicalNote(medicalNote);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(medicalNote, patient.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(\"30-30-2020\", \"Dr Watson\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(null, \"Dr Watson\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", null, \"Patient is feeling well\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \" Dr Invalid\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d NAME_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d CONTENT_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 72
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_IC \u003d \"A12345R7H\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_DOB \u003d \"31/12/95\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"17S\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"10.12\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_BMI \u003d \"10.12\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String INVALID_BLOOD_TYPE \u003d \"D+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_IC \u003d BENSON.getIc().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getStringEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getStringAddress();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getStringHeight();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_WEIGHT \u003d BENSON.getStringWeight();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BMI \u003d BENSON.getStringBmi();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BLOOD_TYPE \u003d BENSON.getStringBloodType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_invalidIc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(INVALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d Ic.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_nullIc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ic.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, INVALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, null, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, INVALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                INVALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, INVALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d Height.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_invalidWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, INVALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Weight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_invalidBmi_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, INVALID_BMI, VALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Bmi.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_invalidBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, INVALID_BLOOD_TYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, invalidTags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "wang-jun-hao": 29,
      "divakarmal": 60,
      "foojingyi": 12,
      "PrestonTYR": 12,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonMediBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonMediBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMediBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMediBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMediBook\u003e readMediBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new JsonMediBookStorage(Paths.get(filePath)).readMediBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(readMediBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"notJsonFormatMediBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_invalidPatientMediBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"invalidPatientMediBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_invalidAndValidPatientMediBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"invalidAndValidPatientMediBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readAndSaveMediBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMediBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook original \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage jsonMediBookStorage \u003d new JsonMediBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook readBack \u003d jsonMediBookStorage.readMediBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(original, new MediBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        readBack \u003d jsonMediBookStorage.readMediBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(original, new MediBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        readBack \u003d jsonMediBookStorage.readMediBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(original, new MediBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook_nullMediBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMediBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves {@code mediBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private void saveMediBook(ReadOnlyMediBook mediBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new JsonMediBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    .saveMediBook(mediBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMediBook(new MediBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 110
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonMedicalNoteListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.getTypicalMedicalNoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonMedicalNoteListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonMedicalNoteListStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Ic IC \u003d new Ic(\"S7329204G\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMedicalNoteList(null, IC));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(String filePath, Ic ic) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new JsonMedicalNoteListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .readMedicalNoteList(addToTestDataPathIfNotNull(filePath), ic);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(readMedicalNoteList(\"NonExistentFile.json\", IC).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                readMedicalNoteList(\"notJsonFormatMedicalNotes\", IC));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_invalidPatientMedicalNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMedicalNoteList(\"invalidPatientMedicalNotes\", IC));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_invalidAndValidPatientMedicalNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                readMedicalNoteList(\"invalidAndValidPatientMedicalNotes\", IC));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readAndSaveMedicalNoteList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMedicalNotes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage jsonMedicalNoteListStorage \u003d new JsonMedicalNoteListStorage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(filePath, IC).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        original.add(VALID_MEDICAL_NOTE1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(filePath, IC).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        original.add(VALID_MEDICAL_NOTE2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, IC); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(IC).get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList_nullMMedicalNoteList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMedicalNoteList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Saves {@code medicalNoteList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new JsonMedicalNoteListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    .saveMedicalNoteList(medicalNoteList, addToTestDataPathIfNotNull(filePath), IC);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMedicalNoteList(new MedicalNoteList(), null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 114
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonSerializableMediBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonSerializableMediBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMediBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientMediBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path INVALID_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientMediBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientMediBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook typicalPatientsMediBook \u003d TypicalPatients.getTypicalMediBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(mediBookFromFile, typicalPatientsMediBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMediBook.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 24,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonSerializableMedicalNoteListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.testutil.TypicalMedicalNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonSerializableMedicalNoteListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMedicalNoteListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_MEDICAL_NOTES \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalPatientMedicalNotes.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path INVALID_PATIENTS_MEDICAL_NOTES \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidPatientMedicalNotes.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonSerializableMedicalNoteList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_MEDICAL_NOTES,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                JsonSerializableMedicalNoteList.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNotesFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList typicalPatientsMedicalNotes \u003d TypicalMedicalNotes.getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(medicalNotesFromFile, typicalPatientsMedicalNotes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonSerializableMedicalNoteList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_MEDICAL_NOTES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                JsonSerializableMedicalNoteList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 41
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"medibook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.getTypicalMedicalNoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d new JsonMediBookStorage(getTempFilePath(\"mb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonMedicalNoteListStorage(getTempFilePath(\"mnl\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void mediBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "         * {@link JsonMediBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMediBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook original \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        storageManager.saveMediBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook retrieved \u003d storageManager.readMediBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(original, new MediBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getMediBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertNotNull(storageManager.getMediBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void medicalNotesReadSave() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * {@link JsonMedicalNoteListStorage} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMedicalNoteListStorageTest} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic \u003d new Ic(\"T0012393D\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, ic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList retrieved \u003d storageManager.readMedicalNoteList(ic).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 21,
      "divakarmal": 16,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private EditCommand.EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setIc(patient.getIc());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setDateOfBirth(patient.getDateOfBirth());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setEmail(patient.getEmail().get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setAddress(patient.getAddress().get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setHeight(patient.getHeight().get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setWeight(patient.getWeight().get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setBloodType(patient.getBloodType().get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setTags(patient.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Ic} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withIc(String ic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setIc(new Ic(ic));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Height} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setHeight(new Height(height));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Weight} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setWeight(new Weight(weight));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code BloodType} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setBloodType(new BloodType(bloodType));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditCommand.EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 127,
      "PrestonTYR": 10
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/MediBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building MediBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *     {@code MediBook mb \u003d new MediBookBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private MediBook mediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder(MediBook mediBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook \u003d mediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a new {@code Patient} to the {@code MediBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_IC \u003d \"S5436781A\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"08-09-1954\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"170\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_WEIGHT \u003d \"58.7\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DEFAULT_BMI \u003d \"20.3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_BLOOD_TYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Ic ic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cHeight\u003e height;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cWeight\u003e weight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cBmi\u003e bmi;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cBloodType\u003e bloodType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ic \u003d new Ic(DEFAULT_IC);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        dateOfBirth \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        email \u003d Optional.of(new Email(DEFAULT_EMAIL));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        address \u003d Optional.of(new Address(DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        height \u003d Optional.of(new Height(DEFAULT_HEIGHT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        weight \u003d Optional.of(new Weight(DEFAULT_WEIGHT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        bmi \u003d Optional.of(new Bmi(DEFAULT_BMI));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        bloodType \u003d Optional.of(new BloodType(DEFAULT_BLOOD_TYPE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ic \u003d patientToCopy.getIc();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        dateOfBirth \u003d patientToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        email \u003d patientToCopy.getEmail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        height \u003d patientToCopy.getHeight();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        weight \u003d patientToCopy.getWeight();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        bmi \u003d patientToCopy.getBmi();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        bloodType \u003d patientToCopy.getBloodType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Ic} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withIc(String ic) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.ic \u003d new Ic(ic);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.isBlank()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.address \u003d Optional.empty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.address \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Email} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.isBlank()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.email \u003d Optional.empty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.email \u003d Optional.of(new Email(email));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Height} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isBlank()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.height \u003d Optional.empty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.height \u003d Optional.of(new Height(height));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Weight} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.isBlank()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.weight \u003d Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.weight \u003d Optional.of(new Weight(weight));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Sets the {@code Bmi} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public PatientBuilder withBmi(String bmi) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bmi.isBlank()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.of(new Bmi(bmi));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.isBlank()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bloodType \u003d Optional.of(new BloodType(bloodType));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates Patient object based on the fields specified in this PatientBuilder object (bmi auto-generated)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new Patient(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                bloodType, tags);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates Patient object based on the fields specified in this PatientBuilder object (bmi explicitly specified)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Patient buildWithSpecifiedBmi() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new Patient(ic, name, dateOfBirth, phone, email, address, height, weight, bmi,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                bloodType, tags);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 18,
      "divakarmal": 150,
      "PrestonTYR": 43
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_IC + patient.getIc().ic + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        sb.append(PREFIX_DATE + patient.getDateOfBirth().inputValue + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_EMAIL + patient.getStringEmail() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_ADDRESS + patient.getStringAddress() + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_HEIGHT + patient.getStringHeight() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_WEIGHT + patient.getStringWeight() + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_BLOOD_TYPE + patient.getStringBloodType() + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patient.getTags().stream().forEach("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getIc().ifPresent(ic -\u003e sb.append(PREFIX_IC).append(ic.ic).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.getDateOfBirth()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DATE).append(dateOfBirth.inputValue).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getHeight().ifPresent(height -\u003e sb.append(PREFIX_HEIGHT).append(height.value).append(\" \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getWeight().ifPresent(weight -\u003e sb.append(PREFIX_WEIGHT).append(weight.value).append(\" \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.getBloodType().ifPresent(bloodType -\u003e sb.append(PREFIX_BLOOD_TYPE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(bloodType.bloodType.label).append(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 3,
      "divakarmal": 33,
      "foojingyi": 1,
      "PrestonTYR": 24,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalMedicalNotes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * A utility class containing a list of {@code MedicalNote} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TypicalMedicalNotes {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // Medical Notes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE1 \u003d new MedicalNote("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"01-01-2020\", true),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Dr Strange\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Patient is in critical condition.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE2 \u003d new MedicalNote("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"17-01-2020\", true),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Dr Who\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Patient is recovering well.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE3 \u003d new MedicalNote("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"23-01-2020\", true),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Dr Nick\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Patient has fully recovered.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns a {@code MedicalNoteList} with all the typical medical notes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static MedicalNoteList getTypicalMedicalNoteList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNotes \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNotes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 40
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withIc(\"S9777777R\").withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"15-09-1997\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            .withPhone(\"94351253\").withHeight(\"174\").withWeight(\"48.5\").withBloodType(\"A+\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withIc(\"S9234567A\").withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"01-03-1992\").withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withHeight(\"170\").withWeight(\"63.5\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            .withBloodType(\"AB+\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withIc(\"S9876543W\").withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"16-01-1998\").withPhone(\"95352563\").withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"wall street\").withHeight(\"162\").withWeight(\"80.8\").withBloodType(\"B+\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withIc(\"T0054321P\").withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"10-10-2000\").withPhone(\"87652533\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"10th street\").withHeight(\"183\").withWeight(\"70.3\").withBloodType(\"A-\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withIc(\"F7654321Q\").withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"05-10-1976\").withPhone(\"9482224\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"michegan ave\").withHeight(\"177\").withWeight(\"43.5\").withBloodType(\"B-\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withIc(\"S7543210A\").withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"02-07-1975\").withPhone(\"9482427\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"little tokyo\").withHeight(\"168\").withWeight(\"50.5\").withBloodType(\"O+\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withIc(\"T0232323I\").withName(\"George Best\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"14-07-2002\").withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withHeight(\"169\").withWeight(\"69.2\").withBloodType(\"A+\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withIc(\"S8756432F\").withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"23-03-1987\").withPhone(\"8482424\").withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"little india\").withHeight(\"171\").withBloodType(\"A+\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withIc(\"T0066441J\").withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"01-03-1992\").withPhone(\"8482131\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"chicago ave\").withHeight(\"160\").withBloodType(\"A+\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withIc(VALID_IC_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withIc(VALID_IC_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an {@code MediBook} with all the typical patients."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static MediBook getTypicalMediBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 47,
      "foojingyi": 13,
      "PrestonTYR": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import seedu.medibook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003cfx:root type\u003d\"seedu.medibook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 5
    }
  }
]
